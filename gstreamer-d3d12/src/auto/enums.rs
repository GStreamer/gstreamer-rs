// This file was generated by gir (https://github.com/gtk-rs/gir)
// from gir-files (https://github.com/gtk-rs/gir-files)
// from gst-gir-files (https://gitlab.freedesktop.org/gstreamer/gir-files-rs.git)
// DO NOT EDIT

use crate::ffi;
use glib::{prelude::*, translate::*};

#[derive(Debug, Eq, PartialEq, Ord, PartialOrd, Hash, Clone, Copy)]
#[non_exhaustive]
#[doc(alias = "GstD3D12AllocationFlags")]
pub enum D3D12AllocationFlags {
    #[doc(alias = "GST_D3D12_ALLOCATION_FLAG_DEFAULT")]
    D3d12AllocationFlagDefault,
    #[doc(hidden)]
    __Unknown(i32),
}

#[doc(hidden)]
impl IntoGlib for D3D12AllocationFlags {
    type GlibType = ffi::GstD3D12AllocationFlags;

    #[inline]
    fn into_glib(self) -> ffi::GstD3D12AllocationFlags {
        match self {
            Self::D3d12AllocationFlagDefault => ffi::GST_D3D12_ALLOCATION_FLAG_DEFAULT,
            Self::__Unknown(value) => value,
        }
    }
}

#[doc(hidden)]
impl FromGlib<ffi::GstD3D12AllocationFlags> for D3D12AllocationFlags {
    #[inline]
    unsafe fn from_glib(value: ffi::GstD3D12AllocationFlags) -> Self {
        skip_assert_initialized!();

        match value {
            ffi::GST_D3D12_ALLOCATION_FLAG_DEFAULT => Self::D3d12AllocationFlagDefault,
            value => Self::__Unknown(value),
        }
    }
}

#[derive(Debug, Eq, PartialEq, Ord, PartialOrd, Hash, Clone, Copy)]
#[non_exhaustive]
#[doc(alias = "GstD3D12ConverterAlphaMode")]
pub enum D3D12ConverterAlphaMode {
    #[doc(alias = "GST_D3D12_CONVERTER_ALPHA_MODE_UNSPECIFIED")]
    Unspecified,
    #[doc(alias = "GST_D3D12_CONVERTER_ALPHA_MODE_PREMULTIPLIED")]
    Premultiplied,
    #[doc(alias = "GST_D3D12_CONVERTER_ALPHA_MODE_STRAIGHT")]
    Straight,
    #[doc(hidden)]
    __Unknown(i32),
}

#[doc(hidden)]
impl IntoGlib for D3D12ConverterAlphaMode {
    type GlibType = ffi::GstD3D12ConverterAlphaMode;

    #[inline]
    fn into_glib(self) -> ffi::GstD3D12ConverterAlphaMode {
        match self {
            Self::Unspecified => ffi::GST_D3D12_CONVERTER_ALPHA_MODE_UNSPECIFIED,
            Self::Premultiplied => ffi::GST_D3D12_CONVERTER_ALPHA_MODE_PREMULTIPLIED,
            Self::Straight => ffi::GST_D3D12_CONVERTER_ALPHA_MODE_STRAIGHT,
            Self::__Unknown(value) => value,
        }
    }
}

#[doc(hidden)]
impl FromGlib<ffi::GstD3D12ConverterAlphaMode> for D3D12ConverterAlphaMode {
    #[inline]
    unsafe fn from_glib(value: ffi::GstD3D12ConverterAlphaMode) -> Self {
        skip_assert_initialized!();

        match value {
            ffi::GST_D3D12_CONVERTER_ALPHA_MODE_UNSPECIFIED => Self::Unspecified,
            ffi::GST_D3D12_CONVERTER_ALPHA_MODE_PREMULTIPLIED => Self::Premultiplied,
            ffi::GST_D3D12_CONVERTER_ALPHA_MODE_STRAIGHT => Self::Straight,
            value => Self::__Unknown(value),
        }
    }
}

impl StaticType for D3D12ConverterAlphaMode {
    #[inline]
    #[doc(alias = "gst_d3d12_converter_alpha_mode_get_type")]
    fn static_type() -> glib::Type {
        unsafe { from_glib(ffi::gst_d3d12_converter_alpha_mode_get_type()) }
    }
}

impl glib::HasParamSpec for D3D12ConverterAlphaMode {
    type ParamSpec = glib::ParamSpecEnum;
    type SetValue = Self;
    type BuilderFn = fn(&str, Self) -> glib::ParamSpecEnumBuilder<Self>;

    fn param_spec_builder() -> Self::BuilderFn {
        Self::ParamSpec::builder_with_default
    }
}

impl glib::value::ValueType for D3D12ConverterAlphaMode {
    type Type = Self;
}

unsafe impl<'a> glib::value::FromValue<'a> for D3D12ConverterAlphaMode {
    type Checker = glib::value::GenericValueTypeChecker<Self>;

    #[inline]
    unsafe fn from_value(value: &'a glib::Value) -> Self {
        skip_assert_initialized!();
        from_glib(glib::gobject_ffi::g_value_get_enum(value.to_glib_none().0))
    }
}

impl ToValue for D3D12ConverterAlphaMode {
    #[inline]
    fn to_value(&self) -> glib::Value {
        let mut value = glib::Value::for_value_type::<Self>();
        unsafe {
            glib::gobject_ffi::g_value_set_enum(value.to_glib_none_mut().0, self.into_glib());
        }
        value
    }

    #[inline]
    fn value_type(&self) -> glib::Type {
        Self::static_type()
    }
}

impl From<D3D12ConverterAlphaMode> for glib::Value {
    #[inline]
    fn from(v: D3D12ConverterAlphaMode) -> Self {
        skip_assert_initialized!();
        ToValue::to_value(&v)
    }
}

#[derive(Debug, Eq, PartialEq, Ord, PartialOrd, Hash, Clone, Copy)]
#[non_exhaustive]
#[doc(alias = "GstD3D12ConverterColorBalance")]
pub enum D3D12ConverterColorBalance {
    #[doc(alias = "GST_D3D12_CONVERTER_COLOR_BALANCE_DISABLED")]
    Disabled,
    #[doc(alias = "GST_D3D12_CONVERTER_COLOR_BALANCE_ENABLED")]
    Enabled,
    #[doc(hidden)]
    __Unknown(i32),
}

#[doc(hidden)]
impl IntoGlib for D3D12ConverterColorBalance {
    type GlibType = ffi::GstD3D12ConverterColorBalance;

    #[inline]
    fn into_glib(self) -> ffi::GstD3D12ConverterColorBalance {
        match self {
            Self::Disabled => ffi::GST_D3D12_CONVERTER_COLOR_BALANCE_DISABLED,
            Self::Enabled => ffi::GST_D3D12_CONVERTER_COLOR_BALANCE_ENABLED,
            Self::__Unknown(value) => value,
        }
    }
}

#[doc(hidden)]
impl FromGlib<ffi::GstD3D12ConverterColorBalance> for D3D12ConverterColorBalance {
    #[inline]
    unsafe fn from_glib(value: ffi::GstD3D12ConverterColorBalance) -> Self {
        skip_assert_initialized!();

        match value {
            ffi::GST_D3D12_CONVERTER_COLOR_BALANCE_DISABLED => Self::Disabled,
            ffi::GST_D3D12_CONVERTER_COLOR_BALANCE_ENABLED => Self::Enabled,
            value => Self::__Unknown(value),
        }
    }
}

impl StaticType for D3D12ConverterColorBalance {
    #[inline]
    #[doc(alias = "gst_d3d12_converter_color_balance_get_type")]
    fn static_type() -> glib::Type {
        unsafe { from_glib(ffi::gst_d3d12_converter_color_balance_get_type()) }
    }
}

impl glib::HasParamSpec for D3D12ConverterColorBalance {
    type ParamSpec = glib::ParamSpecEnum;
    type SetValue = Self;
    type BuilderFn = fn(&str, Self) -> glib::ParamSpecEnumBuilder<Self>;

    fn param_spec_builder() -> Self::BuilderFn {
        Self::ParamSpec::builder_with_default
    }
}

impl glib::value::ValueType for D3D12ConverterColorBalance {
    type Type = Self;
}

unsafe impl<'a> glib::value::FromValue<'a> for D3D12ConverterColorBalance {
    type Checker = glib::value::GenericValueTypeChecker<Self>;

    #[inline]
    unsafe fn from_value(value: &'a glib::Value) -> Self {
        skip_assert_initialized!();
        from_glib(glib::gobject_ffi::g_value_get_enum(value.to_glib_none().0))
    }
}

impl ToValue for D3D12ConverterColorBalance {
    #[inline]
    fn to_value(&self) -> glib::Value {
        let mut value = glib::Value::for_value_type::<Self>();
        unsafe {
            glib::gobject_ffi::g_value_set_enum(value.to_glib_none_mut().0, self.into_glib());
        }
        value
    }

    #[inline]
    fn value_type(&self) -> glib::Type {
        Self::static_type()
    }
}

impl From<D3D12ConverterColorBalance> for glib::Value {
    #[inline]
    fn from(v: D3D12ConverterColorBalance) -> Self {
        skip_assert_initialized!();
        ToValue::to_value(&v)
    }
}

#[derive(Debug, Eq, PartialEq, Ord, PartialOrd, Hash, Clone, Copy)]
#[non_exhaustive]
#[doc(alias = "GstD3D12ConverterMipGen")]
pub enum D3D12ConverterMipGen {
    #[doc(alias = "GST_D3D12_CONVERTER_MIP_GEN_DISABLED")]
    Disabled,
    #[doc(alias = "GST_D3D12_CONVERTER_MIP_GEN_ENABLED")]
    Enabled,
    #[doc(hidden)]
    __Unknown(i32),
}

#[doc(hidden)]
impl IntoGlib for D3D12ConverterMipGen {
    type GlibType = ffi::GstD3D12ConverterMipGen;

    #[inline]
    fn into_glib(self) -> ffi::GstD3D12ConverterMipGen {
        match self {
            Self::Disabled => ffi::GST_D3D12_CONVERTER_MIP_GEN_DISABLED,
            Self::Enabled => ffi::GST_D3D12_CONVERTER_MIP_GEN_ENABLED,
            Self::__Unknown(value) => value,
        }
    }
}

#[doc(hidden)]
impl FromGlib<ffi::GstD3D12ConverterMipGen> for D3D12ConverterMipGen {
    #[inline]
    unsafe fn from_glib(value: ffi::GstD3D12ConverterMipGen) -> Self {
        skip_assert_initialized!();

        match value {
            ffi::GST_D3D12_CONVERTER_MIP_GEN_DISABLED => Self::Disabled,
            ffi::GST_D3D12_CONVERTER_MIP_GEN_ENABLED => Self::Enabled,
            value => Self::__Unknown(value),
        }
    }
}

impl StaticType for D3D12ConverterMipGen {
    #[inline]
    #[doc(alias = "gst_d3d12_converter_mip_gen_get_type")]
    fn static_type() -> glib::Type {
        unsafe { from_glib(ffi::gst_d3d12_converter_mip_gen_get_type()) }
    }
}

impl glib::HasParamSpec for D3D12ConverterMipGen {
    type ParamSpec = glib::ParamSpecEnum;
    type SetValue = Self;
    type BuilderFn = fn(&str, Self) -> glib::ParamSpecEnumBuilder<Self>;

    fn param_spec_builder() -> Self::BuilderFn {
        Self::ParamSpec::builder_with_default
    }
}

impl glib::value::ValueType for D3D12ConverterMipGen {
    type Type = Self;
}

unsafe impl<'a> glib::value::FromValue<'a> for D3D12ConverterMipGen {
    type Checker = glib::value::GenericValueTypeChecker<Self>;

    #[inline]
    unsafe fn from_value(value: &'a glib::Value) -> Self {
        skip_assert_initialized!();
        from_glib(glib::gobject_ffi::g_value_get_enum(value.to_glib_none().0))
    }
}

impl ToValue for D3D12ConverterMipGen {
    #[inline]
    fn to_value(&self) -> glib::Value {
        let mut value = glib::Value::for_value_type::<Self>();
        unsafe {
            glib::gobject_ffi::g_value_set_enum(value.to_glib_none_mut().0, self.into_glib());
        }
        value
    }

    #[inline]
    fn value_type(&self) -> glib::Type {
        Self::static_type()
    }
}

impl From<D3D12ConverterMipGen> for glib::Value {
    #[inline]
    fn from(v: D3D12ConverterMipGen) -> Self {
        skip_assert_initialized!();
        ToValue::to_value(&v)
    }
}

#[derive(Debug, Eq, PartialEq, Ord, PartialOrd, Hash, Clone, Copy)]
#[non_exhaustive]
#[doc(alias = "GstD3D12ConverterSamplerFilter")]
pub enum D3D12ConverterSamplerFilter {
    #[doc(alias = "D3D12_FILTER_MIN_MAG_MIP_POINT")]
    MinMagMipPoint,
    #[doc(alias = "D3D12_FILTER_MIN_LINEAR_MAG_MIP_POINT")]
    MinLinearMagMipPoint,
    #[doc(alias = "D3D12_FILTER_MIN_MAG_LINEAR_MIP_POINT")]
    MinMagLinearMipPoint,
    #[doc(alias = "D3D12_FILTER_MIN_MAG_MIP_LINEAR")]
    MinMagMipLinear,
    #[doc(alias = "D3D12_FILTER_ANISOTROPIC")]
    Anisotropic,
    #[doc(hidden)]
    __Unknown(i32),
}

#[doc(hidden)]
impl IntoGlib for D3D12ConverterSamplerFilter {
    type GlibType = ffi::GstD3D12ConverterSamplerFilter;

    #[inline]
    fn into_glib(self) -> ffi::GstD3D12ConverterSamplerFilter {
        match self {
            Self::MinMagMipPoint => ffi::D3D12_FILTER_MIN_MAG_MIP_POINT,
            Self::MinLinearMagMipPoint => ffi::D3D12_FILTER_MIN_LINEAR_MAG_MIP_POINT,
            Self::MinMagLinearMipPoint => ffi::D3D12_FILTER_MIN_MAG_LINEAR_MIP_POINT,
            Self::MinMagMipLinear => ffi::D3D12_FILTER_MIN_MAG_MIP_LINEAR,
            Self::Anisotropic => ffi::D3D12_FILTER_ANISOTROPIC,
            Self::__Unknown(value) => value,
        }
    }
}

#[doc(hidden)]
impl FromGlib<ffi::GstD3D12ConverterSamplerFilter> for D3D12ConverterSamplerFilter {
    #[inline]
    unsafe fn from_glib(value: ffi::GstD3D12ConverterSamplerFilter) -> Self {
        skip_assert_initialized!();

        match value {
            ffi::D3D12_FILTER_MIN_MAG_MIP_POINT => Self::MinMagMipPoint,
            ffi::D3D12_FILTER_MIN_LINEAR_MAG_MIP_POINT => Self::MinLinearMagMipPoint,
            ffi::D3D12_FILTER_MIN_MAG_LINEAR_MIP_POINT => Self::MinMagLinearMipPoint,
            ffi::D3D12_FILTER_MIN_MAG_MIP_LINEAR => Self::MinMagMipLinear,
            ffi::D3D12_FILTER_ANISOTROPIC => Self::Anisotropic,
            value => Self::__Unknown(value),
        }
    }
}

impl StaticType for D3D12ConverterSamplerFilter {
    #[inline]
    #[doc(alias = "gst_d3d12_converter_sampler_filter_get_type")]
    fn static_type() -> glib::Type {
        unsafe { from_glib(ffi::gst_d3d12_converter_sampler_filter_get_type()) }
    }
}

impl glib::HasParamSpec for D3D12ConverterSamplerFilter {
    type ParamSpec = glib::ParamSpecEnum;
    type SetValue = Self;
    type BuilderFn = fn(&str, Self) -> glib::ParamSpecEnumBuilder<Self>;

    fn param_spec_builder() -> Self::BuilderFn {
        Self::ParamSpec::builder_with_default
    }
}

impl glib::value::ValueType for D3D12ConverterSamplerFilter {
    type Type = Self;
}

unsafe impl<'a> glib::value::FromValue<'a> for D3D12ConverterSamplerFilter {
    type Checker = glib::value::GenericValueTypeChecker<Self>;

    #[inline]
    unsafe fn from_value(value: &'a glib::Value) -> Self {
        skip_assert_initialized!();
        from_glib(glib::gobject_ffi::g_value_get_enum(value.to_glib_none().0))
    }
}

impl ToValue for D3D12ConverterSamplerFilter {
    #[inline]
    fn to_value(&self) -> glib::Value {
        let mut value = glib::Value::for_value_type::<Self>();
        unsafe {
            glib::gobject_ffi::g_value_set_enum(value.to_glib_none_mut().0, self.into_glib());
        }
        value
    }

    #[inline]
    fn value_type(&self) -> glib::Type {
        Self::static_type()
    }
}

impl From<D3D12ConverterSamplerFilter> for glib::Value {
    #[inline]
    fn from(v: D3D12ConverterSamplerFilter) -> Self {
        skip_assert_initialized!();
        ToValue::to_value(&v)
    }
}
