// This file was generated by gir (https://github.com/gtk-rs/gir)
// from gir-files (https://github.com/gtk-rs/gir-files)
// from gst-gir-files (https://gitlab.freedesktop.org/gstreamer/gir-files-rs.git)
// DO NOT EDIT

use crate::{ffi, D3D12CmdAlloc};
use glib::{prelude::*, translate::*};

glib::wrapper! {
    #[doc(alias = "GstD3D12CmdAllocPool")]
    pub struct D3D12CmdAllocPool(Object<ffi::GstD3D12CmdAllocPool, ffi::GstD3D12CmdAllocPoolClass>) @extends gst::Object;

    match fn {
        type_ => || ffi::gst_d3d12_cmd_alloc_pool_get_type(),
    }
}

impl D3D12CmdAllocPool {
    pub const NONE: Option<&'static D3D12CmdAllocPool> = None;
}

unsafe impl Send for D3D12CmdAllocPool {}
unsafe impl Sync for D3D12CmdAllocPool {}

pub trait D3D12CmdAllocPoolExt: IsA<D3D12CmdAllocPool> + 'static {
    #[doc(alias = "gst_d3d12_cmd_alloc_pool_acquire")]
    fn acquire(&self) -> Option<D3D12CmdAlloc> {
        unsafe {
            let mut ca = std::ptr::null_mut();
            let ret = from_glib(ffi::gst_d3d12_cmd_alloc_pool_acquire(
                self.as_ref().to_glib_none().0,
                &mut ca,
            ));
            if ret {
                Some(from_glib_full(ca))
            } else {
                None
            }
        }
    }
}

impl<O: IsA<D3D12CmdAllocPool>> D3D12CmdAllocPoolExt for O {}
