// This file was generated by gir (https://github.com/gtk-rs/gir)
// from gir-files (https://github.com/gtk-rs/gir-files)
// from gst-gir-files (https://gitlab.freedesktop.org/gstreamer/gir-files-rs.git)
// DO NOT EDIT

use crate::{ffi, D3D12ConverterSamplerFilter};
use glib::{
    prelude::*,
    signal::{connect_raw, SignalHandlerId},
    translate::*,
};
use std::boxed::Box as Box_;

glib::wrapper! {
    #[doc(alias = "GstD3D12Converter")]
    pub struct D3D12Converter(Object<ffi::GstD3D12Converter, ffi::GstD3D12ConverterClass>) @extends gst::Object;

    match fn {
        type_ => || ffi::gst_d3d12_converter_get_type(),
    }
}

impl D3D12Converter {
    pub const NONE: Option<&'static D3D12Converter> = None;
}

unsafe impl Send for D3D12Converter {}
unsafe impl Sync for D3D12Converter {}

pub trait D3D12ConverterExt: IsA<D3D12Converter> + 'static {
    fn alpha(&self) -> f64 {
        ObjectExt::property(self.as_ref(), "alpha")
    }

    fn set_alpha(&self, alpha: f64) {
        ObjectExt::set_property(self.as_ref(), "alpha", alpha)
    }

    #[doc(alias = "border-color")]
    fn border_color(&self) -> u64 {
        ObjectExt::property(self.as_ref(), "border-color")
    }

    #[doc(alias = "border-color")]
    fn set_border_color(&self, border_color: u64) {
        ObjectExt::set_property(self.as_ref(), "border-color", border_color)
    }

    fn brightness(&self) -> f64 {
        ObjectExt::property(self.as_ref(), "brightness")
    }

    fn set_brightness(&self, brightness: f64) {
        ObjectExt::set_property(self.as_ref(), "brightness", brightness)
    }

    fn contrast(&self) -> f64 {
        ObjectExt::property(self.as_ref(), "contrast")
    }

    fn set_contrast(&self, contrast: f64) {
        ObjectExt::set_property(self.as_ref(), "contrast", contrast)
    }

    #[doc(alias = "dest-height")]
    fn dest_height(&self) -> i32 {
        ObjectExt::property(self.as_ref(), "dest-height")
    }

    #[doc(alias = "dest-height")]
    fn set_dest_height(&self, dest_height: i32) {
        ObjectExt::set_property(self.as_ref(), "dest-height", dest_height)
    }

    #[doc(alias = "dest-width")]
    fn dest_width(&self) -> i32 {
        ObjectExt::property(self.as_ref(), "dest-width")
    }

    #[doc(alias = "dest-width")]
    fn set_dest_width(&self, dest_width: i32) {
        ObjectExt::set_property(self.as_ref(), "dest-width", dest_width)
    }

    #[doc(alias = "dest-x")]
    fn dest_x(&self) -> i32 {
        ObjectExt::property(self.as_ref(), "dest-x")
    }

    #[doc(alias = "dest-x")]
    fn set_dest_x(&self, dest_x: i32) {
        ObjectExt::set_property(self.as_ref(), "dest-x", dest_x)
    }

    #[doc(alias = "dest-y")]
    fn dest_y(&self) -> i32 {
        ObjectExt::property(self.as_ref(), "dest-y")
    }

    #[doc(alias = "dest-y")]
    fn set_dest_y(&self, dest_y: i32) {
        ObjectExt::set_property(self.as_ref(), "dest-y", dest_y)
    }

    #[doc(alias = "fill-border")]
    fn fills_border(&self) -> bool {
        ObjectExt::property(self.as_ref(), "fill-border")
    }

    #[doc(alias = "fill-border")]
    fn set_fill_border(&self, fill_border: bool) {
        ObjectExt::set_property(self.as_ref(), "fill-border", fill_border)
    }

    fn hue(&self) -> f64 {
        ObjectExt::property(self.as_ref(), "hue")
    }

    fn set_hue(&self, hue: f64) {
        ObjectExt::set_property(self.as_ref(), "hue", hue)
    }

    #[doc(alias = "max-mip-levels")]
    fn max_mip_levels(&self) -> u32 {
        ObjectExt::property(self.as_ref(), "max-mip-levels")
    }

    #[doc(alias = "max-mip-levels")]
    fn set_max_mip_levels(&self, max_mip_levels: u32) {
        ObjectExt::set_property(self.as_ref(), "max-mip-levels", max_mip_levels)
    }

    #[doc(alias = "sampler-filter")]
    fn sampler_filter(&self) -> D3D12ConverterSamplerFilter {
        ObjectExt::property(self.as_ref(), "sampler-filter")
    }

    #[doc(alias = "sampler-filter")]
    fn set_sampler_filter(&self, sampler_filter: D3D12ConverterSamplerFilter) {
        ObjectExt::set_property(self.as_ref(), "sampler-filter", sampler_filter)
    }

    fn saturation(&self) -> f64 {
        ObjectExt::property(self.as_ref(), "saturation")
    }

    fn set_saturation(&self, saturation: f64) {
        ObjectExt::set_property(self.as_ref(), "saturation", saturation)
    }

    #[doc(alias = "src-height")]
    fn src_height(&self) -> i32 {
        ObjectExt::property(self.as_ref(), "src-height")
    }

    #[doc(alias = "src-height")]
    fn set_src_height(&self, src_height: i32) {
        ObjectExt::set_property(self.as_ref(), "src-height", src_height)
    }

    #[doc(alias = "src-width")]
    fn src_width(&self) -> i32 {
        ObjectExt::property(self.as_ref(), "src-width")
    }

    #[doc(alias = "src-width")]
    fn set_src_width(&self, src_width: i32) {
        ObjectExt::set_property(self.as_ref(), "src-width", src_width)
    }

    #[doc(alias = "src-x")]
    fn src_x(&self) -> i32 {
        ObjectExt::property(self.as_ref(), "src-x")
    }

    #[doc(alias = "src-x")]
    fn set_src_x(&self, src_x: i32) {
        ObjectExt::set_property(self.as_ref(), "src-x", src_x)
    }

    #[doc(alias = "src-y")]
    fn src_y(&self) -> i32 {
        ObjectExt::property(self.as_ref(), "src-y")
    }

    #[doc(alias = "src-y")]
    fn set_src_y(&self, src_y: i32) {
        ObjectExt::set_property(self.as_ref(), "src-y", src_y)
    }

    #[doc(alias = "video-direction")]
    fn video_direction(&self) -> gst_video::VideoOrientationMethod {
        ObjectExt::property(self.as_ref(), "video-direction")
    }

    #[doc(alias = "video-direction")]
    fn set_video_direction(&self, video_direction: gst_video::VideoOrientationMethod) {
        ObjectExt::set_property(self.as_ref(), "video-direction", video_direction)
    }

    #[doc(alias = "alpha")]
    fn connect_alpha_notify<F: Fn(&Self) + Send + Sync + 'static>(&self, f: F) -> SignalHandlerId {
        unsafe extern "C" fn notify_alpha_trampoline<
            P: IsA<D3D12Converter>,
            F: Fn(&P) + Send + Sync + 'static,
        >(
            this: *mut ffi::GstD3D12Converter,
            _param_spec: glib::ffi::gpointer,
            f: glib::ffi::gpointer,
        ) {
            let f: &F = &*(f as *const F);
            f(D3D12Converter::from_glib_borrow(this).unsafe_cast_ref())
        }
        unsafe {
            let f: Box_<F> = Box_::new(f);
            connect_raw(
                self.as_ptr() as *mut _,
                c"notify::alpha".as_ptr() as *const _,
                Some(std::mem::transmute::<*const (), unsafe extern "C" fn()>(
                    notify_alpha_trampoline::<Self, F> as *const (),
                )),
                Box_::into_raw(f),
            )
        }
    }

    #[doc(alias = "border-color")]
    fn connect_border_color_notify<F: Fn(&Self) + Send + Sync + 'static>(
        &self,
        f: F,
    ) -> SignalHandlerId {
        unsafe extern "C" fn notify_border_color_trampoline<
            P: IsA<D3D12Converter>,
            F: Fn(&P) + Send + Sync + 'static,
        >(
            this: *mut ffi::GstD3D12Converter,
            _param_spec: glib::ffi::gpointer,
            f: glib::ffi::gpointer,
        ) {
            let f: &F = &*(f as *const F);
            f(D3D12Converter::from_glib_borrow(this).unsafe_cast_ref())
        }
        unsafe {
            let f: Box_<F> = Box_::new(f);
            connect_raw(
                self.as_ptr() as *mut _,
                c"notify::border-color".as_ptr() as *const _,
                Some(std::mem::transmute::<*const (), unsafe extern "C" fn()>(
                    notify_border_color_trampoline::<Self, F> as *const (),
                )),
                Box_::into_raw(f),
            )
        }
    }

    #[doc(alias = "brightness")]
    fn connect_brightness_notify<F: Fn(&Self) + Send + Sync + 'static>(
        &self,
        f: F,
    ) -> SignalHandlerId {
        unsafe extern "C" fn notify_brightness_trampoline<
            P: IsA<D3D12Converter>,
            F: Fn(&P) + Send + Sync + 'static,
        >(
            this: *mut ffi::GstD3D12Converter,
            _param_spec: glib::ffi::gpointer,
            f: glib::ffi::gpointer,
        ) {
            let f: &F = &*(f as *const F);
            f(D3D12Converter::from_glib_borrow(this).unsafe_cast_ref())
        }
        unsafe {
            let f: Box_<F> = Box_::new(f);
            connect_raw(
                self.as_ptr() as *mut _,
                c"notify::brightness".as_ptr() as *const _,
                Some(std::mem::transmute::<*const (), unsafe extern "C" fn()>(
                    notify_brightness_trampoline::<Self, F> as *const (),
                )),
                Box_::into_raw(f),
            )
        }
    }

    #[doc(alias = "contrast")]
    fn connect_contrast_notify<F: Fn(&Self) + Send + Sync + 'static>(
        &self,
        f: F,
    ) -> SignalHandlerId {
        unsafe extern "C" fn notify_contrast_trampoline<
            P: IsA<D3D12Converter>,
            F: Fn(&P) + Send + Sync + 'static,
        >(
            this: *mut ffi::GstD3D12Converter,
            _param_spec: glib::ffi::gpointer,
            f: glib::ffi::gpointer,
        ) {
            let f: &F = &*(f as *const F);
            f(D3D12Converter::from_glib_borrow(this).unsafe_cast_ref())
        }
        unsafe {
            let f: Box_<F> = Box_::new(f);
            connect_raw(
                self.as_ptr() as *mut _,
                c"notify::contrast".as_ptr() as *const _,
                Some(std::mem::transmute::<*const (), unsafe extern "C" fn()>(
                    notify_contrast_trampoline::<Self, F> as *const (),
                )),
                Box_::into_raw(f),
            )
        }
    }

    #[doc(alias = "dest-height")]
    fn connect_dest_height_notify<F: Fn(&Self) + Send + Sync + 'static>(
        &self,
        f: F,
    ) -> SignalHandlerId {
        unsafe extern "C" fn notify_dest_height_trampoline<
            P: IsA<D3D12Converter>,
            F: Fn(&P) + Send + Sync + 'static,
        >(
            this: *mut ffi::GstD3D12Converter,
            _param_spec: glib::ffi::gpointer,
            f: glib::ffi::gpointer,
        ) {
            let f: &F = &*(f as *const F);
            f(D3D12Converter::from_glib_borrow(this).unsafe_cast_ref())
        }
        unsafe {
            let f: Box_<F> = Box_::new(f);
            connect_raw(
                self.as_ptr() as *mut _,
                c"notify::dest-height".as_ptr() as *const _,
                Some(std::mem::transmute::<*const (), unsafe extern "C" fn()>(
                    notify_dest_height_trampoline::<Self, F> as *const (),
                )),
                Box_::into_raw(f),
            )
        }
    }

    #[doc(alias = "dest-width")]
    fn connect_dest_width_notify<F: Fn(&Self) + Send + Sync + 'static>(
        &self,
        f: F,
    ) -> SignalHandlerId {
        unsafe extern "C" fn notify_dest_width_trampoline<
            P: IsA<D3D12Converter>,
            F: Fn(&P) + Send + Sync + 'static,
        >(
            this: *mut ffi::GstD3D12Converter,
            _param_spec: glib::ffi::gpointer,
            f: glib::ffi::gpointer,
        ) {
            let f: &F = &*(f as *const F);
            f(D3D12Converter::from_glib_borrow(this).unsafe_cast_ref())
        }
        unsafe {
            let f: Box_<F> = Box_::new(f);
            connect_raw(
                self.as_ptr() as *mut _,
                c"notify::dest-width".as_ptr() as *const _,
                Some(std::mem::transmute::<*const (), unsafe extern "C" fn()>(
                    notify_dest_width_trampoline::<Self, F> as *const (),
                )),
                Box_::into_raw(f),
            )
        }
    }

    #[doc(alias = "dest-x")]
    fn connect_dest_x_notify<F: Fn(&Self) + Send + Sync + 'static>(&self, f: F) -> SignalHandlerId {
        unsafe extern "C" fn notify_dest_x_trampoline<
            P: IsA<D3D12Converter>,
            F: Fn(&P) + Send + Sync + 'static,
        >(
            this: *mut ffi::GstD3D12Converter,
            _param_spec: glib::ffi::gpointer,
            f: glib::ffi::gpointer,
        ) {
            let f: &F = &*(f as *const F);
            f(D3D12Converter::from_glib_borrow(this).unsafe_cast_ref())
        }
        unsafe {
            let f: Box_<F> = Box_::new(f);
            connect_raw(
                self.as_ptr() as *mut _,
                c"notify::dest-x".as_ptr() as *const _,
                Some(std::mem::transmute::<*const (), unsafe extern "C" fn()>(
                    notify_dest_x_trampoline::<Self, F> as *const (),
                )),
                Box_::into_raw(f),
            )
        }
    }

    #[doc(alias = "dest-y")]
    fn connect_dest_y_notify<F: Fn(&Self) + Send + Sync + 'static>(&self, f: F) -> SignalHandlerId {
        unsafe extern "C" fn notify_dest_y_trampoline<
            P: IsA<D3D12Converter>,
            F: Fn(&P) + Send + Sync + 'static,
        >(
            this: *mut ffi::GstD3D12Converter,
            _param_spec: glib::ffi::gpointer,
            f: glib::ffi::gpointer,
        ) {
            let f: &F = &*(f as *const F);
            f(D3D12Converter::from_glib_borrow(this).unsafe_cast_ref())
        }
        unsafe {
            let f: Box_<F> = Box_::new(f);
            connect_raw(
                self.as_ptr() as *mut _,
                c"notify::dest-y".as_ptr() as *const _,
                Some(std::mem::transmute::<*const (), unsafe extern "C" fn()>(
                    notify_dest_y_trampoline::<Self, F> as *const (),
                )),
                Box_::into_raw(f),
            )
        }
    }

    #[doc(alias = "fill-border")]
    fn connect_fill_border_notify<F: Fn(&Self) + Send + Sync + 'static>(
        &self,
        f: F,
    ) -> SignalHandlerId {
        unsafe extern "C" fn notify_fill_border_trampoline<
            P: IsA<D3D12Converter>,
            F: Fn(&P) + Send + Sync + 'static,
        >(
            this: *mut ffi::GstD3D12Converter,
            _param_spec: glib::ffi::gpointer,
            f: glib::ffi::gpointer,
        ) {
            let f: &F = &*(f as *const F);
            f(D3D12Converter::from_glib_borrow(this).unsafe_cast_ref())
        }
        unsafe {
            let f: Box_<F> = Box_::new(f);
            connect_raw(
                self.as_ptr() as *mut _,
                c"notify::fill-border".as_ptr() as *const _,
                Some(std::mem::transmute::<*const (), unsafe extern "C" fn()>(
                    notify_fill_border_trampoline::<Self, F> as *const (),
                )),
                Box_::into_raw(f),
            )
        }
    }

    #[doc(alias = "hue")]
    fn connect_hue_notify<F: Fn(&Self) + Send + Sync + 'static>(&self, f: F) -> SignalHandlerId {
        unsafe extern "C" fn notify_hue_trampoline<
            P: IsA<D3D12Converter>,
            F: Fn(&P) + Send + Sync + 'static,
        >(
            this: *mut ffi::GstD3D12Converter,
            _param_spec: glib::ffi::gpointer,
            f: glib::ffi::gpointer,
        ) {
            let f: &F = &*(f as *const F);
            f(D3D12Converter::from_glib_borrow(this).unsafe_cast_ref())
        }
        unsafe {
            let f: Box_<F> = Box_::new(f);
            connect_raw(
                self.as_ptr() as *mut _,
                c"notify::hue".as_ptr() as *const _,
                Some(std::mem::transmute::<*const (), unsafe extern "C" fn()>(
                    notify_hue_trampoline::<Self, F> as *const (),
                )),
                Box_::into_raw(f),
            )
        }
    }

    #[doc(alias = "max-mip-levels")]
    fn connect_max_mip_levels_notify<F: Fn(&Self) + Send + Sync + 'static>(
        &self,
        f: F,
    ) -> SignalHandlerId {
        unsafe extern "C" fn notify_max_mip_levels_trampoline<
            P: IsA<D3D12Converter>,
            F: Fn(&P) + Send + Sync + 'static,
        >(
            this: *mut ffi::GstD3D12Converter,
            _param_spec: glib::ffi::gpointer,
            f: glib::ffi::gpointer,
        ) {
            let f: &F = &*(f as *const F);
            f(D3D12Converter::from_glib_borrow(this).unsafe_cast_ref())
        }
        unsafe {
            let f: Box_<F> = Box_::new(f);
            connect_raw(
                self.as_ptr() as *mut _,
                c"notify::max-mip-levels".as_ptr() as *const _,
                Some(std::mem::transmute::<*const (), unsafe extern "C" fn()>(
                    notify_max_mip_levels_trampoline::<Self, F> as *const (),
                )),
                Box_::into_raw(f),
            )
        }
    }

    #[doc(alias = "sampler-filter")]
    fn connect_sampler_filter_notify<F: Fn(&Self) + Send + Sync + 'static>(
        &self,
        f: F,
    ) -> SignalHandlerId {
        unsafe extern "C" fn notify_sampler_filter_trampoline<
            P: IsA<D3D12Converter>,
            F: Fn(&P) + Send + Sync + 'static,
        >(
            this: *mut ffi::GstD3D12Converter,
            _param_spec: glib::ffi::gpointer,
            f: glib::ffi::gpointer,
        ) {
            let f: &F = &*(f as *const F);
            f(D3D12Converter::from_glib_borrow(this).unsafe_cast_ref())
        }
        unsafe {
            let f: Box_<F> = Box_::new(f);
            connect_raw(
                self.as_ptr() as *mut _,
                c"notify::sampler-filter".as_ptr() as *const _,
                Some(std::mem::transmute::<*const (), unsafe extern "C" fn()>(
                    notify_sampler_filter_trampoline::<Self, F> as *const (),
                )),
                Box_::into_raw(f),
            )
        }
    }

    #[doc(alias = "saturation")]
    fn connect_saturation_notify<F: Fn(&Self) + Send + Sync + 'static>(
        &self,
        f: F,
    ) -> SignalHandlerId {
        unsafe extern "C" fn notify_saturation_trampoline<
            P: IsA<D3D12Converter>,
            F: Fn(&P) + Send + Sync + 'static,
        >(
            this: *mut ffi::GstD3D12Converter,
            _param_spec: glib::ffi::gpointer,
            f: glib::ffi::gpointer,
        ) {
            let f: &F = &*(f as *const F);
            f(D3D12Converter::from_glib_borrow(this).unsafe_cast_ref())
        }
        unsafe {
            let f: Box_<F> = Box_::new(f);
            connect_raw(
                self.as_ptr() as *mut _,
                c"notify::saturation".as_ptr() as *const _,
                Some(std::mem::transmute::<*const (), unsafe extern "C" fn()>(
                    notify_saturation_trampoline::<Self, F> as *const (),
                )),
                Box_::into_raw(f),
            )
        }
    }

    #[doc(alias = "src-height")]
    fn connect_src_height_notify<F: Fn(&Self) + Send + Sync + 'static>(
        &self,
        f: F,
    ) -> SignalHandlerId {
        unsafe extern "C" fn notify_src_height_trampoline<
            P: IsA<D3D12Converter>,
            F: Fn(&P) + Send + Sync + 'static,
        >(
            this: *mut ffi::GstD3D12Converter,
            _param_spec: glib::ffi::gpointer,
            f: glib::ffi::gpointer,
        ) {
            let f: &F = &*(f as *const F);
            f(D3D12Converter::from_glib_borrow(this).unsafe_cast_ref())
        }
        unsafe {
            let f: Box_<F> = Box_::new(f);
            connect_raw(
                self.as_ptr() as *mut _,
                c"notify::src-height".as_ptr() as *const _,
                Some(std::mem::transmute::<*const (), unsafe extern "C" fn()>(
                    notify_src_height_trampoline::<Self, F> as *const (),
                )),
                Box_::into_raw(f),
            )
        }
    }

    #[doc(alias = "src-width")]
    fn connect_src_width_notify<F: Fn(&Self) + Send + Sync + 'static>(
        &self,
        f: F,
    ) -> SignalHandlerId {
        unsafe extern "C" fn notify_src_width_trampoline<
            P: IsA<D3D12Converter>,
            F: Fn(&P) + Send + Sync + 'static,
        >(
            this: *mut ffi::GstD3D12Converter,
            _param_spec: glib::ffi::gpointer,
            f: glib::ffi::gpointer,
        ) {
            let f: &F = &*(f as *const F);
            f(D3D12Converter::from_glib_borrow(this).unsafe_cast_ref())
        }
        unsafe {
            let f: Box_<F> = Box_::new(f);
            connect_raw(
                self.as_ptr() as *mut _,
                c"notify::src-width".as_ptr() as *const _,
                Some(std::mem::transmute::<*const (), unsafe extern "C" fn()>(
                    notify_src_width_trampoline::<Self, F> as *const (),
                )),
                Box_::into_raw(f),
            )
        }
    }

    #[doc(alias = "src-x")]
    fn connect_src_x_notify<F: Fn(&Self) + Send + Sync + 'static>(&self, f: F) -> SignalHandlerId {
        unsafe extern "C" fn notify_src_x_trampoline<
            P: IsA<D3D12Converter>,
            F: Fn(&P) + Send + Sync + 'static,
        >(
            this: *mut ffi::GstD3D12Converter,
            _param_spec: glib::ffi::gpointer,
            f: glib::ffi::gpointer,
        ) {
            let f: &F = &*(f as *const F);
            f(D3D12Converter::from_glib_borrow(this).unsafe_cast_ref())
        }
        unsafe {
            let f: Box_<F> = Box_::new(f);
            connect_raw(
                self.as_ptr() as *mut _,
                c"notify::src-x".as_ptr() as *const _,
                Some(std::mem::transmute::<*const (), unsafe extern "C" fn()>(
                    notify_src_x_trampoline::<Self, F> as *const (),
                )),
                Box_::into_raw(f),
            )
        }
    }

    #[doc(alias = "src-y")]
    fn connect_src_y_notify<F: Fn(&Self) + Send + Sync + 'static>(&self, f: F) -> SignalHandlerId {
        unsafe extern "C" fn notify_src_y_trampoline<
            P: IsA<D3D12Converter>,
            F: Fn(&P) + Send + Sync + 'static,
        >(
            this: *mut ffi::GstD3D12Converter,
            _param_spec: glib::ffi::gpointer,
            f: glib::ffi::gpointer,
        ) {
            let f: &F = &*(f as *const F);
            f(D3D12Converter::from_glib_borrow(this).unsafe_cast_ref())
        }
        unsafe {
            let f: Box_<F> = Box_::new(f);
            connect_raw(
                self.as_ptr() as *mut _,
                c"notify::src-y".as_ptr() as *const _,
                Some(std::mem::transmute::<*const (), unsafe extern "C" fn()>(
                    notify_src_y_trampoline::<Self, F> as *const (),
                )),
                Box_::into_raw(f),
            )
        }
    }

    #[doc(alias = "video-direction")]
    fn connect_video_direction_notify<F: Fn(&Self) + Send + Sync + 'static>(
        &self,
        f: F,
    ) -> SignalHandlerId {
        unsafe extern "C" fn notify_video_direction_trampoline<
            P: IsA<D3D12Converter>,
            F: Fn(&P) + Send + Sync + 'static,
        >(
            this: *mut ffi::GstD3D12Converter,
            _param_spec: glib::ffi::gpointer,
            f: glib::ffi::gpointer,
        ) {
            let f: &F = &*(f as *const F);
            f(D3D12Converter::from_glib_borrow(this).unsafe_cast_ref())
        }
        unsafe {
            let f: Box_<F> = Box_::new(f);
            connect_raw(
                self.as_ptr() as *mut _,
                c"notify::video-direction".as_ptr() as *const _,
                Some(std::mem::transmute::<*const (), unsafe extern "C" fn()>(
                    notify_video_direction_trampoline::<Self, F> as *const (),
                )),
                Box_::into_raw(f),
            )
        }
    }
}

impl<O: IsA<D3D12Converter>> D3D12ConverterExt for O {}
