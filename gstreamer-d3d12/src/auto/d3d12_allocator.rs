// This file was generated by gir (https://github.com/gtk-rs/gir)
// from gir-files (https://github.com/gtk-rs/gir-files)
// from gst-gir-files (https://gitlab.freedesktop.org/gstreamer/gir-files-rs.git)
// DO NOT EDIT

use crate::ffi;
use glib::{prelude::*, translate::*};

glib::wrapper! {
    #[doc(alias = "GstD3D12Allocator")]
    pub struct D3D12Allocator(Object<ffi::GstD3D12Allocator, ffi::GstD3D12AllocatorClass>) @extends gst::Allocator, gst::Object;

    match fn {
        type_ => || ffi::gst_d3d12_allocator_get_type(),
    }
}

impl D3D12Allocator {
    pub const NONE: Option<&'static D3D12Allocator> = None;
}

unsafe impl Send for D3D12Allocator {}
unsafe impl Sync for D3D12Allocator {}

pub trait D3D12AllocatorExt: IsA<D3D12Allocator> + 'static {
    #[doc(alias = "gst_d3d12_allocator_set_active")]
    fn set_active(&self, active: bool) -> bool {
        unsafe {
            from_glib(ffi::gst_d3d12_allocator_set_active(
                self.as_ref().to_glib_none().0,
                active.into_glib(),
            ))
        }
    }
}

impl<O: IsA<D3D12Allocator>> D3D12AllocatorExt for O {}
