// This file was generated by gir (https://github.com/gtk-rs/gir)
// from gir-files (https://github.com/gtk-rs/gir-files)
// from gst-gir-files (https://gitlab.freedesktop.org/gstreamer/gir-files-rs.git)
// DO NOT EDIT

use crate::ffi;
use glib::{prelude::*, translate::*};

glib::wrapper! {
    #[doc(alias = "GstD3D12CmdQueue")]
    pub struct D3D12CmdQueue(Object<ffi::GstD3D12CmdQueue, ffi::GstD3D12CmdQueueClass>) @extends gst::Object;

    match fn {
        type_ => || ffi::gst_d3d12_cmd_queue_get_type(),
    }
}

impl D3D12CmdQueue {
    pub const NONE: Option<&'static D3D12CmdQueue> = None;
}

unsafe impl Send for D3D12CmdQueue {}
unsafe impl Sync for D3D12CmdQueue {}

pub trait D3D12CmdQueueExt: IsA<D3D12CmdQueue> + 'static {
    #[doc(alias = "gst_d3d12_cmd_queue_drain")]
    fn drain(&self) -> i32 {
        unsafe { ffi::gst_d3d12_cmd_queue_drain(self.as_ref().to_glib_none().0) }
    }

    #[doc(alias = "gst_d3d12_cmd_queue_fence_wait")]
    fn fence_wait(&self, fence_value: u64) -> i32 {
        unsafe { ffi::gst_d3d12_cmd_queue_fence_wait(self.as_ref().to_glib_none().0, fence_value) }
    }

    #[doc(alias = "gst_d3d12_cmd_queue_get_completed_value")]
    #[doc(alias = "get_completed_value")]
    fn completed_value(&self) -> u64 {
        unsafe { ffi::gst_d3d12_cmd_queue_get_completed_value(self.as_ref().to_glib_none().0) }
    }
}

impl<O: IsA<D3D12CmdQueue>> D3D12CmdQueueExt for O {}
