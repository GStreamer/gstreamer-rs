// This file was generated by gir (https://github.com/gtk-rs/gir)
// from gir-files (https://github.com/gtk-rs/gir-files)
// from gst-gir-files (https://gitlab.freedesktop.org/gstreamer/gir-files-rs.git)
// DO NOT EDIT

use crate::{ffi, D3D12Device};
use glib::{prelude::*, translate::*};

glib::wrapper! {
    #[doc(alias = "GstD3D12BufferPool")]
    pub struct D3D12BufferPool(Object<ffi::GstD3D12BufferPool, ffi::GstD3D12BufferPoolClass>) @extends gst::BufferPool, gst::Object;

    match fn {
        type_ => || ffi::gst_d3d12_buffer_pool_get_type(),
    }
}

impl D3D12BufferPool {
    pub const NONE: Option<&'static D3D12BufferPool> = None;

    #[doc(alias = "gst_d3d12_buffer_pool_new")]
    pub fn new(device: &impl IsA<D3D12Device>) -> D3D12BufferPool {
        skip_assert_initialized!();
        unsafe {
            gst::BufferPool::from_glib_full(ffi::gst_d3d12_buffer_pool_new(
                device.as_ref().to_glib_none().0,
            ))
            .unsafe_cast()
        }
    }
}

unsafe impl Send for D3D12BufferPool {}
unsafe impl Sync for D3D12BufferPool {}
