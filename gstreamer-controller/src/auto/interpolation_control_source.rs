// This file was generated by gir (https://github.com/gtk-rs/gir)
// from gir-files (https://github.com/gtk-rs/gir-files)
// from gst-gir-files (https://gitlab.freedesktop.org/gstreamer/gir-files-rs.git)
// DO NOT EDIT

use crate::{InterpolationMode, TimedValueControlSource};
use glib::{
    prelude::*,
    signal::{connect_raw, SignalHandlerId},
    translate::*,
};
use std::boxed::Box as Box_;

glib::wrapper! {
    #[doc(alias = "GstInterpolationControlSource")]
    pub struct InterpolationControlSource(Object<ffi::GstInterpolationControlSource, ffi::GstInterpolationControlSourceClass>) @extends TimedValueControlSource, gst::ControlSource, gst::Object;

    match fn {
        type_ => || ffi::gst_interpolation_control_source_get_type(),
    }
}

impl InterpolationControlSource {
    pub const NONE: Option<&'static InterpolationControlSource> = None;

    #[doc(alias = "gst_interpolation_control_source_new")]
    pub fn new() -> InterpolationControlSource {
        assert_initialized_main_thread!();
        unsafe {
            gst::ControlSource::from_glib_full(ffi::gst_interpolation_control_source_new())
                .unsafe_cast()
        }
    }
}

impl Default for InterpolationControlSource {
    fn default() -> Self {
        Self::new()
    }
}

unsafe impl Send for InterpolationControlSource {}
unsafe impl Sync for InterpolationControlSource {}

mod sealed {
    pub trait Sealed {}
    impl<T: super::IsA<super::InterpolationControlSource>> Sealed for T {}
}

pub trait InterpolationControlSourceExt:
    IsA<InterpolationControlSource> + sealed::Sealed + 'static
{
    fn mode(&self) -> InterpolationMode {
        ObjectExt::property(self.as_ref(), "mode")
    }

    fn set_mode(&self, mode: InterpolationMode) {
        ObjectExt::set_property(self.as_ref(), "mode", mode)
    }

    #[doc(alias = "mode")]
    fn connect_mode_notify<F: Fn(&Self) + Send + Sync + 'static>(&self, f: F) -> SignalHandlerId {
        unsafe extern "C" fn notify_mode_trampoline<
            P: IsA<InterpolationControlSource>,
            F: Fn(&P) + Send + Sync + 'static,
        >(
            this: *mut ffi::GstInterpolationControlSource,
            _param_spec: glib::ffi::gpointer,
            f: glib::ffi::gpointer,
        ) {
            let f: &F = &*(f as *const F);
            f(InterpolationControlSource::from_glib_borrow(this).unsafe_cast_ref())
        }
        unsafe {
            let f: Box_<F> = Box_::new(f);
            connect_raw(
                self.as_ptr() as *mut _,
                b"notify::mode\0".as_ptr() as *const _,
                Some(std::mem::transmute::<*const (), unsafe extern "C" fn()>(
                    notify_mode_trampoline::<Self, F> as *const (),
                )),
                Box_::into_raw(f),
            )
        }
    }
}

impl<O: IsA<InterpolationControlSource>> InterpolationControlSourceExt for O {}
