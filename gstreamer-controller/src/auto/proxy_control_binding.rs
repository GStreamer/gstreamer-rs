// This file was generated by gir (https://github.com/gtk-rs/gir)
// from gir-files (https://github.com/gtk-rs/gir-files)
// from gst-gir-files (https://gitlab.freedesktop.org/gstreamer/gir-files-rs.git)
// DO NOT EDIT

use crate::ffi;
use glib::{prelude::*, translate::*};

glib::wrapper! {
    #[doc(alias = "GstProxyControlBinding")]
    pub struct ProxyControlBinding(Object<ffi::GstProxyControlBinding, ffi::GstProxyControlBindingClass>) @extends gst::ControlBinding, gst::Object;

    match fn {
        type_ => || ffi::gst_proxy_control_binding_get_type(),
    }
}

impl ProxyControlBinding {
    pub const NONE: Option<&'static ProxyControlBinding> = None;

    #[doc(alias = "gst_proxy_control_binding_new")]
    pub fn new(
        object: &impl IsA<gst::Object>,
        property_name: &str,
        ref_object: &impl IsA<gst::Object>,
        ref_property_name: &str,
    ) -> ProxyControlBinding {
        assert_initialized_main_thread!();
        unsafe {
            gst::ControlBinding::from_glib_none(ffi::gst_proxy_control_binding_new(
                object.as_ref().to_glib_none().0,
                property_name.to_glib_none().0,
                ref_object.as_ref().to_glib_none().0,
                ref_property_name.to_glib_none().0,
            ))
            .unsafe_cast()
        }
    }
}

unsafe impl Send for ProxyControlBinding {}
unsafe impl Sync for ProxyControlBinding {}
