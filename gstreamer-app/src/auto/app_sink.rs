// This file was generated by gir (f00d658) from gir-files (???)
// DO NOT EDIT

use ffi;
use glib;
use glib::Value;
use glib::object::Downcast;
use glib::object::IsA;
use glib::signal::connect;
use glib::translate::*;
use glib_ffi;
use gobject_ffi;
use gst;
use gst_ffi;
use std::boxed::Box as Box_;
use std::mem;
use std::mem::transmute;
use std::ptr;

glib_wrapper! {
    pub struct AppSink(Object<ffi::GstAppSink>);

    match fn {
        get_type => || ffi::gst_app_sink_get_type(),
    }
}

unsafe impl Send for AppSink {}
unsafe impl Sync for AppSink {}

pub trait AppSinkExt {
    #[cfg(feature = "v1_12")]
    fn get_buffer_list_support(&self) -> bool;

    fn get_caps(&self) -> Option<gst::Caps>;

    fn get_drop(&self) -> bool;

    fn get_emit_signals(&self) -> bool;

    fn get_max_buffers(&self) -> u32;

    fn get_wait_on_eos(&self) -> bool;

    fn is_eos(&self) -> bool;

    fn pull_preroll(&self) -> Option<gst::Sample>;

    fn pull_sample(&self) -> Option<gst::Sample>;

    #[cfg(feature = "v1_12")]
    fn set_buffer_list_support(&self, enable_lists: bool);

    //fn set_callbacks<P: Into<Option</*Unimplemented*/Fundamental: Pointer>>>(&self, callbacks: /*Ignored*/&mut AppSinkCallbacks, user_data: P, notify: /*Unknown conversion*//*Unimplemented*/DestroyNotify);

    fn set_caps(&self, caps: &gst::Caps);

    fn set_drop(&self, drop: bool);

    fn set_emit_signals(&self, emit: bool);

    fn set_max_buffers(&self, max: u32);

    fn set_wait_on_eos(&self, wait: bool);

    #[cfg(feature = "v1_10")]
    fn try_pull_preroll(&self, timeout: gst::ClockTime) -> Option<gst::Sample>;

    #[cfg(feature = "v1_10")]
    fn try_pull_sample(&self, timeout: gst::ClockTime) -> Option<gst::Sample>;

    fn get_property_buffer_list(&self) -> bool;

    fn set_property_buffer_list(&self, buffer_list: bool);

    fn get_property_eos(&self) -> bool;

    fn connect_eos<F: Fn(&Self) + Send + Sync + 'static>(&self, f: F) -> u64;

    fn connect_new_preroll<F: Fn(&Self) -> gst::FlowReturn + Send + Sync + 'static>(&self, f: F) -> u64;

    fn connect_new_sample<F: Fn(&Self) -> gst::FlowReturn + Send + Sync + 'static>(&self, f: F) -> u64;

    fn connect_pull_preroll<F: Fn(&Self) -> gst::Sample + Send + Sync + 'static>(&self, f: F) -> u64;

    fn connect_pull_sample<F: Fn(&Self) -> gst::Sample + Send + Sync + 'static>(&self, f: F) -> u64;

    #[cfg(feature = "v1_10")]
    fn connect_try_pull_preroll<F: Fn(&Self, u64) -> gst::Sample + Send + Sync + 'static>(&self, f: F) -> u64;

    #[cfg(feature = "v1_10")]
    fn connect_try_pull_sample<F: Fn(&Self, u64) -> gst::Sample + Send + Sync + 'static>(&self, f: F) -> u64;
}

impl<O: IsA<AppSink> + IsA<glib::object::Object>> AppSinkExt for O {
    #[cfg(feature = "v1_12")]
    fn get_buffer_list_support(&self) -> bool {
        unsafe {
            from_glib(ffi::gst_app_sink_get_buffer_list_support(self.to_glib_none().0))
        }
    }

    fn get_caps(&self) -> Option<gst::Caps> {
        unsafe {
            from_glib_full(ffi::gst_app_sink_get_caps(self.to_glib_none().0))
        }
    }

    fn get_drop(&self) -> bool {
        unsafe {
            from_glib(ffi::gst_app_sink_get_drop(self.to_glib_none().0))
        }
    }

    fn get_emit_signals(&self) -> bool {
        unsafe {
            from_glib(ffi::gst_app_sink_get_emit_signals(self.to_glib_none().0))
        }
    }

    fn get_max_buffers(&self) -> u32 {
        unsafe {
            ffi::gst_app_sink_get_max_buffers(self.to_glib_none().0)
        }
    }

    fn get_wait_on_eos(&self) -> bool {
        unsafe {
            from_glib(ffi::gst_app_sink_get_wait_on_eos(self.to_glib_none().0))
        }
    }

    fn is_eos(&self) -> bool {
        unsafe {
            from_glib(ffi::gst_app_sink_is_eos(self.to_glib_none().0))
        }
    }

    fn pull_preroll(&self) -> Option<gst::Sample> {
        unsafe {
            from_glib_full(ffi::gst_app_sink_pull_preroll(self.to_glib_none().0))
        }
    }

    fn pull_sample(&self) -> Option<gst::Sample> {
        unsafe {
            from_glib_full(ffi::gst_app_sink_pull_sample(self.to_glib_none().0))
        }
    }

    #[cfg(feature = "v1_12")]
    fn set_buffer_list_support(&self, enable_lists: bool) {
        unsafe {
            ffi::gst_app_sink_set_buffer_list_support(self.to_glib_none().0, enable_lists.to_glib());
        }
    }

    //fn set_callbacks<P: Into<Option</*Unimplemented*/Fundamental: Pointer>>>(&self, callbacks: /*Ignored*/&mut AppSinkCallbacks, user_data: P, notify: /*Unknown conversion*//*Unimplemented*/DestroyNotify) {
    //    unsafe { TODO: call ffi::gst_app_sink_set_callbacks() }
    //}

    fn set_caps(&self, caps: &gst::Caps) {
        unsafe {
            ffi::gst_app_sink_set_caps(self.to_glib_none().0, caps.to_glib_none().0);
        }
    }

    fn set_drop(&self, drop: bool) {
        unsafe {
            ffi::gst_app_sink_set_drop(self.to_glib_none().0, drop.to_glib());
        }
    }

    fn set_emit_signals(&self, emit: bool) {
        unsafe {
            ffi::gst_app_sink_set_emit_signals(self.to_glib_none().0, emit.to_glib());
        }
    }

    fn set_max_buffers(&self, max: u32) {
        unsafe {
            ffi::gst_app_sink_set_max_buffers(self.to_glib_none().0, max);
        }
    }

    fn set_wait_on_eos(&self, wait: bool) {
        unsafe {
            ffi::gst_app_sink_set_wait_on_eos(self.to_glib_none().0, wait.to_glib());
        }
    }

    #[cfg(feature = "v1_10")]
    fn try_pull_preroll(&self, timeout: gst::ClockTime) -> Option<gst::Sample> {
        unsafe {
            from_glib_full(ffi::gst_app_sink_try_pull_preroll(self.to_glib_none().0, timeout))
        }
    }

    #[cfg(feature = "v1_10")]
    fn try_pull_sample(&self, timeout: gst::ClockTime) -> Option<gst::Sample> {
        unsafe {
            from_glib_full(ffi::gst_app_sink_try_pull_sample(self.to_glib_none().0, timeout))
        }
    }

    fn get_property_buffer_list(&self) -> bool {
        let mut value = Value::from(&false);
        unsafe {
            gobject_ffi::g_object_get_property(self.to_glib_none().0, "buffer-list".to_glib_none().0, value.to_glib_none_mut().0);
        }
        value.get().unwrap()
    }

    fn set_property_buffer_list(&self, buffer_list: bool) {
        unsafe {
            gobject_ffi::g_object_set_property(self.to_glib_none().0, "buffer-list".to_glib_none().0, Value::from(&buffer_list).to_glib_none().0);
        }
    }

    fn get_property_eos(&self) -> bool {
        let mut value = Value::from(&false);
        unsafe {
            gobject_ffi::g_object_get_property(self.to_glib_none().0, "eos".to_glib_none().0, value.to_glib_none_mut().0);
        }
        value.get().unwrap()
    }

    fn connect_eos<F: Fn(&Self) + Send + Sync + 'static>(&self, f: F) -> u64 {
        unsafe {
            let f: Box_<Box_<Fn(&Self) + Send + Sync + 'static>> = Box_::new(Box_::new(f));
            connect(self.to_glib_none().0, "eos",
                transmute(eos_trampoline::<Self> as usize), Box_::into_raw(f) as *mut _)
        }
    }

    fn connect_new_preroll<F: Fn(&Self) -> gst::FlowReturn + Send + Sync + 'static>(&self, f: F) -> u64 {
        unsafe {
            let f: Box_<Box_<Fn(&Self) -> gst::FlowReturn + Send + Sync + 'static>> = Box_::new(Box_::new(f));
            connect(self.to_glib_none().0, "new-preroll",
                transmute(new_preroll_trampoline::<Self> as usize), Box_::into_raw(f) as *mut _)
        }
    }

    fn connect_new_sample<F: Fn(&Self) -> gst::FlowReturn + Send + Sync + 'static>(&self, f: F) -> u64 {
        unsafe {
            let f: Box_<Box_<Fn(&Self) -> gst::FlowReturn + Send + Sync + 'static>> = Box_::new(Box_::new(f));
            connect(self.to_glib_none().0, "new-sample",
                transmute(new_sample_trampoline::<Self> as usize), Box_::into_raw(f) as *mut _)
        }
    }

    fn connect_pull_preroll<F: Fn(&Self) -> gst::Sample + Send + Sync + 'static>(&self, f: F) -> u64 {
        unsafe {
            let f: Box_<Box_<Fn(&Self) -> gst::Sample + Send + Sync + 'static>> = Box_::new(Box_::new(f));
            connect(self.to_glib_none().0, "pull-preroll",
                transmute(pull_preroll_trampoline::<Self> as usize), Box_::into_raw(f) as *mut _)
        }
    }

    fn connect_pull_sample<F: Fn(&Self) -> gst::Sample + Send + Sync + 'static>(&self, f: F) -> u64 {
        unsafe {
            let f: Box_<Box_<Fn(&Self) -> gst::Sample + Send + Sync + 'static>> = Box_::new(Box_::new(f));
            connect(self.to_glib_none().0, "pull-sample",
                transmute(pull_sample_trampoline::<Self> as usize), Box_::into_raw(f) as *mut _)
        }
    }

    #[cfg(feature = "v1_10")]
    fn connect_try_pull_preroll<F: Fn(&Self, u64) -> gst::Sample + Send + Sync + 'static>(&self, f: F) -> u64 {
        unsafe {
            let f: Box_<Box_<Fn(&Self, u64) -> gst::Sample + Send + Sync + 'static>> = Box_::new(Box_::new(f));
            connect(self.to_glib_none().0, "try-pull-preroll",
                transmute(try_pull_preroll_trampoline::<Self> as usize), Box_::into_raw(f) as *mut _)
        }
    }

    #[cfg(feature = "v1_10")]
    fn connect_try_pull_sample<F: Fn(&Self, u64) -> gst::Sample + Send + Sync + 'static>(&self, f: F) -> u64 {
        unsafe {
            let f: Box_<Box_<Fn(&Self, u64) -> gst::Sample + Send + Sync + 'static>> = Box_::new(Box_::new(f));
            connect(self.to_glib_none().0, "try-pull-sample",
                transmute(try_pull_sample_trampoline::<Self> as usize), Box_::into_raw(f) as *mut _)
        }
    }
}

unsafe extern "C" fn eos_trampoline<P>(this: *mut ffi::GstAppSink, f: glib_ffi::gpointer)
where P: IsA<AppSink> {
    callback_guard!();
    let f: &Box_<Fn(&P) + Send + Sync + 'static> = transmute(f);
    f(&AppSink::from_glib_none(this).downcast_unchecked())
}

unsafe extern "C" fn new_preroll_trampoline<P>(this: *mut ffi::GstAppSink, f: glib_ffi::gpointer) -> gst_ffi::GstFlowReturn
where P: IsA<AppSink> {
    callback_guard!();
    let f: &Box_<Fn(&P) -> gst::FlowReturn + Send + Sync + 'static> = transmute(f);
    f(&AppSink::from_glib_none(this).downcast_unchecked()).to_glib()
}

unsafe extern "C" fn new_sample_trampoline<P>(this: *mut ffi::GstAppSink, f: glib_ffi::gpointer) -> gst_ffi::GstFlowReturn
where P: IsA<AppSink> {
    callback_guard!();
    let f: &Box_<Fn(&P) -> gst::FlowReturn + Send + Sync + 'static> = transmute(f);
    f(&AppSink::from_glib_none(this).downcast_unchecked()).to_glib()
}

unsafe extern "C" fn pull_preroll_trampoline<P>(this: *mut ffi::GstAppSink, f: glib_ffi::gpointer) -> *mut gst_ffi::GstSample
where P: IsA<AppSink> {
    callback_guard!();
    let f: &Box_<Fn(&P) -> gst::Sample + Send + Sync + 'static> = transmute(f);
    f(&AppSink::from_glib_none(this).downcast_unchecked()).to_glib_full()
}

unsafe extern "C" fn pull_sample_trampoline<P>(this: *mut ffi::GstAppSink, f: glib_ffi::gpointer) -> *mut gst_ffi::GstSample
where P: IsA<AppSink> {
    callback_guard!();
    let f: &Box_<Fn(&P) -> gst::Sample + Send + Sync + 'static> = transmute(f);
    f(&AppSink::from_glib_none(this).downcast_unchecked()).to_glib_full()
}

#[cfg(feature = "v1_10")]
unsafe extern "C" fn try_pull_preroll_trampoline<P>(this: *mut ffi::GstAppSink, timeout: u64, f: glib_ffi::gpointer) -> *mut gst_ffi::GstSample
where P: IsA<AppSink> {
    callback_guard!();
    let f: &Box_<Fn(&P, u64) -> gst::Sample + Send + Sync + 'static> = transmute(f);
    f(&AppSink::from_glib_none(this).downcast_unchecked(), timeout).to_glib_full()
}

#[cfg(feature = "v1_10")]
unsafe extern "C" fn try_pull_sample_trampoline<P>(this: *mut ffi::GstAppSink, timeout: u64, f: glib_ffi::gpointer) -> *mut gst_ffi::GstSample
where P: IsA<AppSink> {
    callback_guard!();
    let f: &Box_<Fn(&P, u64) -> gst::Sample + Send + Sync + 'static> = transmute(f);
    f(&AppSink::from_glib_none(this).downcast_unchecked(), timeout).to_glib_full()
}
