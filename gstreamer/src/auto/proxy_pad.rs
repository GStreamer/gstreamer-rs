// This file was generated by gir (https://github.com/gtk-rs/gir)
// from gir-files (https://github.com/gtk-rs/gir-files)
// DO NOT EDIT

use glib::object::IsA;
use glib::translate::*;
use gst_sys;
use Object;
use Pad;

glib_wrapper! {
    pub struct ProxyPad(Object<gst_sys::GstProxyPad, gst_sys::GstProxyPadClass, ProxyPadClass>) @extends Pad, Object;

    match fn {
        get_type => || gst_sys::gst_proxy_pad_get_type(),
    }
}

impl ProxyPad {
    //pub fn iterate_internal_links_default<P: IsA<Pad>, Q: IsA<Object>>(pad: &P, parent: Option<&Q>) -> /*Ignored*/Option<Iterator> {
    //    unsafe { TODO: call gst_sys:gst_proxy_pad_iterate_internal_links_default() }
    //}
}

unsafe impl Send for ProxyPad {}
unsafe impl Sync for ProxyPad {}

pub const NONE_PROXY_PAD: Option<&ProxyPad> = None;

pub trait ProxyPadExt: 'static {
    fn get_internal(&self) -> Option<ProxyPad>;
}

impl<O: IsA<ProxyPad>> ProxyPadExt for O {
    fn get_internal(&self) -> Option<ProxyPad> {
        unsafe {
            from_glib_full(gst_sys::gst_proxy_pad_get_internal(
                self.as_ref().to_glib_none().0,
            ))
        }
    }
}
