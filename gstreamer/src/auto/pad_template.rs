// This file was generated by gir (33e9567) from gir-files (???)
// DO NOT EDIT

use Object;
use Pad;
use PadDirection;
use ffi;
use glib;
use glib::Value;
use glib::object::Downcast;
use glib::object::IsA;
use glib::signal::connect;
use glib::translate::*;
use glib_ffi;
use gobject_ffi;
use std::boxed::Box as Box_;
use std::mem::transmute;

glib_wrapper! {
    pub struct PadTemplate(Object<ffi::GstPadTemplate>): Object;

    match fn {
        get_type => || ffi::gst_pad_template_get_type(),
    }
}

impl PadTemplate {
    //pub fn new(name_template: &str, direction: PadDirection, presence: /*Ignored*/PadPresence, caps: /*Ignored*/&mut Caps) -> PadTemplate {
    //    unsafe { TODO: call ffi::gst_pad_template_new() }
    //}
}

unsafe impl Send for PadTemplate {}
unsafe impl Sync for PadTemplate {}

pub trait PadTemplateExt {
    //fn get_caps(&self) -> /*Ignored*/Option<Caps>;

    fn pad_created<P: IsA<Pad>>(&self, pad: &P);

    fn get_property_direction(&self) -> PadDirection;

    fn get_property_name_template(&self) -> Option<String>;

    //fn get_property_presence(&self) -> /*Ignored*/PadPresence;

    fn connect_pad_created<F: Fn(&Self, &Pad) + Send + Sync + 'static>(&self, f: F) -> u64;
}

impl<O: IsA<PadTemplate> + IsA<glib::object::Object>> PadTemplateExt for O {
    //fn get_caps(&self) -> /*Ignored*/Option<Caps> {
    //    unsafe { TODO: call ffi::gst_pad_template_get_caps() }
    //}

    fn pad_created<P: IsA<Pad>>(&self, pad: &P) {
        unsafe {
            ffi::gst_pad_template_pad_created(self.to_glib_none().0, pad.to_glib_none().0);
        }
    }

    fn get_property_direction(&self) -> PadDirection {
        let mut value = Value::from(&0);
        unsafe {
            gobject_ffi::g_object_get_property(self.to_glib_none().0, "direction".to_glib_none().0, value.to_glib_none_mut().0);
            from_glib(transmute(value.get::<i32>().unwrap()))
        }
    }

    fn get_property_name_template(&self) -> Option<String> {
        let mut value = Value::from(None::<&str>);
        unsafe {
            gobject_ffi::g_object_get_property(self.to_glib_none().0, "name-template".to_glib_none().0, value.to_glib_none_mut().0);
        }
        value.get()
    }

    //fn get_property_presence(&self) -> /*Ignored*/PadPresence {
    //    let mut value = Value::from(&0);
    //    unsafe {
    //        gobject_ffi::g_object_get_property(self.to_glib_none().0, "presence".to_glib_none().0, value.to_glib_none_mut().0);
    //        from_glib(transmute(value.get::<i32>().unwrap()))
    //    }
    //}

    fn connect_pad_created<F: Fn(&Self, &Pad) + Send + Sync + 'static>(&self, f: F) -> u64 {
        unsafe {
            let f: Box_<Box_<Fn(&Self, &Pad) + Send + Sync + 'static>> = Box_::new(Box_::new(f));
            connect(self.to_glib_none().0, "pad-created",
                transmute(pad_created_trampoline::<Self> as usize), Box_::into_raw(f) as *mut _)
        }
    }
}

unsafe extern "C" fn pad_created_trampoline<P>(this: *mut ffi::GstPadTemplate, pad: *mut ffi::GstPad, f: glib_ffi::gpointer)
where P: IsA<PadTemplate> {
    callback_guard!();
    let f: &Box_<Fn(&P, &Pad) + Send + Sync + 'static> = transmute(f);
    f(&PadTemplate::from_glib_none(this).downcast_unchecked(), &from_glib_none(pad))
}
