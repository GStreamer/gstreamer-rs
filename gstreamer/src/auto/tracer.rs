// This file was generated by gir (https://github.com/gtk-rs/gir)
// from gir-files (https://github.com/gtk-rs/gir-files)
// from gst-gir-files (https://gitlab.freedesktop.org/gstreamer/gir-files-rs.git)
// DO NOT EDIT

use crate::{ffi, Object};
use glib::{
    prelude::*,
    signal::{connect_raw, SignalHandlerId},
    translate::*,
};
use std::boxed::Box as Box_;

glib::wrapper! {
    #[doc(alias = "GstTracer")]
    pub struct Tracer(Object<ffi::GstTracer, ffi::GstTracerClass>) @extends Object;

    match fn {
        type_ => || ffi::gst_tracer_get_type(),
    }
}

impl Tracer {
    pub const NONE: Option<&'static Tracer> = None;
}

unsafe impl Send for Tracer {}
unsafe impl Sync for Tracer {}

mod sealed {
    pub trait Sealed {}
    impl<T: super::IsA<super::Tracer>> Sealed for T {}
}

pub trait TracerExt: IsA<Tracer> + sealed::Sealed + 'static {
    fn params(&self) -> Option<glib::GString> {
        ObjectExt::property(self.as_ref(), "params")
    }

    fn set_params(&self, params: Option<&str>) {
        ObjectExt::set_property(self.as_ref(), "params", params)
    }

    #[doc(alias = "params")]
    fn connect_params_notify<F: Fn(&Self) + Send + Sync + 'static>(&self, f: F) -> SignalHandlerId {
        unsafe extern "C" fn notify_params_trampoline<
            P: IsA<Tracer>,
            F: Fn(&P) + Send + Sync + 'static,
        >(
            this: *mut ffi::GstTracer,
            _param_spec: glib::ffi::gpointer,
            f: glib::ffi::gpointer,
        ) {
            let f: &F = &*(f as *const F);
            f(Tracer::from_glib_borrow(this).unsafe_cast_ref())
        }
        unsafe {
            let f: Box_<F> = Box_::new(f);
            connect_raw(
                self.as_ptr() as *mut _,
                b"notify::params\0".as_ptr() as *const _,
                Some(std::mem::transmute::<*const (), unsafe extern "C" fn()>(
                    notify_params_trampoline::<Self, F> as *const (),
                )),
                Box_::into_raw(f),
            )
        }
    }
}

impl<O: IsA<Tracer>> TracerExt for O {}
