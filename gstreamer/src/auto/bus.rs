// This file was generated by gir (b155303) from gir-files (???)
// DO NOT EDIT

use Object;
use ffi;
use glib::object::IsA;
use glib::translate::*;

glib_wrapper! {
    pub struct Bus(Object<ffi::GstBus>): Object;

    match fn {
        get_type => || ffi::gst_bus_get_type(),
    }
}

impl Bus {
    pub fn new() -> Bus {
        unsafe {
            from_glib_full(ffi::gst_bus_new())
        }
    }
}

pub trait BusExt {
    fn add_signal_watch(&self);

    fn add_signal_watch_full(&self, priority: i32);

    //fn add_watch<P: Into<Option</*Unimplemented*/Fundamental: Pointer>>>(&self, func: /*Unknown conversion*//*Unimplemented*/BusFunc, user_data: P) -> u32;

    //fn add_watch_full<P: Into<Option</*Unimplemented*/Fundamental: Pointer>>>(&self, priority: i32, func: /*Unknown conversion*//*Unimplemented*/BusFunc, user_data: P, notify: /*Unknown conversion*//*Unimplemented*/DestroyNotify) -> u32;

    //fn async_signal_func<P: Into<Option</*Unimplemented*/Fundamental: Pointer>>>(&self, message: /*Ignored*/&mut Message, data: P) -> bool;

    //fn create_watch(&self) -> /*Ignored*/Option<glib::Source>;

    fn disable_sync_message_emission(&self);

    fn enable_sync_message_emission(&self);

    fn have_pending(&self) -> bool;

    //fn peek(&self) -> /*Ignored*/Option<Message>;

    //fn poll(&self, events: /*Ignored*/MessageType, timeout: ClockTime) -> /*Ignored*/Option<Message>;

    //fn pop(&self) -> /*Ignored*/Option<Message>;

    //fn pop_filtered(&self, types: /*Ignored*/MessageType) -> /*Ignored*/Option<Message>;

    //fn post(&self, message: /*Ignored*/&mut Message) -> bool;

    fn remove_signal_watch(&self);

    #[cfg(feature = "v1_6")]
    fn remove_watch(&self) -> bool;

    fn set_flushing(&self, flushing: bool);

    //fn set_sync_handler<'a, P: Into<Option<&'a /*Unimplemented*/BusSyncHandler>>, Q: Into<Option</*Unimplemented*/Fundamental: Pointer>>>(&self, func: P, user_data: Q, notify: /*Unknown conversion*//*Unimplemented*/DestroyNotify);

    //fn sync_signal_handler<P: Into<Option</*Unimplemented*/Fundamental: Pointer>>>(&self, message: /*Ignored*/&mut Message, data: P) -> /*Ignored*/BusSyncReply;

    //fn timed_pop(&self, timeout: ClockTime) -> /*Ignored*/Option<Message>;

    //fn timed_pop_filtered(&self, timeout: ClockTime, types: /*Ignored*/MessageType) -> /*Ignored*/Option<Message>;

    //fn connect_message<Unsupported or ignored types>(&self, f: F) -> u64;

    //fn connect_sync_message<Unsupported or ignored types>(&self, f: F) -> u64;
}

impl<O: IsA<Bus>> BusExt for O {
    fn add_signal_watch(&self) {
        unsafe {
            ffi::gst_bus_add_signal_watch(self.to_glib_none().0);
        }
    }

    fn add_signal_watch_full(&self, priority: i32) {
        unsafe {
            ffi::gst_bus_add_signal_watch_full(self.to_glib_none().0, priority);
        }
    }

    //fn add_watch<P: Into<Option</*Unimplemented*/Fundamental: Pointer>>>(&self, func: /*Unknown conversion*//*Unimplemented*/BusFunc, user_data: P) -> u32 {
    //    unsafe { TODO: call ffi::gst_bus_add_watch() }
    //}

    //fn add_watch_full<P: Into<Option</*Unimplemented*/Fundamental: Pointer>>>(&self, priority: i32, func: /*Unknown conversion*//*Unimplemented*/BusFunc, user_data: P, notify: /*Unknown conversion*//*Unimplemented*/DestroyNotify) -> u32 {
    //    unsafe { TODO: call ffi::gst_bus_add_watch_full() }
    //}

    //fn async_signal_func<P: Into<Option</*Unimplemented*/Fundamental: Pointer>>>(&self, message: /*Ignored*/&mut Message, data: P) -> bool {
    //    unsafe { TODO: call ffi::gst_bus_async_signal_func() }
    //}

    //fn create_watch(&self) -> /*Ignored*/Option<glib::Source> {
    //    unsafe { TODO: call ffi::gst_bus_create_watch() }
    //}

    fn disable_sync_message_emission(&self) {
        unsafe {
            ffi::gst_bus_disable_sync_message_emission(self.to_glib_none().0);
        }
    }

    fn enable_sync_message_emission(&self) {
        unsafe {
            ffi::gst_bus_enable_sync_message_emission(self.to_glib_none().0);
        }
    }

    fn have_pending(&self) -> bool {
        unsafe {
            from_glib(ffi::gst_bus_have_pending(self.to_glib_none().0))
        }
    }

    //fn peek(&self) -> /*Ignored*/Option<Message> {
    //    unsafe { TODO: call ffi::gst_bus_peek() }
    //}

    //fn poll(&self, events: /*Ignored*/MessageType, timeout: ClockTime) -> /*Ignored*/Option<Message> {
    //    unsafe { TODO: call ffi::gst_bus_poll() }
    //}

    //fn pop(&self) -> /*Ignored*/Option<Message> {
    //    unsafe { TODO: call ffi::gst_bus_pop() }
    //}

    //fn pop_filtered(&self, types: /*Ignored*/MessageType) -> /*Ignored*/Option<Message> {
    //    unsafe { TODO: call ffi::gst_bus_pop_filtered() }
    //}

    //fn post(&self, message: /*Ignored*/&mut Message) -> bool {
    //    unsafe { TODO: call ffi::gst_bus_post() }
    //}

    fn remove_signal_watch(&self) {
        unsafe {
            ffi::gst_bus_remove_signal_watch(self.to_glib_none().0);
        }
    }

    #[cfg(feature = "v1_6")]
    fn remove_watch(&self) -> bool {
        unsafe {
            from_glib(ffi::gst_bus_remove_watch(self.to_glib_none().0))
        }
    }

    fn set_flushing(&self, flushing: bool) {
        unsafe {
            ffi::gst_bus_set_flushing(self.to_glib_none().0, flushing.to_glib());
        }
    }

    //fn set_sync_handler<'a, P: Into<Option<&'a /*Unimplemented*/BusSyncHandler>>, Q: Into<Option</*Unimplemented*/Fundamental: Pointer>>>(&self, func: P, user_data: Q, notify: /*Unknown conversion*//*Unimplemented*/DestroyNotify) {
    //    unsafe { TODO: call ffi::gst_bus_set_sync_handler() }
    //}

    //fn sync_signal_handler<P: Into<Option</*Unimplemented*/Fundamental: Pointer>>>(&self, message: /*Ignored*/&mut Message, data: P) -> /*Ignored*/BusSyncReply {
    //    unsafe { TODO: call ffi::gst_bus_sync_signal_handler() }
    //}

    //fn timed_pop(&self, timeout: ClockTime) -> /*Ignored*/Option<Message> {
    //    unsafe { TODO: call ffi::gst_bus_timed_pop() }
    //}

    //fn timed_pop_filtered(&self, timeout: ClockTime, types: /*Ignored*/MessageType) -> /*Ignored*/Option<Message> {
    //    unsafe { TODO: call ffi::gst_bus_timed_pop_filtered() }
    //}

    //fn connect_message<Unsupported or ignored types>(&self, f: F) -> u64 {
    //    Ignored message: Gst.Message
    //}

    //fn connect_sync_message<Unsupported or ignored types>(&self, f: F) -> u64 {
    //    Ignored message: Gst.Message
    //}
}
