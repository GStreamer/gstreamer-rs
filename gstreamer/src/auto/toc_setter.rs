// This file was generated by gir (https://github.com/gtk-rs/gir)
// from gir-files (https://github.com/gtk-rs/gir-files)
// DO NOT EDIT

use Element;
use Object;
use Toc;
use ffi;
use glib::object::IsA;
use glib::translate::*;

glib_wrapper! {
    pub struct TocSetter(Interface<ffi::GstTocSetter>) @requires Element, Object;

    match fn {
        get_type => || ffi::gst_toc_setter_get_type(),
    }
}

unsafe impl Send for TocSetter {}
unsafe impl Sync for TocSetter {}

pub const NONE_TOC_SETTER: Option<&TocSetter> = None;

pub trait TocSetterExt: 'static {
    fn get_toc(&self) -> Option<Toc>;

    fn reset(&self);

    fn set_toc<'a, P: Into<Option<&'a Toc>>>(&self, toc: P);
}

impl<O: IsA<TocSetter>> TocSetterExt for O {
    fn get_toc(&self) -> Option<Toc> {
        unsafe {
            from_glib_full(ffi::gst_toc_setter_get_toc(self.as_ref().to_glib_none().0))
        }
    }

    fn reset(&self) {
        unsafe {
            ffi::gst_toc_setter_reset(self.as_ref().to_glib_none().0);
        }
    }

    fn set_toc<'a, P: Into<Option<&'a Toc>>>(&self, toc: P) {
        let toc = toc.into();
        unsafe {
            ffi::gst_toc_setter_set_toc(self.as_ref().to_glib_none().0, toc.to_glib_none().0);
        }
    }
}
