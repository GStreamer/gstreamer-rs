// This file was generated by gir (https://github.com/gtk-rs/gir)
// from gir-files (https://github.com/gtk-rs/gir-files)
// from gst-gir-files (https://gitlab.freedesktop.org/gstreamer/gir-files-rs.git)
// DO NOT EDIT

use crate::{ffi, Element, Object, Toc};
use glib::{prelude::*, translate::*};

glib::wrapper! {
    #[doc(alias = "GstTocSetter")]
    pub struct TocSetter(Interface<ffi::GstTocSetter, ffi::GstTocSetterInterface>) @requires Element, Object;

    match fn {
        type_ => || ffi::gst_toc_setter_get_type(),
    }
}

impl TocSetter {
    pub const NONE: Option<&'static TocSetter> = None;
}

unsafe impl Send for TocSetter {}
unsafe impl Sync for TocSetter {}

mod sealed {
    pub trait Sealed {}
    impl<T: super::IsA<super::TocSetter>> Sealed for T {}
}

pub trait TocSetterExt: IsA<TocSetter> + sealed::Sealed + 'static {
    #[doc(alias = "gst_toc_setter_get_toc")]
    #[doc(alias = "get_toc")]
    fn toc(&self) -> Option<Toc> {
        unsafe { from_glib_full(ffi::gst_toc_setter_get_toc(self.as_ref().to_glib_none().0)) }
    }

    #[doc(alias = "gst_toc_setter_reset")]
    fn reset(&self) {
        unsafe {
            ffi::gst_toc_setter_reset(self.as_ref().to_glib_none().0);
        }
    }

    #[doc(alias = "gst_toc_setter_set_toc")]
    fn set_toc(&self, toc: Option<&Toc>) {
        unsafe {
            ffi::gst_toc_setter_set_toc(self.as_ref().to_glib_none().0, toc.to_glib_none().0);
        }
    }
}

impl<O: IsA<TocSetter>> TocSetterExt for O {}
