// This file was generated by gir (https://github.com/gtk-rs/gir)
// from gir-files (https://github.com/gtk-rs/gir-files)
// DO NOT EDIT

use crate::Object;
use glib::object::IsA;
use glib::translate::*;

glib::glib_wrapper! {
    pub struct Allocator(Object<ffi::GstAllocator, ffi::GstAllocatorClass>) @extends Object;

    match fn {
        get_type => || ffi::gst_allocator_get_type(),
    }
}

impl Allocator {
    #[doc(alias = "gst_allocator_find")]
    pub fn find(name: Option<&str>) -> Option<Allocator> {
        assert_initialized_main_thread!();
        unsafe { from_glib_full(ffi::gst_allocator_find(name.to_glib_none().0)) }
    }

    #[doc(alias = "gst_allocator_register")]
    pub fn register<P: IsA<Allocator>>(name: &str, allocator: &P) {
        skip_assert_initialized!();
        unsafe {
            ffi::gst_allocator_register(name.to_glib_none().0, allocator.as_ref().to_glib_full());
        }
    }
}

unsafe impl Send for Allocator {}
unsafe impl Sync for Allocator {}

pub const NONE_ALLOCATOR: Option<&Allocator> = None;

pub trait AllocatorExt: 'static {
    //#[doc(alias = "gst_allocator_alloc")]
    //fn alloc(&self, size: usize, params: /*Ignored*/Option<&mut AllocationParams>) -> /*Ignored*/Option<Memory>;

    //#[doc(alias = "gst_allocator_free")]
    //fn free(&self, memory: /*Ignored*/&Memory);

    #[doc(alias = "gst_allocator_set_default")]
    fn set_default(&self);
}

impl<O: IsA<Allocator>> AllocatorExt for O {
    //fn alloc(&self, size: usize, params: /*Ignored*/Option<&mut AllocationParams>) -> /*Ignored*/Option<Memory> {
    //    unsafe { TODO: call ffi:gst_allocator_alloc() }
    //}

    //fn free(&self, memory: /*Ignored*/&Memory) {
    //    unsafe { TODO: call ffi:gst_allocator_free() }
    //}

    fn set_default(&self) {
        unsafe {
            ffi::gst_allocator_set_default(self.as_ref().to_glib_full());
        }
    }
}
