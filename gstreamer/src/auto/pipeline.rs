// This file was generated by gir (33e9567) from gir-files (???)
// DO NOT EDIT

use Bin;
use Clock;
use ClockTime;
use Element;
use Object;
use ffi;
use glib::object::Downcast;
use glib::object::IsA;
use glib::translate::*;

glib_wrapper! {
    pub struct Pipeline(Object<ffi::GstPipeline>): Bin, Element, Object;

    match fn {
        get_type => || ffi::gst_pipeline_get_type(),
    }
}

impl Pipeline {
    pub fn new<'a, P: Into<Option<&'a str>>>(name: P) -> Pipeline {
        assert_initialized_main_thread!();
        let name = name.into();
        let name = name.to_glib_none();
        unsafe {
            Element::from_glib_none(ffi::gst_pipeline_new(name.0)).downcast_unchecked()
        }
    }
}

unsafe impl Send for Pipeline {}
unsafe impl Sync for Pipeline {}

pub trait PipelineExt {
    fn auto_clock(&self);

    fn get_auto_flush_bus(&self) -> bool;

    fn get_delay(&self) -> ClockTime;

    fn get_latency(&self) -> ClockTime;

    fn get_pipeline_clock(&self) -> Option<Clock>;

    fn set_auto_flush_bus(&self, auto_flush: bool);

    fn set_delay(&self, delay: ClockTime);

    fn set_latency(&self, latency: ClockTime);

    fn use_clock<'a, P: IsA<Clock> + 'a, Q: Into<Option<&'a P>>>(&self, clock: Q);
}

impl<O: IsA<Pipeline>> PipelineExt for O {
    fn auto_clock(&self) {
        unsafe {
            ffi::gst_pipeline_auto_clock(self.to_glib_none().0);
        }
    }

    fn get_auto_flush_bus(&self) -> bool {
        unsafe {
            from_glib(ffi::gst_pipeline_get_auto_flush_bus(self.to_glib_none().0))
        }
    }

    fn get_delay(&self) -> ClockTime {
        unsafe {
            ffi::gst_pipeline_get_delay(self.to_glib_none().0)
        }
    }

    fn get_latency(&self) -> ClockTime {
        unsafe {
            ffi::gst_pipeline_get_latency(self.to_glib_none().0)
        }
    }

    fn get_pipeline_clock(&self) -> Option<Clock> {
        unsafe {
            from_glib_full(ffi::gst_pipeline_get_pipeline_clock(self.to_glib_none().0))
        }
    }

    fn set_auto_flush_bus(&self, auto_flush: bool) {
        unsafe {
            ffi::gst_pipeline_set_auto_flush_bus(self.to_glib_none().0, auto_flush.to_glib());
        }
    }

    fn set_delay(&self, delay: ClockTime) {
        unsafe {
            ffi::gst_pipeline_set_delay(self.to_glib_none().0, delay);
        }
    }

    fn set_latency(&self, latency: ClockTime) {
        unsafe {
            ffi::gst_pipeline_set_latency(self.to_glib_none().0, latency);
        }
    }

    fn use_clock<'a, P: IsA<Clock> + 'a, Q: Into<Option<&'a P>>>(&self, clock: Q) {
        let clock = clock.into();
        let clock = clock.to_glib_none();
        unsafe {
            ffi::gst_pipeline_use_clock(self.to_glib_none().0, clock.0);
        }
    }
}
