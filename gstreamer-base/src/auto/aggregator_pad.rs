// This file was generated by gir (https://github.com/gtk-rs/gir)
// from gir-files (https://github.com/gtk-rs/gir-files)
// DO NOT EDIT

use ffi;
use glib::object::IsA;
use glib::translate::*;
use glib_ffi;
use gobject_ffi;
use gst;
use gst_ffi;
use std::mem;
use std::ptr;

glib_wrapper! {
    pub struct AggregatorPad(Object<ffi::GstAggregatorPad, ffi::GstAggregatorPadClass>): [
        gst::Pad => gst_ffi::GstPad,
        gst::Object => gst_ffi::GstObject,
    ];

    match fn {
        get_type => || ffi::gst_aggregator_pad_get_type(),
    }
}

unsafe impl Send for AggregatorPad {}
unsafe impl Sync for AggregatorPad {}

pub trait AggregatorPadExt {
    fn drop_buffer(&self) -> bool;

    #[cfg(any(feature = "v1_14_1", feature = "dox"))]
    fn has_buffer(&self) -> bool;

    fn is_eos(&self) -> bool;

    fn peek_buffer(&self) -> Option<gst::Buffer>;

    fn pop_buffer(&self) -> Option<gst::Buffer>;
}

impl<O: IsA<AggregatorPad>> AggregatorPadExt for O {
    fn drop_buffer(&self) -> bool {
        unsafe {
            from_glib(ffi::gst_aggregator_pad_drop_buffer(self.to_glib_none().0))
        }
    }

    #[cfg(any(feature = "v1_14_1", feature = "dox"))]
    fn has_buffer(&self) -> bool {
        unsafe {
            from_glib(ffi::gst_aggregator_pad_has_buffer(self.to_glib_none().0))
        }
    }

    fn is_eos(&self) -> bool {
        unsafe {
            from_glib(ffi::gst_aggregator_pad_is_eos(self.to_glib_none().0))
        }
    }

    fn peek_buffer(&self) -> Option<gst::Buffer> {
        unsafe {
            from_glib_full(ffi::gst_aggregator_pad_peek_buffer(self.to_glib_none().0))
        }
    }

    fn pop_buffer(&self) -> Option<gst::Buffer> {
        unsafe {
            from_glib_full(ffi::gst_aggregator_pad_pop_buffer(self.to_glib_none().0))
        }
    }
}
