// This file was generated by gir (https://github.com/gtk-rs/gir)
// from gir-files (https://github.com/gtk-rs/gir-files)
// DO NOT EDIT

use glib::object::IsA;
use glib::translate::*;
use gst;
use gst_base_sys;

pub fn type_find_helper<P: IsA<gst::Pad>>(src: &P, size: u64) -> Option<gst::Caps> {
    assert_initialized_main_thread!();
    unsafe {
        from_glib_full(gst_base_sys::gst_type_find_helper(
            src.as_ref().to_glib_none().0,
            size,
        ))
    }
}

pub fn type_find_helper_for_extension<P: IsA<gst::Object>>(
    obj: Option<&P>,
    extension: &str,
) -> Option<gst::Caps> {
    assert_initialized_main_thread!();
    unsafe {
        from_glib_full(gst_base_sys::gst_type_find_helper_for_extension(
            obj.map(|p| p.as_ref()).to_glib_none().0,
            extension.to_glib_none().0,
        ))
    }
}

//pub fn type_find_helper_get_range<P: IsA<gst::Object>, Q: IsA<gst::Object>, R: FnMut(&gst::Object, Option<&gst::Object>, u64, u32, &gst::Buffer) -> gst::FlowReturn>(obj: &P, parent: Option<&Q>, func: R, size: u64, extension: Option<&str>) -> (Option<gst::Caps>, gst::TypeFindProbability) {
//    unsafe { TODO: call gst_base_sys:gst_type_find_helper_get_range() }
//}

//#[cfg(any(feature = "v1_14_3", feature = "dox"))]
//pub fn type_find_helper_get_range_full<P: IsA<gst::Object>, Q: IsA<gst::Object>, R: FnMut(&gst::Object, Option<&gst::Object>, u64, u32, &gst::Buffer) -> gst::FlowReturn>(obj: &P, parent: Option<&Q>, func: R, size: u64, extension: Option<&str>) -> (gst::FlowReturn, gst::Caps, gst::TypeFindProbability) {
//    unsafe { TODO: call gst_base_sys:gst_type_find_helper_get_range_full() }
//}
