// This file was generated by gir (https://github.com/gtk-rs/gir)
// from gir-files (https://github.com/gtk-rs/gir-files)
// from gst-gir-files (https://gitlab.freedesktop.org/gstreamer/gir-files-rs.git)
// DO NOT EDIT

use crate::ffi;
use glib::{prelude::*, translate::*};

glib::wrapper! {
    #[doc(alias = "GstVideoBufferPool")]
    pub struct VideoBufferPool(Object<ffi::GstVideoBufferPool, ffi::GstVideoBufferPoolClass>) @extends gst::BufferPool, gst::Object;

    match fn {
        type_ => || ffi::gst_video_buffer_pool_get_type(),
    }
}

impl VideoBufferPool {
    pub const NONE: Option<&'static VideoBufferPool> = None;

    #[doc(alias = "gst_video_buffer_pool_new")]
    pub fn new() -> VideoBufferPool {
        assert_initialized_main_thread!();
        unsafe { gst::BufferPool::from_glib_full(ffi::gst_video_buffer_pool_new()).unsafe_cast() }
    }
}

impl Default for VideoBufferPool {
    fn default() -> Self {
        Self::new()
    }
}

unsafe impl Send for VideoBufferPool {}
unsafe impl Sync for VideoBufferPool {}
