// This file was generated by gir (https://github.com/gtk-rs/gir)
// from gir-files (https://github.com/gtk-rs/gir-files)
// from gst-gir-files (https://gitlab.freedesktop.org/gstreamer/gir-files-rs.git)
// DO NOT EDIT

#![allow(non_camel_case_types, non_upper_case_globals, non_snake_case)]
#![allow(
    clippy::approx_constant,
    clippy::type_complexity,
    clippy::unreadable_literal,
    clippy::upper_case_acronyms
)]
#![cfg_attr(docsrs, feature(doc_cfg))]

use glib_sys as glib;
use gstreamer_sys as gst;

#[cfg(unix)]
#[allow(unused_imports)]
use libc::{dev_t, gid_t, pid_t, socklen_t, uid_t};
#[allow(unused_imports)]
use libc::{intptr_t, off_t, size_t, ssize_t, time_t, uintptr_t, FILE};
#[allow(unused_imports)]
use std::ffi::{
    c_char, c_double, c_float, c_int, c_long, c_short, c_uchar, c_uint, c_ulong, c_ushort, c_void,
};

#[allow(unused_imports)]
use glib::{gboolean, gconstpointer, gpointer, GType};

// Enums
pub type GstMediaSourceEOSError = c_int;
pub const GST_MEDIA_SOURCE_EOS_ERROR_NONE: GstMediaSourceEOSError = 0;
pub const GST_MEDIA_SOURCE_EOS_ERROR_NETWORK: GstMediaSourceEOSError = 1;
pub const GST_MEDIA_SOURCE_EOS_ERROR_DECODE: GstMediaSourceEOSError = 2;

pub type GstMediaSourceError = c_int;
pub const GST_MEDIA_SOURCE_ERROR_INVALID_STATE: GstMediaSourceError = 0;
pub const GST_MEDIA_SOURCE_ERROR_TYPE: GstMediaSourceError = 1;
pub const GST_MEDIA_SOURCE_ERROR_NOT_SUPPORTED: GstMediaSourceError = 2;
pub const GST_MEDIA_SOURCE_ERROR_NOT_FOUND: GstMediaSourceError = 3;
pub const GST_MEDIA_SOURCE_ERROR_QUOTA_EXCEEDED: GstMediaSourceError = 4;

pub type GstMediaSourceReadyState = c_int;
pub const GST_MEDIA_SOURCE_READY_STATE_CLOSED: GstMediaSourceReadyState = 0;
pub const GST_MEDIA_SOURCE_READY_STATE_OPEN: GstMediaSourceReadyState = 1;
pub const GST_MEDIA_SOURCE_READY_STATE_ENDED: GstMediaSourceReadyState = 2;

pub type GstMseSrcReadyState = c_int;
pub const GST_MSE_SRC_READY_STATE_HAVE_NOTHING: GstMseSrcReadyState = 0;
pub const GST_MSE_SRC_READY_STATE_HAVE_METADATA: GstMseSrcReadyState = 1;
pub const GST_MSE_SRC_READY_STATE_HAVE_CURRENT_DATA: GstMseSrcReadyState = 2;
pub const GST_MSE_SRC_READY_STATE_HAVE_FUTURE_DATA: GstMseSrcReadyState = 3;
pub const GST_MSE_SRC_READY_STATE_HAVE_ENOUGH_DATA: GstMseSrcReadyState = 4;

pub type GstSourceBufferAppendMode = c_int;
pub const GST_SOURCE_BUFFER_APPEND_MODE_SEGMENTS: GstSourceBufferAppendMode = 0;
pub const GST_SOURCE_BUFFER_APPEND_MODE_SEQUENCE: GstSourceBufferAppendMode = 1;

// Records
#[derive(Copy, Clone)]
#[repr(C)]
pub struct GstMediaSourceClass {
    pub parent_class: gst::GstObjectClass,
}

impl ::std::fmt::Debug for GstMediaSourceClass {
    fn fmt(&self, f: &mut ::std::fmt::Formatter) -> ::std::fmt::Result {
        f.debug_struct(&format!("GstMediaSourceClass @ {self:p}"))
            .field("parent_class", &self.parent_class)
            .finish()
    }
}

#[derive(Copy, Clone)]
#[repr(C)]
pub struct GstMediaSourceRange {
    pub start: gst::GstClockTime,
    pub end: gst::GstClockTime,
}

impl ::std::fmt::Debug for GstMediaSourceRange {
    fn fmt(&self, f: &mut ::std::fmt::Formatter) -> ::std::fmt::Result {
        f.debug_struct(&format!("GstMediaSourceRange @ {self:p}"))
            .field("start", &self.start)
            .field("end", &self.end)
            .finish()
    }
}

#[derive(Copy, Clone)]
#[repr(C)]
pub struct GstMseSrcClass {
    pub parent_class: gst::GstElementClass,
}

impl ::std::fmt::Debug for GstMseSrcClass {
    fn fmt(&self, f: &mut ::std::fmt::Formatter) -> ::std::fmt::Result {
        f.debug_struct(&format!("GstMseSrcClass @ {self:p}"))
            .field("parent_class", &self.parent_class)
            .finish()
    }
}

#[derive(Copy, Clone)]
#[repr(C)]
pub struct GstMseSrcPadClass {
    pub parent_class: gst::GstPadClass,
}

impl ::std::fmt::Debug for GstMseSrcPadClass {
    fn fmt(&self, f: &mut ::std::fmt::Formatter) -> ::std::fmt::Result {
        f.debug_struct(&format!("GstMseSrcPadClass @ {self:p}"))
            .field("parent_class", &self.parent_class)
            .finish()
    }
}

#[derive(Copy, Clone)]
#[repr(C)]
pub struct GstSourceBufferClass {
    pub parent_class: gst::GstObjectClass,
}

impl ::std::fmt::Debug for GstSourceBufferClass {
    fn fmt(&self, f: &mut ::std::fmt::Formatter) -> ::std::fmt::Result {
        f.debug_struct(&format!("GstSourceBufferClass @ {self:p}"))
            .field("parent_class", &self.parent_class)
            .finish()
    }
}

#[derive(Copy, Clone)]
#[repr(C)]
pub struct GstSourceBufferInterval {
    pub start: gst::GstClockTime,
    pub end: gst::GstClockTime,
}

impl ::std::fmt::Debug for GstSourceBufferInterval {
    fn fmt(&self, f: &mut ::std::fmt::Formatter) -> ::std::fmt::Result {
        f.debug_struct(&format!("GstSourceBufferInterval @ {self:p}"))
            .field("start", &self.start)
            .field("end", &self.end)
            .finish()
    }
}

#[derive(Copy, Clone)]
#[repr(C)]
pub struct GstSourceBufferListClass {
    pub parent_class: gst::GstObjectClass,
}

impl ::std::fmt::Debug for GstSourceBufferListClass {
    fn fmt(&self, f: &mut ::std::fmt::Formatter) -> ::std::fmt::Result {
        f.debug_struct(&format!("GstSourceBufferListClass @ {self:p}"))
            .field("parent_class", &self.parent_class)
            .finish()
    }
}

// Classes
#[repr(C)]
#[allow(dead_code)]
pub struct GstMediaSource {
    _data: [u8; 0],
    _marker: core::marker::PhantomData<(*mut u8, core::marker::PhantomPinned)>,
}

impl ::std::fmt::Debug for GstMediaSource {
    fn fmt(&self, f: &mut ::std::fmt::Formatter) -> ::std::fmt::Result {
        f.debug_struct(&format!("GstMediaSource @ {self:p}"))
            .finish()
    }
}

#[repr(C)]
#[allow(dead_code)]
pub struct GstMseSrc {
    _data: [u8; 0],
    _marker: core::marker::PhantomData<(*mut u8, core::marker::PhantomPinned)>,
}

impl ::std::fmt::Debug for GstMseSrc {
    fn fmt(&self, f: &mut ::std::fmt::Formatter) -> ::std::fmt::Result {
        f.debug_struct(&format!("GstMseSrc @ {self:p}")).finish()
    }
}

#[repr(C)]
#[allow(dead_code)]
pub struct GstMseSrcPad {
    _data: [u8; 0],
    _marker: core::marker::PhantomData<(*mut u8, core::marker::PhantomPinned)>,
}

impl ::std::fmt::Debug for GstMseSrcPad {
    fn fmt(&self, f: &mut ::std::fmt::Formatter) -> ::std::fmt::Result {
        f.debug_struct(&format!("GstMseSrcPad @ {self:p}")).finish()
    }
}

#[repr(C)]
#[allow(dead_code)]
pub struct GstSourceBuffer {
    _data: [u8; 0],
    _marker: core::marker::PhantomData<(*mut u8, core::marker::PhantomPinned)>,
}

impl ::std::fmt::Debug for GstSourceBuffer {
    fn fmt(&self, f: &mut ::std::fmt::Formatter) -> ::std::fmt::Result {
        f.debug_struct(&format!("GstSourceBuffer @ {self:p}"))
            .finish()
    }
}

#[repr(C)]
#[allow(dead_code)]
pub struct GstSourceBufferList {
    _data: [u8; 0],
    _marker: core::marker::PhantomData<(*mut u8, core::marker::PhantomPinned)>,
}

impl ::std::fmt::Debug for GstSourceBufferList {
    fn fmt(&self, f: &mut ::std::fmt::Formatter) -> ::std::fmt::Result {
        f.debug_struct(&format!("GstSourceBufferList @ {self:p}"))
            .finish()
    }
}

extern "C" {

    //=========================================================================
    // GstMediaSourceEOSError
    //=========================================================================
    pub fn gst_media_source_eos_error_get_type() -> GType;

    //=========================================================================
    // GstMediaSourceError
    //=========================================================================
    pub fn gst_media_source_error_get_type() -> GType;
    pub fn gst_media_source_error_quark() -> glib::GQuark;

    //=========================================================================
    // GstMediaSourceReadyState
    //=========================================================================
    pub fn gst_media_source_ready_state_get_type() -> GType;

    //=========================================================================
    // GstMseSrcReadyState
    //=========================================================================
    pub fn gst_mse_src_ready_state_get_type() -> GType;

    //=========================================================================
    // GstSourceBufferAppendMode
    //=========================================================================
    pub fn gst_source_buffer_append_mode_get_type() -> GType;

    //=========================================================================
    // GstMediaSource
    //=========================================================================
    pub fn gst_media_source_get_type() -> GType;
    pub fn gst_media_source_new() -> *mut GstMediaSource;
    pub fn gst_media_source_is_type_supported(type_: *const c_char) -> gboolean;
    pub fn gst_media_source_add_source_buffer(
        self_: *mut GstMediaSource,
        type_: *const c_char,
        error: *mut *mut glib::GError,
    ) -> *mut GstSourceBuffer;
    pub fn gst_media_source_attach(self_: *mut GstMediaSource, element: *mut GstMseSrc);
    pub fn gst_media_source_clear_live_seekable_range(
        self_: *mut GstMediaSource,
        error: *mut *mut glib::GError,
    ) -> gboolean;
    pub fn gst_media_source_detach(self_: *mut GstMediaSource);
    pub fn gst_media_source_end_of_stream(
        self_: *mut GstMediaSource,
        eos_error: GstMediaSourceEOSError,
        error: *mut *mut glib::GError,
    ) -> gboolean;
    pub fn gst_media_source_get_active_source_buffers(
        self_: *mut GstMediaSource,
    ) -> *mut GstSourceBufferList;
    pub fn gst_media_source_get_duration(self_: *mut GstMediaSource) -> gst::GstClockTime;
    pub fn gst_media_source_get_live_seekable_range(
        self_: *mut GstMediaSource,
        range: *mut GstMediaSourceRange,
    );
    pub fn gst_media_source_get_position(self_: *mut GstMediaSource) -> gst::GstClockTime;
    pub fn gst_media_source_get_ready_state(self_: *mut GstMediaSource)
        -> GstMediaSourceReadyState;
    pub fn gst_media_source_get_source_buffers(
        self_: *mut GstMediaSource,
    ) -> *mut GstSourceBufferList;
    pub fn gst_media_source_remove_source_buffer(
        self_: *mut GstMediaSource,
        buffer: *mut GstSourceBuffer,
        error: *mut *mut glib::GError,
    ) -> gboolean;
    pub fn gst_media_source_set_duration(
        self_: *mut GstMediaSource,
        duration: gst::GstClockTime,
        error: *mut *mut glib::GError,
    ) -> gboolean;
    pub fn gst_media_source_set_live_seekable_range(
        self_: *mut GstMediaSource,
        start: gst::GstClockTime,
        end: gst::GstClockTime,
        error: *mut *mut glib::GError,
    ) -> gboolean;

    //=========================================================================
    // GstMseSrc
    //=========================================================================
    pub fn gst_mse_src_get_type() -> GType;
    pub fn gst_mse_src_get_duration(self_: *mut GstMseSrc) -> gst::GstClockTime;
    pub fn gst_mse_src_get_n_audio(self_: *mut GstMseSrc) -> c_uint;
    pub fn gst_mse_src_get_n_text(self_: *mut GstMseSrc) -> c_uint;
    pub fn gst_mse_src_get_n_video(self_: *mut GstMseSrc) -> c_uint;
    pub fn gst_mse_src_get_position(self_: *mut GstMseSrc) -> gst::GstClockTime;
    pub fn gst_mse_src_get_ready_state(self_: *mut GstMseSrc) -> GstMseSrcReadyState;

    //=========================================================================
    // GstMseSrcPad
    //=========================================================================
    pub fn gst_mse_src_pad_get_type() -> GType;

    //=========================================================================
    // GstSourceBuffer
    //=========================================================================
    pub fn gst_source_buffer_get_type() -> GType;
    pub fn gst_source_buffer_abort(
        self_: *mut GstSourceBuffer,
        error: *mut *mut glib::GError,
    ) -> gboolean;
    pub fn gst_source_buffer_append_buffer(
        self_: *mut GstSourceBuffer,
        buf: *mut gst::GstBuffer,
        error: *mut *mut glib::GError,
    ) -> gboolean;
    pub fn gst_source_buffer_change_content_type(
        self_: *mut GstSourceBuffer,
        type_: *const c_char,
        error: *mut *mut glib::GError,
    ) -> gboolean;
    pub fn gst_source_buffer_get_append_mode(
        self_: *mut GstSourceBuffer,
    ) -> GstSourceBufferAppendMode;
    pub fn gst_source_buffer_get_append_window_end(
        self_: *mut GstSourceBuffer,
    ) -> gst::GstClockTime;
    pub fn gst_source_buffer_get_append_window_start(
        self_: *mut GstSourceBuffer,
    ) -> gst::GstClockTime;
    pub fn gst_source_buffer_get_buffered(
        self_: *mut GstSourceBuffer,
        error: *mut *mut glib::GError,
    ) -> *mut glib::GArray;
    pub fn gst_source_buffer_get_content_type(self_: *mut GstSourceBuffer) -> *mut c_char;
    pub fn gst_source_buffer_get_timestamp_offset(self_: *mut GstSourceBuffer)
        -> gst::GstClockTime;
    pub fn gst_source_buffer_get_updating(self_: *mut GstSourceBuffer) -> gboolean;
    pub fn gst_source_buffer_remove(
        self_: *mut GstSourceBuffer,
        start: gst::GstClockTime,
        end: gst::GstClockTime,
        error: *mut *mut glib::GError,
    ) -> gboolean;
    pub fn gst_source_buffer_set_append_mode(
        self_: *mut GstSourceBuffer,
        mode: GstSourceBufferAppendMode,
        error: *mut *mut glib::GError,
    ) -> gboolean;
    pub fn gst_source_buffer_set_append_window_end(
        self_: *mut GstSourceBuffer,
        end: gst::GstClockTime,
        error: *mut *mut glib::GError,
    ) -> gboolean;
    pub fn gst_source_buffer_set_append_window_start(
        self_: *mut GstSourceBuffer,
        start: gst::GstClockTime,
        error: *mut *mut glib::GError,
    ) -> gboolean;
    pub fn gst_source_buffer_set_timestamp_offset(
        self_: *mut GstSourceBuffer,
        offset: gst::GstClockTime,
        error: *mut *mut glib::GError,
    ) -> gboolean;

    //=========================================================================
    // GstSourceBufferList
    //=========================================================================
    pub fn gst_source_buffer_list_get_type() -> GType;
    pub fn gst_source_buffer_list_get_length(self_: *mut GstSourceBufferList) -> c_uint;
    pub fn gst_source_buffer_list_index(
        self_: *mut GstSourceBufferList,
        index: c_uint,
    ) -> *mut GstSourceBuffer;

}
