// This file was generated by gir (https://github.com/gtk-rs/gir)
// from gir-files (https://github.com/gtk-rs/gir-files)
// from gst-gir-files (https://gitlab.freedesktop.org/gstreamer/gir-files-rs.git)
// DO NOT EDIT

use crate::{ffi, SourceBuffer};
use glib::{
    object::ObjectType as _,
    prelude::*,
    signal::{connect_raw, SignalHandlerId},
    translate::*,
};
use std::boxed::Box as Box_;

glib::wrapper! {
    #[doc(alias = "GstSourceBufferList")]
    pub struct SourceBufferList(Object<ffi::GstSourceBufferList, ffi::GstSourceBufferListClass>) @extends gst::Object;

    match fn {
        type_ => || ffi::gst_source_buffer_list_get_type(),
    }
}

impl SourceBufferList {
    #[doc(alias = "gst_source_buffer_list_get_length")]
    #[doc(alias = "get_length")]
    pub fn length(&self) -> u32 {
        unsafe { ffi::gst_source_buffer_list_get_length(self.to_glib_none().0) }
    }

    #[doc(alias = "gst_source_buffer_list_index")]
    pub fn index(&self, index: u32) -> Option<SourceBuffer> {
        unsafe {
            from_glib_full(ffi::gst_source_buffer_list_index(
                self.to_glib_none().0,
                index,
            ))
        }
    }

    #[doc(alias = "on-sourcebuffer-added")]
    pub fn connect_on_sourcebuffer_added<F: Fn(&Self) + Send + Sync + 'static>(
        &self,
        f: F,
    ) -> SignalHandlerId {
        unsafe extern "C" fn on_sourcebuffer_added_trampoline<
            F: Fn(&SourceBufferList) + Send + Sync + 'static,
        >(
            this: *mut ffi::GstSourceBufferList,
            f: glib::ffi::gpointer,
        ) {
            let f: &F = &*(f as *const F);
            f(&from_glib_borrow(this))
        }
        unsafe {
            let f: Box_<F> = Box_::new(f);
            connect_raw(
                self.as_ptr() as *mut _,
                c"on-sourcebuffer-added".as_ptr() as *const _,
                Some(std::mem::transmute::<*const (), unsafe extern "C" fn()>(
                    on_sourcebuffer_added_trampoline::<F> as *const (),
                )),
                Box_::into_raw(f),
            )
        }
    }

    #[doc(alias = "on-sourcebuffer-removed")]
    pub fn connect_on_sourcebuffer_removed<F: Fn(&Self) + Send + Sync + 'static>(
        &self,
        f: F,
    ) -> SignalHandlerId {
        unsafe extern "C" fn on_sourcebuffer_removed_trampoline<
            F: Fn(&SourceBufferList) + Send + Sync + 'static,
        >(
            this: *mut ffi::GstSourceBufferList,
            f: glib::ffi::gpointer,
        ) {
            let f: &F = &*(f as *const F);
            f(&from_glib_borrow(this))
        }
        unsafe {
            let f: Box_<F> = Box_::new(f);
            connect_raw(
                self.as_ptr() as *mut _,
                c"on-sourcebuffer-removed".as_ptr() as *const _,
                Some(std::mem::transmute::<*const (), unsafe extern "C" fn()>(
                    on_sourcebuffer_removed_trampoline::<F> as *const (),
                )),
                Box_::into_raw(f),
            )
        }
    }

    #[doc(alias = "length")]
    pub fn connect_length_notify<F: Fn(&Self) + Send + Sync + 'static>(
        &self,
        f: F,
    ) -> SignalHandlerId {
        unsafe extern "C" fn notify_length_trampoline<
            F: Fn(&SourceBufferList) + Send + Sync + 'static,
        >(
            this: *mut ffi::GstSourceBufferList,
            _param_spec: glib::ffi::gpointer,
            f: glib::ffi::gpointer,
        ) {
            let f: &F = &*(f as *const F);
            f(&from_glib_borrow(this))
        }
        unsafe {
            let f: Box_<F> = Box_::new(f);
            connect_raw(
                self.as_ptr() as *mut _,
                c"notify::length".as_ptr() as *const _,
                Some(std::mem::transmute::<*const (), unsafe extern "C" fn()>(
                    notify_length_trampoline::<F> as *const (),
                )),
                Box_::into_raw(f),
            )
        }
    }
}

unsafe impl Send for SourceBufferList {}
unsafe impl Sync for SourceBufferList {}
