// This file was generated by gir (https://github.com/gtk-rs/gir)
// from gir-files (https://github.com/gtk-rs/gir-files)
// from gst-gir-files (https://gitlab.freedesktop.org/gstreamer/gir-files-rs.git)
// DO NOT EDIT

use glib::translate::*;
use glib::value::FromValue;
use glib::value::FromValueOptional;
use glib::value::SetValue;
use glib::StaticType;
use glib::Type;
use std::fmt;

#[derive(Debug, Eq, PartialEq, Ord, PartialOrd, Hash, Clone, Copy)]
#[non_exhaustive]
#[doc(alias = "GstAudioChannelPosition")]
pub enum AudioChannelPosition {
    #[doc(alias = "GST_AUDIO_CHANNEL_POSITION_NONE")]
    None,
    #[doc(alias = "GST_AUDIO_CHANNEL_POSITION_MONO")]
    Mono,
    #[doc(alias = "GST_AUDIO_CHANNEL_POSITION_INVALID")]
    Invalid,
    #[doc(alias = "GST_AUDIO_CHANNEL_POSITION_FRONT_LEFT")]
    FrontLeft,
    #[doc(alias = "GST_AUDIO_CHANNEL_POSITION_FRONT_RIGHT")]
    FrontRight,
    #[doc(alias = "GST_AUDIO_CHANNEL_POSITION_FRONT_CENTER")]
    FrontCenter,
    #[doc(alias = "GST_AUDIO_CHANNEL_POSITION_LFE1")]
    Lfe1,
    #[doc(alias = "GST_AUDIO_CHANNEL_POSITION_REAR_LEFT")]
    RearLeft,
    #[doc(alias = "GST_AUDIO_CHANNEL_POSITION_REAR_RIGHT")]
    RearRight,
    #[doc(alias = "GST_AUDIO_CHANNEL_POSITION_FRONT_LEFT_OF_CENTER")]
    FrontLeftOfCenter,
    #[doc(alias = "GST_AUDIO_CHANNEL_POSITION_FRONT_RIGHT_OF_CENTER")]
    FrontRightOfCenter,
    #[doc(alias = "GST_AUDIO_CHANNEL_POSITION_REAR_CENTER")]
    RearCenter,
    #[doc(alias = "GST_AUDIO_CHANNEL_POSITION_LFE2")]
    Lfe2,
    #[doc(alias = "GST_AUDIO_CHANNEL_POSITION_SIDE_LEFT")]
    SideLeft,
    #[doc(alias = "GST_AUDIO_CHANNEL_POSITION_SIDE_RIGHT")]
    SideRight,
    #[doc(alias = "GST_AUDIO_CHANNEL_POSITION_TOP_FRONT_LEFT")]
    TopFrontLeft,
    #[doc(alias = "GST_AUDIO_CHANNEL_POSITION_TOP_FRONT_RIGHT")]
    TopFrontRight,
    #[doc(alias = "GST_AUDIO_CHANNEL_POSITION_TOP_FRONT_CENTER")]
    TopFrontCenter,
    #[doc(alias = "GST_AUDIO_CHANNEL_POSITION_TOP_CENTER")]
    TopCenter,
    #[doc(alias = "GST_AUDIO_CHANNEL_POSITION_TOP_REAR_LEFT")]
    TopRearLeft,
    #[doc(alias = "GST_AUDIO_CHANNEL_POSITION_TOP_REAR_RIGHT")]
    TopRearRight,
    #[doc(alias = "GST_AUDIO_CHANNEL_POSITION_TOP_SIDE_LEFT")]
    TopSideLeft,
    #[doc(alias = "GST_AUDIO_CHANNEL_POSITION_TOP_SIDE_RIGHT")]
    TopSideRight,
    #[doc(alias = "GST_AUDIO_CHANNEL_POSITION_TOP_REAR_CENTER")]
    TopRearCenter,
    #[doc(alias = "GST_AUDIO_CHANNEL_POSITION_BOTTOM_FRONT_CENTER")]
    BottomFrontCenter,
    #[doc(alias = "GST_AUDIO_CHANNEL_POSITION_BOTTOM_FRONT_LEFT")]
    BottomFrontLeft,
    #[doc(alias = "GST_AUDIO_CHANNEL_POSITION_BOTTOM_FRONT_RIGHT")]
    BottomFrontRight,
    #[doc(alias = "GST_AUDIO_CHANNEL_POSITION_WIDE_LEFT")]
    WideLeft,
    #[doc(alias = "GST_AUDIO_CHANNEL_POSITION_WIDE_RIGHT")]
    WideRight,
    #[doc(alias = "GST_AUDIO_CHANNEL_POSITION_SURROUND_LEFT")]
    SurroundLeft,
    #[doc(alias = "GST_AUDIO_CHANNEL_POSITION_SURROUND_RIGHT")]
    SurroundRight,
    #[doc(hidden)]
    __Unknown(i32),
}

#[doc(hidden)]
impl ToGlib for AudioChannelPosition {
    type GlibType = ffi::GstAudioChannelPosition;

    fn to_glib(&self) -> ffi::GstAudioChannelPosition {
        match *self {
            AudioChannelPosition::None => ffi::GST_AUDIO_CHANNEL_POSITION_NONE,
            AudioChannelPosition::Mono => ffi::GST_AUDIO_CHANNEL_POSITION_MONO,
            AudioChannelPosition::Invalid => ffi::GST_AUDIO_CHANNEL_POSITION_INVALID,
            AudioChannelPosition::FrontLeft => ffi::GST_AUDIO_CHANNEL_POSITION_FRONT_LEFT,
            AudioChannelPosition::FrontRight => ffi::GST_AUDIO_CHANNEL_POSITION_FRONT_RIGHT,
            AudioChannelPosition::FrontCenter => ffi::GST_AUDIO_CHANNEL_POSITION_FRONT_CENTER,
            AudioChannelPosition::Lfe1 => ffi::GST_AUDIO_CHANNEL_POSITION_LFE1,
            AudioChannelPosition::RearLeft => ffi::GST_AUDIO_CHANNEL_POSITION_REAR_LEFT,
            AudioChannelPosition::RearRight => ffi::GST_AUDIO_CHANNEL_POSITION_REAR_RIGHT,
            AudioChannelPosition::FrontLeftOfCenter => {
                ffi::GST_AUDIO_CHANNEL_POSITION_FRONT_LEFT_OF_CENTER
            }
            AudioChannelPosition::FrontRightOfCenter => {
                ffi::GST_AUDIO_CHANNEL_POSITION_FRONT_RIGHT_OF_CENTER
            }
            AudioChannelPosition::RearCenter => ffi::GST_AUDIO_CHANNEL_POSITION_REAR_CENTER,
            AudioChannelPosition::Lfe2 => ffi::GST_AUDIO_CHANNEL_POSITION_LFE2,
            AudioChannelPosition::SideLeft => ffi::GST_AUDIO_CHANNEL_POSITION_SIDE_LEFT,
            AudioChannelPosition::SideRight => ffi::GST_AUDIO_CHANNEL_POSITION_SIDE_RIGHT,
            AudioChannelPosition::TopFrontLeft => ffi::GST_AUDIO_CHANNEL_POSITION_TOP_FRONT_LEFT,
            AudioChannelPosition::TopFrontRight => ffi::GST_AUDIO_CHANNEL_POSITION_TOP_FRONT_RIGHT,
            AudioChannelPosition::TopFrontCenter => {
                ffi::GST_AUDIO_CHANNEL_POSITION_TOP_FRONT_CENTER
            }
            AudioChannelPosition::TopCenter => ffi::GST_AUDIO_CHANNEL_POSITION_TOP_CENTER,
            AudioChannelPosition::TopRearLeft => ffi::GST_AUDIO_CHANNEL_POSITION_TOP_REAR_LEFT,
            AudioChannelPosition::TopRearRight => ffi::GST_AUDIO_CHANNEL_POSITION_TOP_REAR_RIGHT,
            AudioChannelPosition::TopSideLeft => ffi::GST_AUDIO_CHANNEL_POSITION_TOP_SIDE_LEFT,
            AudioChannelPosition::TopSideRight => ffi::GST_AUDIO_CHANNEL_POSITION_TOP_SIDE_RIGHT,
            AudioChannelPosition::TopRearCenter => ffi::GST_AUDIO_CHANNEL_POSITION_TOP_REAR_CENTER,
            AudioChannelPosition::BottomFrontCenter => {
                ffi::GST_AUDIO_CHANNEL_POSITION_BOTTOM_FRONT_CENTER
            }
            AudioChannelPosition::BottomFrontLeft => {
                ffi::GST_AUDIO_CHANNEL_POSITION_BOTTOM_FRONT_LEFT
            }
            AudioChannelPosition::BottomFrontRight => {
                ffi::GST_AUDIO_CHANNEL_POSITION_BOTTOM_FRONT_RIGHT
            }
            AudioChannelPosition::WideLeft => ffi::GST_AUDIO_CHANNEL_POSITION_WIDE_LEFT,
            AudioChannelPosition::WideRight => ffi::GST_AUDIO_CHANNEL_POSITION_WIDE_RIGHT,
            AudioChannelPosition::SurroundLeft => ffi::GST_AUDIO_CHANNEL_POSITION_SURROUND_LEFT,
            AudioChannelPosition::SurroundRight => ffi::GST_AUDIO_CHANNEL_POSITION_SURROUND_RIGHT,
            AudioChannelPosition::__Unknown(value) => value,
        }
    }
}

#[doc(hidden)]
impl FromGlib<ffi::GstAudioChannelPosition> for AudioChannelPosition {
    unsafe fn from_glib(value: ffi::GstAudioChannelPosition) -> Self {
        skip_assert_initialized!();
        match value {
            -3 => AudioChannelPosition::None,
            -2 => AudioChannelPosition::Mono,
            -1 => AudioChannelPosition::Invalid,
            0 => AudioChannelPosition::FrontLeft,
            1 => AudioChannelPosition::FrontRight,
            2 => AudioChannelPosition::FrontCenter,
            3 => AudioChannelPosition::Lfe1,
            4 => AudioChannelPosition::RearLeft,
            5 => AudioChannelPosition::RearRight,
            6 => AudioChannelPosition::FrontLeftOfCenter,
            7 => AudioChannelPosition::FrontRightOfCenter,
            8 => AudioChannelPosition::RearCenter,
            9 => AudioChannelPosition::Lfe2,
            10 => AudioChannelPosition::SideLeft,
            11 => AudioChannelPosition::SideRight,
            12 => AudioChannelPosition::TopFrontLeft,
            13 => AudioChannelPosition::TopFrontRight,
            14 => AudioChannelPosition::TopFrontCenter,
            15 => AudioChannelPosition::TopCenter,
            16 => AudioChannelPosition::TopRearLeft,
            17 => AudioChannelPosition::TopRearRight,
            18 => AudioChannelPosition::TopSideLeft,
            19 => AudioChannelPosition::TopSideRight,
            20 => AudioChannelPosition::TopRearCenter,
            21 => AudioChannelPosition::BottomFrontCenter,
            22 => AudioChannelPosition::BottomFrontLeft,
            23 => AudioChannelPosition::BottomFrontRight,
            24 => AudioChannelPosition::WideLeft,
            25 => AudioChannelPosition::WideRight,
            26 => AudioChannelPosition::SurroundLeft,
            27 => AudioChannelPosition::SurroundRight,
            value => AudioChannelPosition::__Unknown(value),
        }
    }
}

impl StaticType for AudioChannelPosition {
    fn static_type() -> Type {
        unsafe { from_glib(ffi::gst_audio_channel_position_get_type()) }
    }
}

impl<'a> FromValueOptional<'a> for AudioChannelPosition {
    unsafe fn from_value_optional(value: &glib::Value) -> Option<Self> {
        Some(FromValue::from_value(value))
    }
}

impl<'a> FromValue<'a> for AudioChannelPosition {
    unsafe fn from_value(value: &glib::Value) -> Self {
        from_glib(glib::gobject_ffi::g_value_get_enum(value.to_glib_none().0))
    }
}

impl SetValue for AudioChannelPosition {
    unsafe fn set_value(value: &mut glib::Value, this: &Self) {
        glib::gobject_ffi::g_value_set_enum(value.to_glib_none_mut().0, this.to_glib())
    }
}

#[derive(Debug, Eq, PartialEq, Ord, PartialOrd, Hash, Clone, Copy)]
#[non_exhaustive]
#[doc(alias = "GstAudioDitherMethod")]
pub enum AudioDitherMethod {
    #[doc(alias = "GST_AUDIO_DITHER_NONE")]
    None,
    #[doc(alias = "GST_AUDIO_DITHER_RPDF")]
    Rpdf,
    #[doc(alias = "GST_AUDIO_DITHER_TPDF")]
    Tpdf,
    #[doc(alias = "GST_AUDIO_DITHER_TPDF_HF")]
    TpdfHf,
    #[doc(hidden)]
    __Unknown(i32),
}

#[doc(hidden)]
impl ToGlib for AudioDitherMethod {
    type GlibType = ffi::GstAudioDitherMethod;

    fn to_glib(&self) -> ffi::GstAudioDitherMethod {
        match *self {
            AudioDitherMethod::None => ffi::GST_AUDIO_DITHER_NONE,
            AudioDitherMethod::Rpdf => ffi::GST_AUDIO_DITHER_RPDF,
            AudioDitherMethod::Tpdf => ffi::GST_AUDIO_DITHER_TPDF,
            AudioDitherMethod::TpdfHf => ffi::GST_AUDIO_DITHER_TPDF_HF,
            AudioDitherMethod::__Unknown(value) => value,
        }
    }
}

#[doc(hidden)]
impl FromGlib<ffi::GstAudioDitherMethod> for AudioDitherMethod {
    unsafe fn from_glib(value: ffi::GstAudioDitherMethod) -> Self {
        skip_assert_initialized!();
        match value {
            0 => AudioDitherMethod::None,
            1 => AudioDitherMethod::Rpdf,
            2 => AudioDitherMethod::Tpdf,
            3 => AudioDitherMethod::TpdfHf,
            value => AudioDitherMethod::__Unknown(value),
        }
    }
}

impl StaticType for AudioDitherMethod {
    fn static_type() -> Type {
        unsafe { from_glib(ffi::gst_audio_dither_method_get_type()) }
    }
}

impl<'a> FromValueOptional<'a> for AudioDitherMethod {
    unsafe fn from_value_optional(value: &glib::Value) -> Option<Self> {
        Some(FromValue::from_value(value))
    }
}

impl<'a> FromValue<'a> for AudioDitherMethod {
    unsafe fn from_value(value: &glib::Value) -> Self {
        from_glib(glib::gobject_ffi::g_value_get_enum(value.to_glib_none().0))
    }
}

impl SetValue for AudioDitherMethod {
    unsafe fn set_value(value: &mut glib::Value, this: &Self) {
        glib::gobject_ffi::g_value_set_enum(value.to_glib_none_mut().0, this.to_glib())
    }
}

#[derive(Debug, Eq, PartialEq, Hash, Clone, Copy)]
#[non_exhaustive]
#[doc(alias = "GstAudioFormat")]
pub enum AudioFormat {
    #[doc(alias = "GST_AUDIO_FORMAT_UNKNOWN")]
    Unknown,
    #[doc(alias = "GST_AUDIO_FORMAT_ENCODED")]
    Encoded,
    #[doc(alias = "GST_AUDIO_FORMAT_S8")]
    S8,
    #[doc(alias = "GST_AUDIO_FORMAT_U8")]
    U8,
    #[doc(alias = "GST_AUDIO_FORMAT_S16LE")]
    S16le,
    #[doc(alias = "GST_AUDIO_FORMAT_S16BE")]
    S16be,
    #[doc(alias = "GST_AUDIO_FORMAT_U16LE")]
    U16le,
    #[doc(alias = "GST_AUDIO_FORMAT_U16BE")]
    U16be,
    #[doc(alias = "GST_AUDIO_FORMAT_S24_32LE")]
    S2432le,
    #[doc(alias = "GST_AUDIO_FORMAT_S24_32BE")]
    S2432be,
    #[doc(alias = "GST_AUDIO_FORMAT_U24_32LE")]
    U2432le,
    #[doc(alias = "GST_AUDIO_FORMAT_U24_32BE")]
    U2432be,
    #[doc(alias = "GST_AUDIO_FORMAT_S32LE")]
    S32le,
    #[doc(alias = "GST_AUDIO_FORMAT_S32BE")]
    S32be,
    #[doc(alias = "GST_AUDIO_FORMAT_U32LE")]
    U32le,
    #[doc(alias = "GST_AUDIO_FORMAT_U32BE")]
    U32be,
    #[doc(alias = "GST_AUDIO_FORMAT_S24LE")]
    S24le,
    #[doc(alias = "GST_AUDIO_FORMAT_S24BE")]
    S24be,
    #[doc(alias = "GST_AUDIO_FORMAT_U24LE")]
    U24le,
    #[doc(alias = "GST_AUDIO_FORMAT_U24BE")]
    U24be,
    #[doc(alias = "GST_AUDIO_FORMAT_S20LE")]
    S20le,
    #[doc(alias = "GST_AUDIO_FORMAT_S20BE")]
    S20be,
    #[doc(alias = "GST_AUDIO_FORMAT_U20LE")]
    U20le,
    #[doc(alias = "GST_AUDIO_FORMAT_U20BE")]
    U20be,
    #[doc(alias = "GST_AUDIO_FORMAT_S18LE")]
    S18le,
    #[doc(alias = "GST_AUDIO_FORMAT_S18BE")]
    S18be,
    #[doc(alias = "GST_AUDIO_FORMAT_U18LE")]
    U18le,
    #[doc(alias = "GST_AUDIO_FORMAT_U18BE")]
    U18be,
    #[doc(alias = "GST_AUDIO_FORMAT_F32LE")]
    F32le,
    #[doc(alias = "GST_AUDIO_FORMAT_F32BE")]
    F32be,
    #[doc(alias = "GST_AUDIO_FORMAT_F64LE")]
    F64le,
    #[doc(alias = "GST_AUDIO_FORMAT_F64BE")]
    F64be,
    #[doc(hidden)]
    __Unknown(i32),
}

impl AudioFormat {
    #[doc(alias = "gst_audio_format_from_string")]
    pub fn from_string(format: &str) -> AudioFormat {
        assert_initialized_main_thread!();
        unsafe { from_glib(ffi::gst_audio_format_from_string(format.to_glib_none().0)) }
    }
}

impl fmt::Display for AudioFormat {
    #[inline]
    fn fmt(&self, f: &mut fmt::Formatter) -> fmt::Result {
        f.write_str(&self.to_str())
    }
}

#[doc(hidden)]
impl ToGlib for AudioFormat {
    type GlibType = ffi::GstAudioFormat;

    fn to_glib(&self) -> ffi::GstAudioFormat {
        match *self {
            AudioFormat::Unknown => ffi::GST_AUDIO_FORMAT_UNKNOWN,
            AudioFormat::Encoded => ffi::GST_AUDIO_FORMAT_ENCODED,
            AudioFormat::S8 => ffi::GST_AUDIO_FORMAT_S8,
            AudioFormat::U8 => ffi::GST_AUDIO_FORMAT_U8,
            AudioFormat::S16le => ffi::GST_AUDIO_FORMAT_S16LE,
            AudioFormat::S16be => ffi::GST_AUDIO_FORMAT_S16BE,
            AudioFormat::U16le => ffi::GST_AUDIO_FORMAT_U16LE,
            AudioFormat::U16be => ffi::GST_AUDIO_FORMAT_U16BE,
            AudioFormat::S2432le => ffi::GST_AUDIO_FORMAT_S24_32LE,
            AudioFormat::S2432be => ffi::GST_AUDIO_FORMAT_S24_32BE,
            AudioFormat::U2432le => ffi::GST_AUDIO_FORMAT_U24_32LE,
            AudioFormat::U2432be => ffi::GST_AUDIO_FORMAT_U24_32BE,
            AudioFormat::S32le => ffi::GST_AUDIO_FORMAT_S32LE,
            AudioFormat::S32be => ffi::GST_AUDIO_FORMAT_S32BE,
            AudioFormat::U32le => ffi::GST_AUDIO_FORMAT_U32LE,
            AudioFormat::U32be => ffi::GST_AUDIO_FORMAT_U32BE,
            AudioFormat::S24le => ffi::GST_AUDIO_FORMAT_S24LE,
            AudioFormat::S24be => ffi::GST_AUDIO_FORMAT_S24BE,
            AudioFormat::U24le => ffi::GST_AUDIO_FORMAT_U24LE,
            AudioFormat::U24be => ffi::GST_AUDIO_FORMAT_U24BE,
            AudioFormat::S20le => ffi::GST_AUDIO_FORMAT_S20LE,
            AudioFormat::S20be => ffi::GST_AUDIO_FORMAT_S20BE,
            AudioFormat::U20le => ffi::GST_AUDIO_FORMAT_U20LE,
            AudioFormat::U20be => ffi::GST_AUDIO_FORMAT_U20BE,
            AudioFormat::S18le => ffi::GST_AUDIO_FORMAT_S18LE,
            AudioFormat::S18be => ffi::GST_AUDIO_FORMAT_S18BE,
            AudioFormat::U18le => ffi::GST_AUDIO_FORMAT_U18LE,
            AudioFormat::U18be => ffi::GST_AUDIO_FORMAT_U18BE,
            AudioFormat::F32le => ffi::GST_AUDIO_FORMAT_F32LE,
            AudioFormat::F32be => ffi::GST_AUDIO_FORMAT_F32BE,
            AudioFormat::F64le => ffi::GST_AUDIO_FORMAT_F64LE,
            AudioFormat::F64be => ffi::GST_AUDIO_FORMAT_F64BE,
            AudioFormat::__Unknown(value) => value,
        }
    }
}

#[doc(hidden)]
impl FromGlib<ffi::GstAudioFormat> for AudioFormat {
    unsafe fn from_glib(value: ffi::GstAudioFormat) -> Self {
        skip_assert_initialized!();
        match value {
            0 => AudioFormat::Unknown,
            1 => AudioFormat::Encoded,
            2 => AudioFormat::S8,
            3 => AudioFormat::U8,
            4 => AudioFormat::S16le,
            5 => AudioFormat::S16be,
            6 => AudioFormat::U16le,
            7 => AudioFormat::U16be,
            8 => AudioFormat::S2432le,
            9 => AudioFormat::S2432be,
            10 => AudioFormat::U2432le,
            11 => AudioFormat::U2432be,
            12 => AudioFormat::S32le,
            13 => AudioFormat::S32be,
            14 => AudioFormat::U32le,
            15 => AudioFormat::U32be,
            16 => AudioFormat::S24le,
            17 => AudioFormat::S24be,
            18 => AudioFormat::U24le,
            19 => AudioFormat::U24be,
            20 => AudioFormat::S20le,
            21 => AudioFormat::S20be,
            22 => AudioFormat::U20le,
            23 => AudioFormat::U20be,
            24 => AudioFormat::S18le,
            25 => AudioFormat::S18be,
            26 => AudioFormat::U18le,
            27 => AudioFormat::U18be,
            28 => AudioFormat::F32le,
            29 => AudioFormat::F32be,
            30 => AudioFormat::F64le,
            31 => AudioFormat::F64be,
            value => AudioFormat::__Unknown(value),
        }
    }
}

impl StaticType for AudioFormat {
    fn static_type() -> Type {
        unsafe { from_glib(ffi::gst_audio_format_get_type()) }
    }
}

impl<'a> FromValueOptional<'a> for AudioFormat {
    unsafe fn from_value_optional(value: &glib::Value) -> Option<Self> {
        Some(FromValue::from_value(value))
    }
}

impl<'a> FromValue<'a> for AudioFormat {
    unsafe fn from_value(value: &glib::Value) -> Self {
        from_glib(glib::gobject_ffi::g_value_get_enum(value.to_glib_none().0))
    }
}

impl SetValue for AudioFormat {
    unsafe fn set_value(value: &mut glib::Value, this: &Self) {
        glib::gobject_ffi::g_value_set_enum(value.to_glib_none_mut().0, this.to_glib())
    }
}

#[derive(Debug, Eq, PartialEq, Ord, PartialOrd, Hash, Clone, Copy)]
#[non_exhaustive]
#[doc(alias = "GstAudioLayout")]
pub enum AudioLayout {
    #[doc(alias = "GST_AUDIO_LAYOUT_INTERLEAVED")]
    Interleaved,
    #[doc(alias = "GST_AUDIO_LAYOUT_NON_INTERLEAVED")]
    NonInterleaved,
    #[doc(hidden)]
    __Unknown(i32),
}

#[doc(hidden)]
impl ToGlib for AudioLayout {
    type GlibType = ffi::GstAudioLayout;

    fn to_glib(&self) -> ffi::GstAudioLayout {
        match *self {
            AudioLayout::Interleaved => ffi::GST_AUDIO_LAYOUT_INTERLEAVED,
            AudioLayout::NonInterleaved => ffi::GST_AUDIO_LAYOUT_NON_INTERLEAVED,
            AudioLayout::__Unknown(value) => value,
        }
    }
}

#[doc(hidden)]
impl FromGlib<ffi::GstAudioLayout> for AudioLayout {
    unsafe fn from_glib(value: ffi::GstAudioLayout) -> Self {
        skip_assert_initialized!();
        match value {
            0 => AudioLayout::Interleaved,
            1 => AudioLayout::NonInterleaved,
            value => AudioLayout::__Unknown(value),
        }
    }
}

impl StaticType for AudioLayout {
    fn static_type() -> Type {
        unsafe { from_glib(ffi::gst_audio_layout_get_type()) }
    }
}

impl<'a> FromValueOptional<'a> for AudioLayout {
    unsafe fn from_value_optional(value: &glib::Value) -> Option<Self> {
        Some(FromValue::from_value(value))
    }
}

impl<'a> FromValue<'a> for AudioLayout {
    unsafe fn from_value(value: &glib::Value) -> Self {
        from_glib(glib::gobject_ffi::g_value_get_enum(value.to_glib_none().0))
    }
}

impl SetValue for AudioLayout {
    unsafe fn set_value(value: &mut glib::Value, this: &Self) {
        glib::gobject_ffi::g_value_set_enum(value.to_glib_none_mut().0, this.to_glib())
    }
}

#[derive(Debug, Eq, PartialEq, Ord, PartialOrd, Hash, Clone, Copy)]
#[non_exhaustive]
#[doc(alias = "GstAudioNoiseShapingMethod")]
pub enum AudioNoiseShapingMethod {
    #[doc(alias = "GST_AUDIO_NOISE_SHAPING_NONE")]
    None,
    #[doc(alias = "GST_AUDIO_NOISE_SHAPING_ERROR_FEEDBACK")]
    ErrorFeedback,
    #[doc(alias = "GST_AUDIO_NOISE_SHAPING_SIMPLE")]
    Simple,
    #[doc(alias = "GST_AUDIO_NOISE_SHAPING_MEDIUM")]
    Medium,
    #[doc(alias = "GST_AUDIO_NOISE_SHAPING_HIGH")]
    High,
    #[doc(hidden)]
    __Unknown(i32),
}

#[doc(hidden)]
impl ToGlib for AudioNoiseShapingMethod {
    type GlibType = ffi::GstAudioNoiseShapingMethod;

    fn to_glib(&self) -> ffi::GstAudioNoiseShapingMethod {
        match *self {
            AudioNoiseShapingMethod::None => ffi::GST_AUDIO_NOISE_SHAPING_NONE,
            AudioNoiseShapingMethod::ErrorFeedback => ffi::GST_AUDIO_NOISE_SHAPING_ERROR_FEEDBACK,
            AudioNoiseShapingMethod::Simple => ffi::GST_AUDIO_NOISE_SHAPING_SIMPLE,
            AudioNoiseShapingMethod::Medium => ffi::GST_AUDIO_NOISE_SHAPING_MEDIUM,
            AudioNoiseShapingMethod::High => ffi::GST_AUDIO_NOISE_SHAPING_HIGH,
            AudioNoiseShapingMethod::__Unknown(value) => value,
        }
    }
}

#[doc(hidden)]
impl FromGlib<ffi::GstAudioNoiseShapingMethod> for AudioNoiseShapingMethod {
    unsafe fn from_glib(value: ffi::GstAudioNoiseShapingMethod) -> Self {
        skip_assert_initialized!();
        match value {
            0 => AudioNoiseShapingMethod::None,
            1 => AudioNoiseShapingMethod::ErrorFeedback,
            2 => AudioNoiseShapingMethod::Simple,
            3 => AudioNoiseShapingMethod::Medium,
            4 => AudioNoiseShapingMethod::High,
            value => AudioNoiseShapingMethod::__Unknown(value),
        }
    }
}

impl StaticType for AudioNoiseShapingMethod {
    fn static_type() -> Type {
        unsafe { from_glib(ffi::gst_audio_noise_shaping_method_get_type()) }
    }
}

impl<'a> FromValueOptional<'a> for AudioNoiseShapingMethod {
    unsafe fn from_value_optional(value: &glib::Value) -> Option<Self> {
        Some(FromValue::from_value(value))
    }
}

impl<'a> FromValue<'a> for AudioNoiseShapingMethod {
    unsafe fn from_value(value: &glib::Value) -> Self {
        from_glib(glib::gobject_ffi::g_value_get_enum(value.to_glib_none().0))
    }
}

impl SetValue for AudioNoiseShapingMethod {
    unsafe fn set_value(value: &mut glib::Value, this: &Self) {
        glib::gobject_ffi::g_value_set_enum(value.to_glib_none_mut().0, this.to_glib())
    }
}

#[cfg(any(feature = "v1_10", feature = "dox"))]
#[cfg_attr(feature = "dox", doc(cfg(feature = "v1_10")))]
#[derive(Debug, Eq, PartialEq, Ord, PartialOrd, Hash, Clone, Copy)]
#[non_exhaustive]
#[doc(alias = "GstAudioResamplerMethod")]
pub enum AudioResamplerMethod {
    #[doc(alias = "GST_AUDIO_RESAMPLER_METHOD_NEAREST")]
    Nearest,
    #[doc(alias = "GST_AUDIO_RESAMPLER_METHOD_LINEAR")]
    Linear,
    #[doc(alias = "GST_AUDIO_RESAMPLER_METHOD_CUBIC")]
    Cubic,
    #[doc(alias = "GST_AUDIO_RESAMPLER_METHOD_BLACKMAN_NUTTALL")]
    BlackmanNuttall,
    #[doc(alias = "GST_AUDIO_RESAMPLER_METHOD_KAISER")]
    Kaiser,
    #[doc(hidden)]
    __Unknown(i32),
}

#[cfg(any(feature = "v1_10", feature = "dox"))]
#[cfg_attr(feature = "dox", doc(cfg(feature = "v1_10")))]
#[doc(hidden)]
impl ToGlib for AudioResamplerMethod {
    type GlibType = ffi::GstAudioResamplerMethod;

    fn to_glib(&self) -> ffi::GstAudioResamplerMethod {
        match *self {
            AudioResamplerMethod::Nearest => ffi::GST_AUDIO_RESAMPLER_METHOD_NEAREST,
            AudioResamplerMethod::Linear => ffi::GST_AUDIO_RESAMPLER_METHOD_LINEAR,
            AudioResamplerMethod::Cubic => ffi::GST_AUDIO_RESAMPLER_METHOD_CUBIC,
            AudioResamplerMethod::BlackmanNuttall => {
                ffi::GST_AUDIO_RESAMPLER_METHOD_BLACKMAN_NUTTALL
            }
            AudioResamplerMethod::Kaiser => ffi::GST_AUDIO_RESAMPLER_METHOD_KAISER,
            AudioResamplerMethod::__Unknown(value) => value,
        }
    }
}

#[cfg(any(feature = "v1_10", feature = "dox"))]
#[cfg_attr(feature = "dox", doc(cfg(feature = "v1_10")))]
#[doc(hidden)]
impl FromGlib<ffi::GstAudioResamplerMethod> for AudioResamplerMethod {
    unsafe fn from_glib(value: ffi::GstAudioResamplerMethod) -> Self {
        skip_assert_initialized!();
        match value {
            0 => AudioResamplerMethod::Nearest,
            1 => AudioResamplerMethod::Linear,
            2 => AudioResamplerMethod::Cubic,
            3 => AudioResamplerMethod::BlackmanNuttall,
            4 => AudioResamplerMethod::Kaiser,
            value => AudioResamplerMethod::__Unknown(value),
        }
    }
}

#[cfg(any(feature = "v1_10", feature = "dox"))]
#[cfg_attr(feature = "dox", doc(cfg(feature = "v1_10")))]
impl StaticType for AudioResamplerMethod {
    fn static_type() -> Type {
        unsafe { from_glib(ffi::gst_audio_resampler_method_get_type()) }
    }
}

#[cfg(any(feature = "v1_10", feature = "dox"))]
#[cfg_attr(feature = "dox", doc(cfg(feature = "v1_10")))]
impl<'a> FromValueOptional<'a> for AudioResamplerMethod {
    unsafe fn from_value_optional(value: &glib::Value) -> Option<Self> {
        Some(FromValue::from_value(value))
    }
}

#[cfg(any(feature = "v1_10", feature = "dox"))]
#[cfg_attr(feature = "dox", doc(cfg(feature = "v1_10")))]
impl<'a> FromValue<'a> for AudioResamplerMethod {
    unsafe fn from_value(value: &glib::Value) -> Self {
        from_glib(glib::gobject_ffi::g_value_get_enum(value.to_glib_none().0))
    }
}

#[cfg(any(feature = "v1_10", feature = "dox"))]
#[cfg_attr(feature = "dox", doc(cfg(feature = "v1_10")))]
impl SetValue for AudioResamplerMethod {
    unsafe fn set_value(value: &mut glib::Value, this: &Self) {
        glib::gobject_ffi::g_value_set_enum(value.to_glib_none_mut().0, this.to_glib())
    }
}

#[derive(Debug, Eq, PartialEq, Ord, PartialOrd, Hash, Clone, Copy)]
#[non_exhaustive]
#[doc(alias = "GstAudioRingBufferFormatType")]
pub enum AudioRingBufferFormatType {
    #[doc(alias = "GST_AUDIO_RING_BUFFER_FORMAT_TYPE_RAW")]
    Raw,
    #[doc(alias = "GST_AUDIO_RING_BUFFER_FORMAT_TYPE_MU_LAW")]
    MuLaw,
    #[doc(alias = "GST_AUDIO_RING_BUFFER_FORMAT_TYPE_A_LAW")]
    ALaw,
    #[doc(alias = "GST_AUDIO_RING_BUFFER_FORMAT_TYPE_IMA_ADPCM")]
    ImaAdpcm,
    #[doc(alias = "GST_AUDIO_RING_BUFFER_FORMAT_TYPE_MPEG")]
    Mpeg,
    #[doc(alias = "GST_AUDIO_RING_BUFFER_FORMAT_TYPE_GSM")]
    Gsm,
    #[doc(alias = "GST_AUDIO_RING_BUFFER_FORMAT_TYPE_IEC958")]
    Iec958,
    #[doc(alias = "GST_AUDIO_RING_BUFFER_FORMAT_TYPE_AC3")]
    Ac3,
    #[doc(alias = "GST_AUDIO_RING_BUFFER_FORMAT_TYPE_EAC3")]
    Eac3,
    #[doc(alias = "GST_AUDIO_RING_BUFFER_FORMAT_TYPE_DTS")]
    Dts,
    #[doc(alias = "GST_AUDIO_RING_BUFFER_FORMAT_TYPE_MPEG2_AAC")]
    Mpeg2Aac,
    #[doc(alias = "GST_AUDIO_RING_BUFFER_FORMAT_TYPE_MPEG4_AAC")]
    Mpeg4Aac,
    #[cfg(any(feature = "v1_12", feature = "dox"))]
    #[cfg_attr(feature = "dox", doc(cfg(feature = "v1_12")))]
    #[doc(alias = "GST_AUDIO_RING_BUFFER_FORMAT_TYPE_MPEG2_AAC_RAW")]
    Mpeg2AacRaw,
    #[cfg(any(feature = "v1_12", feature = "dox"))]
    #[cfg_attr(feature = "dox", doc(cfg(feature = "v1_12")))]
    #[doc(alias = "GST_AUDIO_RING_BUFFER_FORMAT_TYPE_MPEG4_AAC_RAW")]
    Mpeg4AacRaw,
    #[cfg(any(feature = "v1_12", feature = "dox"))]
    #[cfg_attr(feature = "dox", doc(cfg(feature = "v1_12")))]
    #[doc(alias = "GST_AUDIO_RING_BUFFER_FORMAT_TYPE_FLAC")]
    Flac,
    #[doc(hidden)]
    __Unknown(i32),
}

#[doc(hidden)]
impl ToGlib for AudioRingBufferFormatType {
    type GlibType = ffi::GstAudioRingBufferFormatType;

    fn to_glib(&self) -> ffi::GstAudioRingBufferFormatType {
        match *self {
            AudioRingBufferFormatType::Raw => ffi::GST_AUDIO_RING_BUFFER_FORMAT_TYPE_RAW,
            AudioRingBufferFormatType::MuLaw => ffi::GST_AUDIO_RING_BUFFER_FORMAT_TYPE_MU_LAW,
            AudioRingBufferFormatType::ALaw => ffi::GST_AUDIO_RING_BUFFER_FORMAT_TYPE_A_LAW,
            AudioRingBufferFormatType::ImaAdpcm => ffi::GST_AUDIO_RING_BUFFER_FORMAT_TYPE_IMA_ADPCM,
            AudioRingBufferFormatType::Mpeg => ffi::GST_AUDIO_RING_BUFFER_FORMAT_TYPE_MPEG,
            AudioRingBufferFormatType::Gsm => ffi::GST_AUDIO_RING_BUFFER_FORMAT_TYPE_GSM,
            AudioRingBufferFormatType::Iec958 => ffi::GST_AUDIO_RING_BUFFER_FORMAT_TYPE_IEC958,
            AudioRingBufferFormatType::Ac3 => ffi::GST_AUDIO_RING_BUFFER_FORMAT_TYPE_AC3,
            AudioRingBufferFormatType::Eac3 => ffi::GST_AUDIO_RING_BUFFER_FORMAT_TYPE_EAC3,
            AudioRingBufferFormatType::Dts => ffi::GST_AUDIO_RING_BUFFER_FORMAT_TYPE_DTS,
            AudioRingBufferFormatType::Mpeg2Aac => ffi::GST_AUDIO_RING_BUFFER_FORMAT_TYPE_MPEG2_AAC,
            AudioRingBufferFormatType::Mpeg4Aac => ffi::GST_AUDIO_RING_BUFFER_FORMAT_TYPE_MPEG4_AAC,
            #[cfg(any(feature = "v1_12", feature = "dox"))]
            AudioRingBufferFormatType::Mpeg2AacRaw => {
                ffi::GST_AUDIO_RING_BUFFER_FORMAT_TYPE_MPEG2_AAC_RAW
            }
            #[cfg(any(feature = "v1_12", feature = "dox"))]
            AudioRingBufferFormatType::Mpeg4AacRaw => {
                ffi::GST_AUDIO_RING_BUFFER_FORMAT_TYPE_MPEG4_AAC_RAW
            }
            #[cfg(any(feature = "v1_12", feature = "dox"))]
            AudioRingBufferFormatType::Flac => ffi::GST_AUDIO_RING_BUFFER_FORMAT_TYPE_FLAC,
            AudioRingBufferFormatType::__Unknown(value) => value,
        }
    }
}

#[doc(hidden)]
impl FromGlib<ffi::GstAudioRingBufferFormatType> for AudioRingBufferFormatType {
    unsafe fn from_glib(value: ffi::GstAudioRingBufferFormatType) -> Self {
        skip_assert_initialized!();
        match value {
            0 => AudioRingBufferFormatType::Raw,
            1 => AudioRingBufferFormatType::MuLaw,
            2 => AudioRingBufferFormatType::ALaw,
            3 => AudioRingBufferFormatType::ImaAdpcm,
            4 => AudioRingBufferFormatType::Mpeg,
            5 => AudioRingBufferFormatType::Gsm,
            6 => AudioRingBufferFormatType::Iec958,
            7 => AudioRingBufferFormatType::Ac3,
            8 => AudioRingBufferFormatType::Eac3,
            9 => AudioRingBufferFormatType::Dts,
            10 => AudioRingBufferFormatType::Mpeg2Aac,
            11 => AudioRingBufferFormatType::Mpeg4Aac,
            #[cfg(any(feature = "v1_12", feature = "dox"))]
            12 => AudioRingBufferFormatType::Mpeg2AacRaw,
            #[cfg(any(feature = "v1_12", feature = "dox"))]
            13 => AudioRingBufferFormatType::Mpeg4AacRaw,
            #[cfg(any(feature = "v1_12", feature = "dox"))]
            14 => AudioRingBufferFormatType::Flac,
            value => AudioRingBufferFormatType::__Unknown(value),
        }
    }
}

impl StaticType for AudioRingBufferFormatType {
    fn static_type() -> Type {
        unsafe { from_glib(ffi::gst_audio_ring_buffer_format_type_get_type()) }
    }
}

impl<'a> FromValueOptional<'a> for AudioRingBufferFormatType {
    unsafe fn from_value_optional(value: &glib::Value) -> Option<Self> {
        Some(FromValue::from_value(value))
    }
}

impl<'a> FromValue<'a> for AudioRingBufferFormatType {
    unsafe fn from_value(value: &glib::Value) -> Self {
        from_glib(glib::gobject_ffi::g_value_get_enum(value.to_glib_none().0))
    }
}

impl SetValue for AudioRingBufferFormatType {
    unsafe fn set_value(value: &mut glib::Value, this: &Self) {
        glib::gobject_ffi::g_value_set_enum(value.to_glib_none_mut().0, this.to_glib())
    }
}

#[derive(Debug, Eq, PartialEq, Ord, PartialOrd, Hash, Clone, Copy)]
#[non_exhaustive]
#[doc(alias = "GstStreamVolumeFormat")]
pub enum StreamVolumeFormat {
    #[doc(alias = "GST_STREAM_VOLUME_FORMAT_LINEAR")]
    Linear,
    #[doc(alias = "GST_STREAM_VOLUME_FORMAT_CUBIC")]
    Cubic,
    #[doc(alias = "GST_STREAM_VOLUME_FORMAT_DB")]
    Db,
    #[doc(hidden)]
    __Unknown(i32),
}

#[doc(hidden)]
impl ToGlib for StreamVolumeFormat {
    type GlibType = ffi::GstStreamVolumeFormat;

    fn to_glib(&self) -> ffi::GstStreamVolumeFormat {
        match *self {
            StreamVolumeFormat::Linear => ffi::GST_STREAM_VOLUME_FORMAT_LINEAR,
            StreamVolumeFormat::Cubic => ffi::GST_STREAM_VOLUME_FORMAT_CUBIC,
            StreamVolumeFormat::Db => ffi::GST_STREAM_VOLUME_FORMAT_DB,
            StreamVolumeFormat::__Unknown(value) => value,
        }
    }
}

#[doc(hidden)]
impl FromGlib<ffi::GstStreamVolumeFormat> for StreamVolumeFormat {
    unsafe fn from_glib(value: ffi::GstStreamVolumeFormat) -> Self {
        skip_assert_initialized!();
        match value {
            0 => StreamVolumeFormat::Linear,
            1 => StreamVolumeFormat::Cubic,
            2 => StreamVolumeFormat::Db,
            value => StreamVolumeFormat::__Unknown(value),
        }
    }
}
