// This file was generated by gir (https://github.com/gtk-rs/gir)
// from gir-files (https://github.com/gtk-rs/gir-files)
// from gst-gir-files (https://gitlab.freedesktop.org/gstreamer/gir-files-rs.git)
// DO NOT EDIT

use crate::ffi;
use glib::{
    prelude::*,
    signal::{connect_raw, SignalHandlerId},
    translate::*,
};
use std::boxed::Box as Box_;

glib::wrapper! {
    #[doc(alias = "GstAudioAggregator")]
    pub struct AudioAggregator(Object<ffi::GstAudioAggregator, ffi::GstAudioAggregatorClass>) @extends gst_base::Aggregator, gst::Element, gst::Object;

    match fn {
        type_ => || ffi::gst_audio_aggregator_get_type(),
    }
}

impl AudioAggregator {
    pub const NONE: Option<&'static AudioAggregator> = None;
}

unsafe impl Send for AudioAggregator {}
unsafe impl Sync for AudioAggregator {}

mod sealed {
    pub trait Sealed {}
    impl<T: super::IsA<super::AudioAggregator>> Sealed for T {}
}

pub trait AudioAggregatorExt: IsA<AudioAggregator> + sealed::Sealed + 'static {
    #[doc(alias = "alignment-threshold")]
    fn alignment_threshold(&self) -> u64 {
        ObjectExt::property(self.as_ref(), "alignment-threshold")
    }

    #[doc(alias = "alignment-threshold")]
    fn set_alignment_threshold(&self, alignment_threshold: u64) {
        ObjectExt::set_property(self.as_ref(), "alignment-threshold", alignment_threshold)
    }

    #[doc(alias = "discont-wait")]
    fn discont_wait(&self) -> u64 {
        ObjectExt::property(self.as_ref(), "discont-wait")
    }

    #[doc(alias = "discont-wait")]
    fn set_discont_wait(&self, discont_wait: u64) {
        ObjectExt::set_property(self.as_ref(), "discont-wait", discont_wait)
    }

    #[doc(alias = "output-buffer-duration")]
    fn output_buffer_duration(&self) -> u64 {
        ObjectExt::property(self.as_ref(), "output-buffer-duration")
    }

    #[doc(alias = "output-buffer-duration")]
    fn set_output_buffer_duration(&self, output_buffer_duration: u64) {
        ObjectExt::set_property(
            self.as_ref(),
            "output-buffer-duration",
            output_buffer_duration,
        )
    }

    #[doc(alias = "alignment-threshold")]
    fn connect_alignment_threshold_notify<F: Fn(&Self) + Send + Sync + 'static>(
        &self,
        f: F,
    ) -> SignalHandlerId {
        unsafe extern "C" fn notify_alignment_threshold_trampoline<
            P: IsA<AudioAggregator>,
            F: Fn(&P) + Send + Sync + 'static,
        >(
            this: *mut ffi::GstAudioAggregator,
            _param_spec: glib::ffi::gpointer,
            f: glib::ffi::gpointer,
        ) {
            let f: &F = &*(f as *const F);
            f(AudioAggregator::from_glib_borrow(this).unsafe_cast_ref())
        }
        unsafe {
            let f: Box_<F> = Box_::new(f);
            connect_raw(
                self.as_ptr() as *mut _,
                b"notify::alignment-threshold\0".as_ptr() as *const _,
                Some(std::mem::transmute::<*const (), unsafe extern "C" fn()>(
                    notify_alignment_threshold_trampoline::<Self, F> as *const (),
                )),
                Box_::into_raw(f),
            )
        }
    }

    #[doc(alias = "discont-wait")]
    fn connect_discont_wait_notify<F: Fn(&Self) + Send + Sync + 'static>(
        &self,
        f: F,
    ) -> SignalHandlerId {
        unsafe extern "C" fn notify_discont_wait_trampoline<
            P: IsA<AudioAggregator>,
            F: Fn(&P) + Send + Sync + 'static,
        >(
            this: *mut ffi::GstAudioAggregator,
            _param_spec: glib::ffi::gpointer,
            f: glib::ffi::gpointer,
        ) {
            let f: &F = &*(f as *const F);
            f(AudioAggregator::from_glib_borrow(this).unsafe_cast_ref())
        }
        unsafe {
            let f: Box_<F> = Box_::new(f);
            connect_raw(
                self.as_ptr() as *mut _,
                b"notify::discont-wait\0".as_ptr() as *const _,
                Some(std::mem::transmute::<*const (), unsafe extern "C" fn()>(
                    notify_discont_wait_trampoline::<Self, F> as *const (),
                )),
                Box_::into_raw(f),
            )
        }
    }

    #[doc(alias = "output-buffer-duration")]
    fn connect_output_buffer_duration_notify<F: Fn(&Self) + Send + Sync + 'static>(
        &self,
        f: F,
    ) -> SignalHandlerId {
        unsafe extern "C" fn notify_output_buffer_duration_trampoline<
            P: IsA<AudioAggregator>,
            F: Fn(&P) + Send + Sync + 'static,
        >(
            this: *mut ffi::GstAudioAggregator,
            _param_spec: glib::ffi::gpointer,
            f: glib::ffi::gpointer,
        ) {
            let f: &F = &*(f as *const F);
            f(AudioAggregator::from_glib_borrow(this).unsafe_cast_ref())
        }
        unsafe {
            let f: Box_<F> = Box_::new(f);
            connect_raw(
                self.as_ptr() as *mut _,
                b"notify::output-buffer-duration\0".as_ptr() as *const _,
                Some(std::mem::transmute::<*const (), unsafe extern "C" fn()>(
                    notify_output_buffer_duration_trampoline::<Self, F> as *const (),
                )),
                Box_::into_raw(f),
            )
        }
    }
}

impl<O: IsA<AudioAggregator>> AudioAggregatorExt for O {}
