// This file was generated by gir (https://github.com/gtk-rs/gir)
// from gir-files (https://github.com/gtk-rs/gir-files)
// from gst-gir-files (https://gitlab.freedesktop.org/gstreamer/gir-files-rs.git)
// DO NOT EDIT

use crate::Scenario;
use glib::translate::*;

glib::wrapper! {
    #[derive(Debug, PartialEq, Eq, PartialOrd, Ord, Hash)]
    pub struct Action(Shared<ffi::GstValidateAction>);

    match fn {
        ref => |ptr| ffi::gst_validate_action_ref(ptr),
        unref => |ptr| ffi::gst_validate_action_unref(ptr),
        type_ => || ffi::gst_validate_action_get_type(),
    }
}

impl Action {
    //#[doc(alias = "gst_validate_action_new")]
    //pub fn new(scenario: Option<&impl IsA<Scenario>>, action_type: /*Ignored*/&mut ActionType, structure: &mut gst::Structure, add_to_lists: bool) -> Action {
    //    unsafe { TODO: call ffi:gst_validate_action_new() }
    //}

    #[doc(alias = "gst_validate_action_get_scenario")]
    #[doc(alias = "get_scenario")]
    pub fn scenario(&self) -> Option<Scenario> {
        unsafe { from_glib_full(ffi::gst_validate_action_get_scenario(self.to_glib_none().0)) }
    }

    #[doc(alias = "gst_validate_action_set_done")]
    pub fn set_done(&self) {
        unsafe {
            ffi::gst_validate_action_set_done(self.to_glib_none().0);
        }
    }

    //#[doc(alias = "gst_validate_action_get_clocktime")]
    //#[doc(alias = "get_clocktime")]
    //pub fn clocktime(scenario: &impl IsA<Scenario>, action: &Action, name: &str) -> Option</*Ignored*/gst::ClockTime> {
    //    unsafe { TODO: call ffi:gst_validate_action_get_clocktime() }
    //}
}

unsafe impl Send for Action {}
unsafe impl Sync for Action {}
