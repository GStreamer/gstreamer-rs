// This file was generated by gir (https://github.com/gtk-rs/gir)
// from gir-files (https://github.com/gtk-rs/gir-files)
// from gst-gir-files (https://gitlab.freedesktop.org/gstreamer/gir-files-rs.git)
// DO NOT EDIT

use bitflags::bitflags;
use glib::translate::*;
use glib::value::FromValue;
use glib::value::ToValue;
use glib::StaticType;
use glib::Type;

bitflags! {
    pub struct RTSPEvent: u32 {
        const READ = 1;
        const WRITE = 2;
    }
}

#[doc(hidden)]
impl IntoGlib for RTSPEvent {
    type GlibType = ffi::GstRTSPEvent;

    fn into_glib(self) -> ffi::GstRTSPEvent {
        self.bits()
    }
}

#[doc(hidden)]
impl FromGlib<ffi::GstRTSPEvent> for RTSPEvent {
    unsafe fn from_glib(value: ffi::GstRTSPEvent) -> Self {
        skip_assert_initialized!();
        Self::from_bits_truncate(value)
    }
}

impl StaticType for RTSPEvent {
    fn static_type() -> Type {
        unsafe { from_glib(ffi::gst_rtsp_event_get_type()) }
    }
}

impl glib::value::ValueType for RTSPEvent {
    type Type = Self;
}

unsafe impl<'a> FromValue<'a> for RTSPEvent {
    type Checker = glib::value::GenericValueTypeChecker<Self>;

    unsafe fn from_value(value: &'a glib::Value) -> Self {
        skip_assert_initialized!();
        from_glib(glib::gobject_ffi::g_value_get_flags(value.to_glib_none().0))
    }
}

impl ToValue for RTSPEvent {
    fn to_value(&self) -> glib::Value {
        let mut value = glib::Value::for_value_type::<Self>();
        unsafe {
            glib::gobject_ffi::g_value_set_flags(value.to_glib_none_mut().0, self.into_glib());
        }
        value
    }

    fn value_type(&self) -> glib::Type {
        Self::static_type()
    }
}

bitflags! {
    pub struct RTSPLowerTrans: u32 {
        const UDP = 1;
        const UDP_MCAST = 2;
        const TCP = 4;
        const HTTP = 16;
        const TLS = 32;
    }
}

#[doc(hidden)]
impl IntoGlib for RTSPLowerTrans {
    type GlibType = ffi::GstRTSPLowerTrans;

    fn into_glib(self) -> ffi::GstRTSPLowerTrans {
        self.bits()
    }
}

#[doc(hidden)]
impl FromGlib<ffi::GstRTSPLowerTrans> for RTSPLowerTrans {
    unsafe fn from_glib(value: ffi::GstRTSPLowerTrans) -> Self {
        skip_assert_initialized!();
        Self::from_bits_truncate(value)
    }
}

impl StaticType for RTSPLowerTrans {
    fn static_type() -> Type {
        unsafe { from_glib(ffi::gst_rtsp_lower_trans_get_type()) }
    }
}

impl glib::value::ValueType for RTSPLowerTrans {
    type Type = Self;
}

unsafe impl<'a> FromValue<'a> for RTSPLowerTrans {
    type Checker = glib::value::GenericValueTypeChecker<Self>;

    unsafe fn from_value(value: &'a glib::Value) -> Self {
        skip_assert_initialized!();
        from_glib(glib::gobject_ffi::g_value_get_flags(value.to_glib_none().0))
    }
}

impl ToValue for RTSPLowerTrans {
    fn to_value(&self) -> glib::Value {
        let mut value = glib::Value::for_value_type::<Self>();
        unsafe {
            glib::gobject_ffi::g_value_set_flags(value.to_glib_none_mut().0, self.into_glib());
        }
        value
    }

    fn value_type(&self) -> glib::Type {
        Self::static_type()
    }
}

bitflags! {
    pub struct RTSPMethod: u32 {
        const DESCRIBE = 1;
        const ANNOUNCE = 2;
        const GET_PARAMETER = 4;
        const OPTIONS = 8;
        const PAUSE = 16;
        const PLAY = 32;
        const RECORD = 64;
        const REDIRECT = 128;
        const SETUP = 256;
        const SET_PARAMETER = 512;
        const TEARDOWN = 1024;
        const GET = 2048;
        const POST = 4096;
    }
}

impl RTSPMethod {
    #[doc(alias = "gst_rtsp_method_as_text")]
    pub fn as_text(self) -> Option<glib::GString> {
        assert_initialized_main_thread!();
        unsafe { from_glib_none(ffi::gst_rtsp_method_as_text(self.into_glib())) }
    }
}

#[doc(hidden)]
impl IntoGlib for RTSPMethod {
    type GlibType = ffi::GstRTSPMethod;

    fn into_glib(self) -> ffi::GstRTSPMethod {
        self.bits()
    }
}

#[doc(hidden)]
impl FromGlib<ffi::GstRTSPMethod> for RTSPMethod {
    unsafe fn from_glib(value: ffi::GstRTSPMethod) -> Self {
        skip_assert_initialized!();
        Self::from_bits_truncate(value)
    }
}

impl StaticType for RTSPMethod {
    fn static_type() -> Type {
        unsafe { from_glib(ffi::gst_rtsp_method_get_type()) }
    }
}

impl glib::value::ValueType for RTSPMethod {
    type Type = Self;
}

unsafe impl<'a> FromValue<'a> for RTSPMethod {
    type Checker = glib::value::GenericValueTypeChecker<Self>;

    unsafe fn from_value(value: &'a glib::Value) -> Self {
        skip_assert_initialized!();
        from_glib(glib::gobject_ffi::g_value_get_flags(value.to_glib_none().0))
    }
}

impl ToValue for RTSPMethod {
    fn to_value(&self) -> glib::Value {
        let mut value = glib::Value::for_value_type::<Self>();
        unsafe {
            glib::gobject_ffi::g_value_set_flags(value.to_glib_none_mut().0, self.into_glib());
        }
        value
    }

    fn value_type(&self) -> glib::Type {
        Self::static_type()
    }
}

bitflags! {
    pub struct RTSPProfile: u32 {
        const AVP = 1;
        const SAVP = 2;
        const AVPF = 4;
        const SAVPF = 8;
    }
}

#[doc(hidden)]
impl IntoGlib for RTSPProfile {
    type GlibType = ffi::GstRTSPProfile;

    fn into_glib(self) -> ffi::GstRTSPProfile {
        self.bits()
    }
}

#[doc(hidden)]
impl FromGlib<ffi::GstRTSPProfile> for RTSPProfile {
    unsafe fn from_glib(value: ffi::GstRTSPProfile) -> Self {
        skip_assert_initialized!();
        Self::from_bits_truncate(value)
    }
}

impl StaticType for RTSPProfile {
    fn static_type() -> Type {
        unsafe { from_glib(ffi::gst_rtsp_profile_get_type()) }
    }
}

impl glib::value::ValueType for RTSPProfile {
    type Type = Self;
}

unsafe impl<'a> FromValue<'a> for RTSPProfile {
    type Checker = glib::value::GenericValueTypeChecker<Self>;

    unsafe fn from_value(value: &'a glib::Value) -> Self {
        skip_assert_initialized!();
        from_glib(glib::gobject_ffi::g_value_get_flags(value.to_glib_none().0))
    }
}

impl ToValue for RTSPProfile {
    fn to_value(&self) -> glib::Value {
        let mut value = glib::Value::for_value_type::<Self>();
        unsafe {
            glib::gobject_ffi::g_value_set_flags(value.to_glib_none_mut().0, self.into_glib());
        }
        value
    }

    fn value_type(&self) -> glib::Type {
        Self::static_type()
    }
}

bitflags! {
    pub struct RTSPTransMode: u32 {
        const RTP = 1;
        const RDT = 2;
    }
}

#[doc(hidden)]
impl IntoGlib for RTSPTransMode {
    type GlibType = ffi::GstRTSPTransMode;

    fn into_glib(self) -> ffi::GstRTSPTransMode {
        self.bits()
    }
}

#[doc(hidden)]
impl FromGlib<ffi::GstRTSPTransMode> for RTSPTransMode {
    unsafe fn from_glib(value: ffi::GstRTSPTransMode) -> Self {
        skip_assert_initialized!();
        Self::from_bits_truncate(value)
    }
}

impl StaticType for RTSPTransMode {
    fn static_type() -> Type {
        unsafe { from_glib(ffi::gst_rtsp_trans_mode_get_type()) }
    }
}

impl glib::value::ValueType for RTSPTransMode {
    type Type = Self;
}

unsafe impl<'a> FromValue<'a> for RTSPTransMode {
    type Checker = glib::value::GenericValueTypeChecker<Self>;

    unsafe fn from_value(value: &'a glib::Value) -> Self {
        skip_assert_initialized!();
        from_glib(glib::gobject_ffi::g_value_get_flags(value.to_glib_none().0))
    }
}

impl ToValue for RTSPTransMode {
    fn to_value(&self) -> glib::Value {
        let mut value = glib::Value::for_value_type::<Self>();
        unsafe {
            glib::gobject_ffi::g_value_set_flags(value.to_glib_none_mut().0, self.into_glib());
        }
        value
    }

    fn value_type(&self) -> glib::Type {
        Self::static_type()
    }
}
