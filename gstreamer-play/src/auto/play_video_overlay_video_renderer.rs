// This file was generated by gir (https://github.com/gtk-rs/gir)
// from gir-files (https://github.com/gtk-rs/gir-files)
// from gst-gir-files (https://gitlab.freedesktop.org/gstreamer/gir-files-rs.git)
// DO NOT EDIT

use crate::{ffi, PlayVideoRenderer};
use glib::{
    prelude::*,
    signal::{connect_raw, SignalHandlerId},
    translate::*,
};
use std::boxed::Box as Box_;

glib::wrapper! {
    #[doc(alias = "GstPlayVideoOverlayVideoRenderer")]
    pub struct PlayVideoOverlayVideoRenderer(Object<ffi::GstPlayVideoOverlayVideoRenderer, ffi::GstPlayVideoOverlayVideoRendererClass>) @implements PlayVideoRenderer;

    match fn {
        type_ => || ffi::gst_play_video_overlay_video_renderer_get_type(),
    }
}

impl PlayVideoOverlayVideoRenderer {
    #[doc(alias = "gst_play_video_overlay_video_renderer_expose")]
    pub fn expose(&self) {
        unsafe {
            ffi::gst_play_video_overlay_video_renderer_expose(self.to_glib_none().0);
        }
    }

    #[doc(alias = "gst_play_video_overlay_video_renderer_get_render_rectangle")]
    #[doc(alias = "get_render_rectangle")]
    pub fn render_rectangle(&self) -> (i32, i32, i32, i32) {
        unsafe {
            let mut x = std::mem::MaybeUninit::uninit();
            let mut y = std::mem::MaybeUninit::uninit();
            let mut width = std::mem::MaybeUninit::uninit();
            let mut height = std::mem::MaybeUninit::uninit();
            ffi::gst_play_video_overlay_video_renderer_get_render_rectangle(
                self.to_glib_none().0,
                x.as_mut_ptr(),
                y.as_mut_ptr(),
                width.as_mut_ptr(),
                height.as_mut_ptr(),
            );
            (
                x.assume_init(),
                y.assume_init(),
                width.assume_init(),
                height.assume_init(),
            )
        }
    }

    #[doc(alias = "gst_play_video_overlay_video_renderer_set_render_rectangle")]
    pub fn set_render_rectangle(&self, x: i32, y: i32, width: i32, height: i32) {
        unsafe {
            ffi::gst_play_video_overlay_video_renderer_set_render_rectangle(
                self.to_glib_none().0,
                x,
                y,
                width,
                height,
            );
        }
    }

    #[doc(alias = "video-sink")]
    pub fn video_sink(&self) -> Option<gst::Element> {
        ObjectExt::property(self, "video-sink")
    }

    #[doc(alias = "video-sink")]
    pub fn set_video_sink<P: IsA<gst::Element>>(&self, video_sink: Option<&P>) {
        ObjectExt::set_property(self, "video-sink", video_sink)
    }

    #[doc(alias = "video-sink")]
    pub fn connect_video_sink_notify<F: Fn(&Self) + Send + Sync + 'static>(
        &self,
        f: F,
    ) -> SignalHandlerId {
        unsafe extern "C" fn notify_video_sink_trampoline<
            F: Fn(&PlayVideoOverlayVideoRenderer) + Send + Sync + 'static,
        >(
            this: *mut ffi::GstPlayVideoOverlayVideoRenderer,
            _param_spec: glib::ffi::gpointer,
            f: glib::ffi::gpointer,
        ) {
            let f: &F = &*(f as *const F);
            f(&from_glib_borrow(this))
        }
        unsafe {
            let f: Box_<F> = Box_::new(f);
            connect_raw(
                self.as_ptr() as *mut _,
                c"notify::video-sink".as_ptr() as *const _,
                Some(std::mem::transmute::<*const (), unsafe extern "C" fn()>(
                    notify_video_sink_trampoline::<F> as *const (),
                )),
                Box_::into_raw(f),
            )
        }
    }

    #[doc(alias = "window-handle")]
    pub fn connect_window_handle_notify<F: Fn(&Self) + Send + Sync + 'static>(
        &self,
        f: F,
    ) -> SignalHandlerId {
        unsafe extern "C" fn notify_window_handle_trampoline<
            F: Fn(&PlayVideoOverlayVideoRenderer) + Send + Sync + 'static,
        >(
            this: *mut ffi::GstPlayVideoOverlayVideoRenderer,
            _param_spec: glib::ffi::gpointer,
            f: glib::ffi::gpointer,
        ) {
            let f: &F = &*(f as *const F);
            f(&from_glib_borrow(this))
        }
        unsafe {
            let f: Box_<F> = Box_::new(f);
            connect_raw(
                self.as_ptr() as *mut _,
                c"notify::window-handle".as_ptr() as *const _,
                Some(std::mem::transmute::<*const (), unsafe extern "C" fn()>(
                    notify_window_handle_trampoline::<F> as *const (),
                )),
                Box_::into_raw(f),
            )
        }
    }
}

unsafe impl Send for PlayVideoOverlayVideoRenderer {}
unsafe impl Sync for PlayVideoOverlayVideoRenderer {}
