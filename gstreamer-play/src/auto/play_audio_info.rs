// This file was generated by gir (https://github.com/gtk-rs/gir)
// from gir-files (https://github.com/gtk-rs/gir-files)
// from gst-gir-files (https://gitlab.freedesktop.org/gstreamer/gir-files-rs.git)
// DO NOT EDIT

use crate::PlayStreamInfo;
use glib::translate::*;

glib::wrapper! {
    #[doc(alias = "GstPlayAudioInfo")]
    pub struct PlayAudioInfo(Object<ffi::GstPlayAudioInfo, ffi::GstPlayAudioInfoClass>) @extends PlayStreamInfo;

    match fn {
        type_ => || ffi::gst_play_audio_info_get_type(),
    }
}

impl PlayAudioInfo {
    #[doc(alias = "gst_play_audio_info_get_bitrate")]
    #[doc(alias = "get_bitrate")]
    pub fn bitrate(&self) -> i32 {
        unsafe { ffi::gst_play_audio_info_get_bitrate(self.to_glib_none().0) }
    }

    #[doc(alias = "gst_play_audio_info_get_channels")]
    #[doc(alias = "get_channels")]
    pub fn channels(&self) -> i32 {
        unsafe { ffi::gst_play_audio_info_get_channels(self.to_glib_none().0) }
    }

    #[doc(alias = "gst_play_audio_info_get_language")]
    #[doc(alias = "get_language")]
    pub fn language(&self) -> Option<glib::GString> {
        unsafe { from_glib_none(ffi::gst_play_audio_info_get_language(self.to_glib_none().0)) }
    }

    #[doc(alias = "gst_play_audio_info_get_max_bitrate")]
    #[doc(alias = "get_max_bitrate")]
    pub fn max_bitrate(&self) -> i32 {
        unsafe { ffi::gst_play_audio_info_get_max_bitrate(self.to_glib_none().0) }
    }

    #[doc(alias = "gst_play_audio_info_get_sample_rate")]
    #[doc(alias = "get_sample_rate")]
    pub fn sample_rate(&self) -> i32 {
        unsafe { ffi::gst_play_audio_info_get_sample_rate(self.to_glib_none().0) }
    }
}

unsafe impl Send for PlayAudioInfo {}
unsafe impl Sync for PlayAudioInfo {}
