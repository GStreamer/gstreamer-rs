// This file was generated by gir (https://github.com/gtk-rs/gir)
// from gir-files (https://github.com/gtk-rs/gir-files)
// DO NOT EDIT

use EncodingProfile;
use glib::object::IsA;
use glib::translate::*;
use gst_pbutils_sys;

glib_wrapper! {
    pub struct EncodingContainerProfile(Object<gst_pbutils_sys::GstEncodingContainerProfile, gst_pbutils_sys::GstEncodingContainerProfileClass, EncodingContainerProfileClass>) @extends EncodingProfile;

    match fn {
        get_type => || gst_pbutils_sys::gst_encoding_container_profile_get_type(),
    }
}

unsafe impl Send for EncodingContainerProfile {}
unsafe impl Sync for EncodingContainerProfile {}

pub const NONE_ENCODING_CONTAINER_PROFILE: Option<&EncodingContainerProfile> = None;

pub trait EncodingContainerProfileExt: 'static {
    fn contains_profile<P: IsA<EncodingProfile>>(&self, profile: &P) -> bool;

    fn get_profiles(&self) -> Vec<EncodingProfile>;
}

impl<O: IsA<EncodingContainerProfile>> EncodingContainerProfileExt for O {
    fn contains_profile<P: IsA<EncodingProfile>>(&self, profile: &P) -> bool {
        unsafe {
            from_glib(gst_pbutils_sys::gst_encoding_container_profile_contains_profile(self.as_ref().to_glib_none().0, profile.as_ref().to_glib_none().0))
        }
    }

    fn get_profiles(&self) -> Vec<EncodingProfile> {
        unsafe {
            FromGlibPtrContainer::from_glib_none(gst_pbutils_sys::gst_encoding_container_profile_get_profiles(self.as_ref().to_glib_none().0))
        }
    }
}
