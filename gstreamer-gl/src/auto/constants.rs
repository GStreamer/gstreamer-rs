// This file was generated by gir (https://github.com/gtk-rs/gir)
// from gir-files (https://github.com/gtk-rs/gir-files)
// from gst-gir-files (https://gitlab.freedesktop.org/gstreamer/gir-files-rs.git)
// DO NOT EDIT

use std::ffi::CStr;

#[doc(alias = "GST_BUFFER_POOL_OPTION_GL_SYNC_META")]
pub static BUFFER_POOL_OPTION_GL_SYNC_META: once_cell::sync::Lazy<&'static str> =
    once_cell::sync::Lazy::new(|| unsafe {
        CStr::from_ptr(ffi::GST_BUFFER_POOL_OPTION_GL_SYNC_META)
            .to_str()
            .unwrap()
    });
#[doc(alias = "GST_BUFFER_POOL_OPTION_GL_TEXTURE_TARGET_2D")]
pub static BUFFER_POOL_OPTION_GL_TEXTURE_TARGET_2D: once_cell::sync::Lazy<&'static str> =
    once_cell::sync::Lazy::new(|| unsafe {
        CStr::from_ptr(ffi::GST_BUFFER_POOL_OPTION_GL_TEXTURE_TARGET_2D)
            .to_str()
            .unwrap()
    });
#[doc(alias = "GST_BUFFER_POOL_OPTION_GL_TEXTURE_TARGET_EXTERNAL_OES")]
pub static BUFFER_POOL_OPTION_GL_TEXTURE_TARGET_EXTERNAL_OES: once_cell::sync::Lazy<&'static str> =
    once_cell::sync::Lazy::new(|| unsafe {
        CStr::from_ptr(ffi::GST_BUFFER_POOL_OPTION_GL_TEXTURE_TARGET_EXTERNAL_OES)
            .to_str()
            .unwrap()
    });
#[doc(alias = "GST_BUFFER_POOL_OPTION_GL_TEXTURE_TARGET_RECTANGLE")]
pub static BUFFER_POOL_OPTION_GL_TEXTURE_TARGET_RECTANGLE: once_cell::sync::Lazy<&'static str> =
    once_cell::sync::Lazy::new(|| unsafe {
        CStr::from_ptr(ffi::GST_BUFFER_POOL_OPTION_GL_TEXTURE_TARGET_RECTANGLE)
            .to_str()
            .unwrap()
    });
#[doc(alias = "GST_CAPS_FEATURE_MEMORY_GL_BUFFER")]
pub static CAPS_FEATURE_MEMORY_GL_BUFFER: once_cell::sync::Lazy<&'static str> =
    once_cell::sync::Lazy::new(|| unsafe {
        CStr::from_ptr(ffi::GST_CAPS_FEATURE_MEMORY_GL_BUFFER)
            .to_str()
            .unwrap()
    });
#[doc(alias = "GST_CAPS_FEATURE_MEMORY_GL_MEMORY")]
pub static CAPS_FEATURE_MEMORY_GL_MEMORY: once_cell::sync::Lazy<&'static str> =
    once_cell::sync::Lazy::new(|| unsafe {
        CStr::from_ptr(ffi::GST_CAPS_FEATURE_MEMORY_GL_MEMORY)
            .to_str()
            .unwrap()
    });
#[doc(alias = "GST_GL_API_GLES1_NAME")]
pub static GL_API_GLES1_NAME: once_cell::sync::Lazy<&'static str> =
    once_cell::sync::Lazy::new(|| unsafe {
        CStr::from_ptr(ffi::GST_GL_API_GLES1_NAME).to_str().unwrap()
    });
#[doc(alias = "GST_GL_API_GLES2_NAME")]
pub static GL_API_GLES2_NAME: once_cell::sync::Lazy<&'static str> =
    once_cell::sync::Lazy::new(|| unsafe {
        CStr::from_ptr(ffi::GST_GL_API_GLES2_NAME).to_str().unwrap()
    });
#[doc(alias = "GST_GL_API_OPENGL3_NAME")]
pub static GL_API_OPENGL3_NAME: once_cell::sync::Lazy<&'static str> =
    once_cell::sync::Lazy::new(|| unsafe {
        CStr::from_ptr(ffi::GST_GL_API_OPENGL3_NAME)
            .to_str()
            .unwrap()
    });
#[doc(alias = "GST_GL_API_OPENGL_NAME")]
pub static GL_API_OPENGL_NAME: once_cell::sync::Lazy<&'static str> =
    once_cell::sync::Lazy::new(|| unsafe {
        CStr::from_ptr(ffi::GST_GL_API_OPENGL_NAME)
            .to_str()
            .unwrap()
    });
#[doc(alias = "GST_GL_BASE_MEMORY_ALLOCATOR_NAME")]
pub static GL_BASE_MEMORY_ALLOCATOR_NAME: once_cell::sync::Lazy<&'static str> =
    once_cell::sync::Lazy::new(|| unsafe {
        CStr::from_ptr(ffi::GST_GL_BASE_MEMORY_ALLOCATOR_NAME)
            .to_str()
            .unwrap()
    });
#[doc(alias = "GST_GL_BUFFER_ALLOCATOR_NAME")]
pub static GL_BUFFER_ALLOCATOR_NAME: once_cell::sync::Lazy<&'static str> =
    once_cell::sync::Lazy::new(|| unsafe {
        CStr::from_ptr(ffi::GST_GL_BUFFER_ALLOCATOR_NAME)
            .to_str()
            .unwrap()
    });
#[doc(alias = "GST_GL_COLOR_CONVERT_EXT_FORMATS")]
pub static GL_COLOR_CONVERT_EXT_FORMATS: once_cell::sync::Lazy<&'static str> =
    once_cell::sync::Lazy::new(|| unsafe {
        CStr::from_ptr(ffi::GST_GL_COLOR_CONVERT_EXT_FORMATS)
            .to_str()
            .unwrap()
    });
#[doc(alias = "GST_GL_COLOR_CONVERT_VIDEO_CAPS")]
pub static GL_COLOR_CONVERT_VIDEO_CAPS: once_cell::sync::Lazy<&'static str> =
    once_cell::sync::Lazy::new(|| unsafe {
        CStr::from_ptr(ffi::GST_GL_COLOR_CONVERT_VIDEO_CAPS)
            .to_str()
            .unwrap()
    });
#[cfg(any(feature = "v1_20", feature = "dox"))]
#[cfg_attr(feature = "dox", doc(cfg(feature = "v1_20")))]
#[doc(alias = "GST_GL_CONFIG_STRUCTURE_NAME")]
pub static GL_CONFIG_STRUCTURE_NAME: once_cell::sync::Lazy<&'static str> =
    once_cell::sync::Lazy::new(|| unsafe {
        CStr::from_ptr(ffi::GST_GL_CONFIG_STRUCTURE_NAME)
            .to_str()
            .unwrap()
    });
#[doc(alias = "GST_GL_CONTEXT_TYPE_CGL")]
pub static GL_CONTEXT_TYPE_CGL: once_cell::sync::Lazy<&'static str> =
    once_cell::sync::Lazy::new(|| unsafe {
        CStr::from_ptr(ffi::GST_GL_CONTEXT_TYPE_CGL)
            .to_str()
            .unwrap()
    });
#[doc(alias = "GST_GL_CONTEXT_TYPE_EAGL")]
pub static GL_CONTEXT_TYPE_EAGL: once_cell::sync::Lazy<&'static str> =
    once_cell::sync::Lazy::new(|| unsafe {
        CStr::from_ptr(ffi::GST_GL_CONTEXT_TYPE_EAGL)
            .to_str()
            .unwrap()
    });
#[doc(alias = "GST_GL_CONTEXT_TYPE_EGL")]
pub static GL_CONTEXT_TYPE_EGL: once_cell::sync::Lazy<&'static str> =
    once_cell::sync::Lazy::new(|| unsafe {
        CStr::from_ptr(ffi::GST_GL_CONTEXT_TYPE_EGL)
            .to_str()
            .unwrap()
    });
#[doc(alias = "GST_GL_CONTEXT_TYPE_GLX")]
pub static GL_CONTEXT_TYPE_GLX: once_cell::sync::Lazy<&'static str> =
    once_cell::sync::Lazy::new(|| unsafe {
        CStr::from_ptr(ffi::GST_GL_CONTEXT_TYPE_GLX)
            .to_str()
            .unwrap()
    });
#[doc(alias = "GST_GL_CONTEXT_TYPE_WGL")]
pub static GL_CONTEXT_TYPE_WGL: once_cell::sync::Lazy<&'static str> =
    once_cell::sync::Lazy::new(|| unsafe {
        CStr::from_ptr(ffi::GST_GL_CONTEXT_TYPE_WGL)
            .to_str()
            .unwrap()
    });
#[doc(alias = "GST_GL_DISPLAY_CONTEXT_TYPE")]
pub static GL_DISPLAY_CONTEXT_TYPE: once_cell::sync::Lazy<&'static str> =
    once_cell::sync::Lazy::new(|| unsafe {
        CStr::from_ptr(ffi::GST_GL_DISPLAY_CONTEXT_TYPE)
            .to_str()
            .unwrap()
    });
#[doc(alias = "GST_GL_MEMORY_ALLOCATOR_NAME")]
pub static GL_MEMORY_ALLOCATOR_NAME: once_cell::sync::Lazy<&'static str> =
    once_cell::sync::Lazy::new(|| unsafe {
        CStr::from_ptr(ffi::GST_GL_MEMORY_ALLOCATOR_NAME)
            .to_str()
            .unwrap()
    });
#[doc(alias = "GST_GL_MEMORY_PBO_ALLOCATOR_NAME")]
pub static GL_MEMORY_PBO_ALLOCATOR_NAME: once_cell::sync::Lazy<&'static str> =
    once_cell::sync::Lazy::new(|| unsafe {
        CStr::from_ptr(ffi::GST_GL_MEMORY_PBO_ALLOCATOR_NAME)
            .to_str()
            .unwrap()
    });
#[doc(alias = "GST_GL_MEMORY_VIDEO_EXT_FORMATS")]
pub static GL_MEMORY_VIDEO_EXT_FORMATS: once_cell::sync::Lazy<&'static str> =
    once_cell::sync::Lazy::new(|| unsafe {
        CStr::from_ptr(ffi::GST_GL_MEMORY_VIDEO_EXT_FORMATS)
            .to_str()
            .unwrap()
    });
#[doc(alias = "GST_GL_RENDERBUFFER_ALLOCATOR_NAME")]
pub static GL_RENDERBUFFER_ALLOCATOR_NAME: once_cell::sync::Lazy<&'static str> =
    once_cell::sync::Lazy::new(|| unsafe {
        CStr::from_ptr(ffi::GST_GL_RENDERBUFFER_ALLOCATOR_NAME)
            .to_str()
            .unwrap()
    });
#[doc(alias = "GST_GL_TEXTURE_TARGET_2D_STR")]
pub static GL_TEXTURE_TARGET_2D_STR: once_cell::sync::Lazy<&'static str> =
    once_cell::sync::Lazy::new(|| unsafe {
        CStr::from_ptr(ffi::GST_GL_TEXTURE_TARGET_2D_STR)
            .to_str()
            .unwrap()
    });
#[doc(alias = "GST_GL_TEXTURE_TARGET_EXTERNAL_OES_STR")]
pub static GL_TEXTURE_TARGET_EXTERNAL_OES_STR: once_cell::sync::Lazy<&'static str> =
    once_cell::sync::Lazy::new(|| unsafe {
        CStr::from_ptr(ffi::GST_GL_TEXTURE_TARGET_EXTERNAL_OES_STR)
            .to_str()
            .unwrap()
    });
#[doc(alias = "GST_GL_TEXTURE_TARGET_RECTANGLE_STR")]
pub static GL_TEXTURE_TARGET_RECTANGLE_STR: once_cell::sync::Lazy<&'static str> =
    once_cell::sync::Lazy::new(|| unsafe {
        CStr::from_ptr(ffi::GST_GL_TEXTURE_TARGET_RECTANGLE_STR)
            .to_str()
            .unwrap()
    });
