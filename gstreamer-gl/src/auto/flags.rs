// This file was generated by gir (https://github.com/gtk-rs/gir)
// from gir-files (https://github.com/gtk-rs/gir-files)
// DO NOT EDIT

use glib::translate::*;
use gst_gl_sys;

bitflags! {
    pub struct GLAPI: u32 {
        const NONE = 0;
        const OPENGL = 1;
        const OPENGL3 = 2;
        const GLES1 = 32768;
        const GLES2 = 65536;
        const ANY = 4294967295;
    }
}

#[doc(hidden)]
impl ToGlib for GLAPI {
    type GlibType = gst_gl_sys::GstGLAPI;

    fn to_glib(&self) -> gst_gl_sys::GstGLAPI {
        self.bits()
    }
}

#[doc(hidden)]
impl FromGlib<gst_gl_sys::GstGLAPI> for GLAPI {
    fn from_glib(value: gst_gl_sys::GstGLAPI) -> GLAPI {
        skip_assert_initialized!();
        GLAPI::from_bits_truncate(value)
    }
}

bitflags! {
    pub struct GLDisplayType: u32 {
        const NONE = 0;
        const X11 = 1;
        const WAYLAND = 2;
        const COCOA = 4;
        const WIN32 = 8;
        const DISPMANX = 16;
        const EGL = 32;
        const VIV_FB = 64;
        const GBM = 128;
        const ANY = 4294967295;
    }
}

#[doc(hidden)]
impl ToGlib for GLDisplayType {
    type GlibType = gst_gl_sys::GstGLDisplayType;

    fn to_glib(&self) -> gst_gl_sys::GstGLDisplayType {
        self.bits()
    }
}

#[doc(hidden)]
impl FromGlib<gst_gl_sys::GstGLDisplayType> for GLDisplayType {
    fn from_glib(value: gst_gl_sys::GstGLDisplayType) -> GLDisplayType {
        skip_assert_initialized!();
        GLDisplayType::from_bits_truncate(value)
    }
}

bitflags! {
    pub struct GLPlatform: u32 {
        const NONE = 0;
        const EGL = 1;
        const GLX = 2;
        const WGL = 4;
        const CGL = 8;
        const EAGL = 16;
        const ANY = 4294967295;
    }
}

#[doc(hidden)]
impl ToGlib for GLPlatform {
    type GlibType = gst_gl_sys::GstGLPlatform;

    fn to_glib(&self) -> gst_gl_sys::GstGLPlatform {
        self.bits()
    }
}

#[doc(hidden)]
impl FromGlib<gst_gl_sys::GstGLPlatform> for GLPlatform {
    fn from_glib(value: gst_gl_sys::GstGLPlatform) -> GLPlatform {
        skip_assert_initialized!();
        GLPlatform::from_bits_truncate(value)
    }
}

bitflags! {
    pub struct GLSLProfile: u32 {
        const NONE = 0;
        const ES = 1;
        const CORE = 2;
        const COMPATIBILITY = 4;
        const ANY = 4294967295;
    }
}

#[doc(hidden)]
impl ToGlib for GLSLProfile {
    type GlibType = gst_gl_sys::GstGLSLProfile;

    fn to_glib(&self) -> gst_gl_sys::GstGLSLProfile {
        self.bits()
    }
}

#[doc(hidden)]
impl FromGlib<gst_gl_sys::GstGLSLProfile> for GLSLProfile {
    fn from_glib(value: gst_gl_sys::GstGLSLProfile) -> GLSLProfile {
        skip_assert_initialized!();
        GLSLProfile::from_bits_truncate(value)
    }
}

