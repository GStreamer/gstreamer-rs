// This file was generated by gir (https://github.com/gtk-rs/gir)
// from gir-files (https://github.com/gtk-rs/gir-files)
// DO NOT EDIT

use crate::GLContext;
use glib::object::IsA;
use glib::translate::*;
use std::mem;

glib::wrapper! {
    pub struct GLFramebuffer(Object<ffi::GstGLFramebuffer, ffi::GstGLFramebufferClass>) @extends gst::Object;

    match fn {
        get_type => || ffi::gst_gl_framebuffer_get_type(),
    }
}

impl GLFramebuffer {
    #[doc(alias = "gst_gl_framebuffer_new")]
    pub fn new<P: IsA<GLContext>>(context: &P) -> GLFramebuffer {
        skip_assert_initialized!();
        unsafe {
            from_glib_full(ffi::gst_gl_framebuffer_new(
                context.as_ref().to_glib_none().0,
            ))
        }
    }

    #[doc(alias = "gst_gl_framebuffer_new_with_default_depth")]
    pub fn with_default_depth<P: IsA<GLContext>>(
        context: &P,
        width: u32,
        height: u32,
    ) -> GLFramebuffer {
        skip_assert_initialized!();
        unsafe {
            from_glib_none(ffi::gst_gl_framebuffer_new_with_default_depth(
                context.as_ref().to_glib_none().0,
                width,
                height,
            ))
        }
    }
}

unsafe impl Send for GLFramebuffer {}
unsafe impl Sync for GLFramebuffer {}

pub const NONE_GL_FRAMEBUFFER: Option<&GLFramebuffer> = None;

pub trait GLFramebufferExt: 'static {
    //#[doc(alias = "gst_gl_framebuffer_attach")]
    //fn attach(&self, attachment_point: u32, mem: /*Ignored*/&mut GLBaseMemory);

    #[doc(alias = "gst_gl_framebuffer_bind")]
    fn bind(&self);

    //#[doc(alias = "gst_gl_framebuffer_draw_to_texture")]
    //fn draw_to_texture(&self, mem: /*Ignored*/&mut GLMemory, func: /*Unimplemented*/FnMut(/*Unimplemented*/Option<Fundamental: Pointer>) -> bool, user_data: /*Unimplemented*/Option<Fundamental: Pointer>) -> bool;

    #[doc(alias = "gst_gl_framebuffer_get_effective_dimensions")]
    fn get_effective_dimensions(&self) -> (u32, u32);

    #[doc(alias = "gst_gl_framebuffer_get_id")]
    fn get_id(&self) -> u32;
}

impl<O: IsA<GLFramebuffer>> GLFramebufferExt for O {
    //fn attach(&self, attachment_point: u32, mem: /*Ignored*/&mut GLBaseMemory) {
    //    unsafe { TODO: call ffi:gst_gl_framebuffer_attach() }
    //}

    fn bind(&self) {
        unsafe {
            ffi::gst_gl_framebuffer_bind(self.as_ref().to_glib_none().0);
        }
    }

    //fn draw_to_texture(&self, mem: /*Ignored*/&mut GLMemory, func: /*Unimplemented*/FnMut(/*Unimplemented*/Option<Fundamental: Pointer>) -> bool, user_data: /*Unimplemented*/Option<Fundamental: Pointer>) -> bool {
    //    unsafe { TODO: call ffi:gst_gl_framebuffer_draw_to_texture() }
    //}

    fn get_effective_dimensions(&self) -> (u32, u32) {
        unsafe {
            let mut width = mem::MaybeUninit::uninit();
            let mut height = mem::MaybeUninit::uninit();
            ffi::gst_gl_framebuffer_get_effective_dimensions(
                self.as_ref().to_glib_none().0,
                width.as_mut_ptr(),
                height.as_mut_ptr(),
            );
            let width = width.assume_init();
            let height = height.assume_init();
            (width, height)
        }
    }

    fn get_id(&self) -> u32 {
        unsafe { ffi::gst_gl_framebuffer_get_id(self.as_ref().to_glib_none().0) }
    }
}
