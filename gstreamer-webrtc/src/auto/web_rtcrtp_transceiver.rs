// This file was generated by gir (https://github.com/gtk-rs/gir)
// from gir-files (https://github.com/gtk-rs/gir-files)
// DO NOT EDIT

use glib::object::ObjectType as ObjectType_;
#[cfg(any(feature = "v1_18", feature = "dox"))]
use glib::signal::connect_raw;
#[cfg(any(feature = "v1_18", feature = "dox"))]
use glib::signal::SignalHandlerId;
use glib::translate::*;
use glib::StaticType;
use glib::Value;
#[cfg(any(feature = "v1_18", feature = "dox"))]
use glib_sys;
use gobject_sys;
use gst_web_rtc_sys;
#[cfg(any(feature = "v1_18", feature = "dox"))]
use std::boxed::Box as Box_;
#[cfg(any(feature = "v1_18", feature = "dox"))]
use std::mem::transmute;
use WebRTCRTPReceiver;
use WebRTCRTPSender;
#[cfg(any(feature = "v1_18", feature = "dox"))]
use WebRTCRTPTransceiverDirection;

glib_wrapper! {
    pub struct WebRTCRTPTransceiver(Object<gst_web_rtc_sys::GstWebRTCRTPTransceiver, gst_web_rtc_sys::GstWebRTCRTPTransceiverClass>);

    match fn {
        get_type => || gst_web_rtc_sys::gst_webrtc_rtp_transceiver_get_type(),
    }
}

impl WebRTCRTPTransceiver {
    #[cfg(any(feature = "v1_18", feature = "dox"))]
    pub fn get_property_direction(&self) -> WebRTCRTPTransceiverDirection {
        unsafe {
            let mut value =
                Value::from_type(<WebRTCRTPTransceiverDirection as StaticType>::static_type());
            gobject_sys::g_object_get_property(
                self.as_ptr() as *mut gobject_sys::GObject,
                b"direction\0".as_ptr() as *const _,
                value.to_glib_none_mut().0,
            );
            value
                .get()
                .expect("Return Value for property `direction` getter")
                .unwrap()
        }
    }

    #[cfg(any(feature = "v1_18", feature = "dox"))]
    pub fn set_property_direction(&self, direction: WebRTCRTPTransceiverDirection) {
        unsafe {
            gobject_sys::g_object_set_property(
                self.as_ptr() as *mut gobject_sys::GObject,
                b"direction\0".as_ptr() as *const _,
                Value::from(&direction).to_glib_none().0,
            );
        }
    }

    pub fn get_property_mlineindex(&self) -> u32 {
        unsafe {
            let mut value = Value::from_type(<u32 as StaticType>::static_type());
            gobject_sys::g_object_get_property(
                self.as_ptr() as *mut gobject_sys::GObject,
                b"mlineindex\0".as_ptr() as *const _,
                value.to_glib_none_mut().0,
            );
            value
                .get()
                .expect("Return Value for property `mlineindex` getter")
                .unwrap()
        }
    }

    pub fn get_property_receiver(&self) -> Option<WebRTCRTPReceiver> {
        unsafe {
            let mut value = Value::from_type(<WebRTCRTPReceiver as StaticType>::static_type());
            gobject_sys::g_object_get_property(
                self.as_ptr() as *mut gobject_sys::GObject,
                b"receiver\0".as_ptr() as *const _,
                value.to_glib_none_mut().0,
            );
            value
                .get()
                .expect("Return Value for property `receiver` getter")
        }
    }

    pub fn get_property_sender(&self) -> Option<WebRTCRTPSender> {
        unsafe {
            let mut value = Value::from_type(<WebRTCRTPSender as StaticType>::static_type());
            gobject_sys::g_object_get_property(
                self.as_ptr() as *mut gobject_sys::GObject,
                b"sender\0".as_ptr() as *const _,
                value.to_glib_none_mut().0,
            );
            value
                .get()
                .expect("Return Value for property `sender` getter")
        }
    }

    #[cfg(any(feature = "v1_18", feature = "dox"))]
    pub fn connect_property_direction_notify<
        F: Fn(&WebRTCRTPTransceiver) + Send + Sync + 'static,
    >(
        &self,
        f: F,
    ) -> SignalHandlerId {
        unsafe extern "C" fn notify_direction_trampoline<
            F: Fn(&WebRTCRTPTransceiver) + Send + Sync + 'static,
        >(
            this: *mut gst_web_rtc_sys::GstWebRTCRTPTransceiver,
            _param_spec: glib_sys::gpointer,
            f: glib_sys::gpointer,
        ) {
            let f: &F = &*(f as *const F);
            f(&from_glib_borrow(this))
        }
        unsafe {
            let f: Box_<F> = Box_::new(f);
            connect_raw(
                self.as_ptr() as *mut _,
                b"notify::direction\0".as_ptr() as *const _,
                Some(transmute::<_, unsafe extern "C" fn()>(
                    notify_direction_trampoline::<F> as *const (),
                )),
                Box_::into_raw(f),
            )
        }
    }
}

unsafe impl Send for WebRTCRTPTransceiver {}
unsafe impl Sync for WebRTCRTPTransceiver {}
