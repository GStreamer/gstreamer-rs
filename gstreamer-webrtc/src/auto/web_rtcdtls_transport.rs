// This file was generated by gir (https://github.com/gtk-rs/gir)
// from gir-files (https://github.com/gtk-rs/gir-files)
// DO NOT EDIT

use WebRTCDTLSTransportState;
use WebRTCICETransport;
use ffi;
use glib::GString;
use glib::StaticType;
use glib::Value;
use glib::signal::SignalHandlerId;
use glib::signal::connect_raw;
use glib::translate::*;
use glib_ffi;
use gobject_ffi;
use std::boxed::Box as Box_;
use std::mem::transmute;

glib_wrapper! {
    pub struct WebRTCDTLSTransport(Object<ffi::GstWebRTCDTLSTransport, ffi::GstWebRTCDTLSTransportClass>);

    match fn {
        get_type => || ffi::gst_webrtc_dtls_transport_get_type(),
    }
}

impl WebRTCDTLSTransport {
    pub fn new(session_id: u32, rtcp: bool) -> WebRTCDTLSTransport {
        assert_initialized_main_thread!();
        unsafe {
            from_glib_none(ffi::gst_webrtc_dtls_transport_new(session_id, rtcp.to_glib()))
        }
    }

    pub fn set_transport(&self, ice: &WebRTCICETransport) {
        unsafe {
            ffi::gst_webrtc_dtls_transport_set_transport(self.to_glib_none().0, ice.to_glib_none().0);
        }
    }

    pub fn get_property_certificate(&self) -> Option<GString> {
        unsafe {
            let mut value = Value::from_type(<GString as StaticType>::static_type());
            gobject_ffi::g_object_get_property(self.to_glib_none().0, b"certificate\0".as_ptr() as *const _, value.to_glib_none_mut().0);
            value.get()
        }
    }

    pub fn set_property_certificate<'a, P: Into<Option<&'a str>>>(&self, certificate: P) {
        let certificate = certificate.into();
        unsafe {
            gobject_ffi::g_object_set_property(self.to_glib_none().0, b"certificate\0".as_ptr() as *const _, Value::from(certificate).to_glib_none().0);
        }
    }

    pub fn get_property_client(&self) -> bool {
        unsafe {
            let mut value = Value::from_type(<bool as StaticType>::static_type());
            gobject_ffi::g_object_get_property(self.to_glib_none().0, b"client\0".as_ptr() as *const _, value.to_glib_none_mut().0);
            value.get().unwrap()
        }
    }

    pub fn set_property_client(&self, client: bool) {
        unsafe {
            gobject_ffi::g_object_set_property(self.to_glib_none().0, b"client\0".as_ptr() as *const _, Value::from(&client).to_glib_none().0);
        }
    }

    pub fn get_property_remote_certificate(&self) -> Option<GString> {
        unsafe {
            let mut value = Value::from_type(<GString as StaticType>::static_type());
            gobject_ffi::g_object_get_property(self.to_glib_none().0, b"remote-certificate\0".as_ptr() as *const _, value.to_glib_none_mut().0);
            value.get()
        }
    }

    pub fn get_property_rtcp(&self) -> bool {
        unsafe {
            let mut value = Value::from_type(<bool as StaticType>::static_type());
            gobject_ffi::g_object_get_property(self.to_glib_none().0, b"rtcp\0".as_ptr() as *const _, value.to_glib_none_mut().0);
            value.get().unwrap()
        }
    }

    pub fn get_property_session_id(&self) -> u32 {
        unsafe {
            let mut value = Value::from_type(<u32 as StaticType>::static_type());
            gobject_ffi::g_object_get_property(self.to_glib_none().0, b"session-id\0".as_ptr() as *const _, value.to_glib_none_mut().0);
            value.get().unwrap()
        }
    }

    pub fn get_property_state(&self) -> WebRTCDTLSTransportState {
        unsafe {
            let mut value = Value::from_type(<WebRTCDTLSTransportState as StaticType>::static_type());
            gobject_ffi::g_object_get_property(self.to_glib_none().0, b"state\0".as_ptr() as *const _, value.to_glib_none_mut().0);
            value.get().unwrap()
        }
    }

    pub fn get_property_transport(&self) -> Option<WebRTCICETransport> {
        unsafe {
            let mut value = Value::from_type(<WebRTCICETransport as StaticType>::static_type());
            gobject_ffi::g_object_get_property(self.to_glib_none().0, b"transport\0".as_ptr() as *const _, value.to_glib_none_mut().0);
            value.get()
        }
    }

    pub fn connect_property_certificate_notify<F: Fn(&WebRTCDTLSTransport) + Send + Sync + 'static>(&self, f: F) -> SignalHandlerId {
        unsafe {
            let f: Box_<Box_<Fn(&WebRTCDTLSTransport) + Send + Sync + 'static>> = Box_::new(Box_::new(f));
            connect_raw(self.to_glib_none().0, b"notify::certificate\0".as_ptr() as *const _,
                transmute(notify_certificate_trampoline as usize), Box_::into_raw(f) as *mut _)
        }
    }

    pub fn connect_property_client_notify<F: Fn(&WebRTCDTLSTransport) + Send + Sync + 'static>(&self, f: F) -> SignalHandlerId {
        unsafe {
            let f: Box_<Box_<Fn(&WebRTCDTLSTransport) + Send + Sync + 'static>> = Box_::new(Box_::new(f));
            connect_raw(self.to_glib_none().0, b"notify::client\0".as_ptr() as *const _,
                transmute(notify_client_trampoline as usize), Box_::into_raw(f) as *mut _)
        }
    }

    pub fn connect_property_remote_certificate_notify<F: Fn(&WebRTCDTLSTransport) + Send + Sync + 'static>(&self, f: F) -> SignalHandlerId {
        unsafe {
            let f: Box_<Box_<Fn(&WebRTCDTLSTransport) + Send + Sync + 'static>> = Box_::new(Box_::new(f));
            connect_raw(self.to_glib_none().0, b"notify::remote-certificate\0".as_ptr() as *const _,
                transmute(notify_remote_certificate_trampoline as usize), Box_::into_raw(f) as *mut _)
        }
    }

    pub fn connect_property_state_notify<F: Fn(&WebRTCDTLSTransport) + Send + Sync + 'static>(&self, f: F) -> SignalHandlerId {
        unsafe {
            let f: Box_<Box_<Fn(&WebRTCDTLSTransport) + Send + Sync + 'static>> = Box_::new(Box_::new(f));
            connect_raw(self.to_glib_none().0, b"notify::state\0".as_ptr() as *const _,
                transmute(notify_state_trampoline as usize), Box_::into_raw(f) as *mut _)
        }
    }

    pub fn connect_property_transport_notify<F: Fn(&WebRTCDTLSTransport) + Send + Sync + 'static>(&self, f: F) -> SignalHandlerId {
        unsafe {
            let f: Box_<Box_<Fn(&WebRTCDTLSTransport) + Send + Sync + 'static>> = Box_::new(Box_::new(f));
            connect_raw(self.to_glib_none().0, b"notify::transport\0".as_ptr() as *const _,
                transmute(notify_transport_trampoline as usize), Box_::into_raw(f) as *mut _)
        }
    }
}

unsafe impl Send for WebRTCDTLSTransport {}
unsafe impl Sync for WebRTCDTLSTransport {}

unsafe extern "C" fn notify_certificate_trampoline(this: *mut ffi::GstWebRTCDTLSTransport, _param_spec: glib_ffi::gpointer, f: glib_ffi::gpointer) {
    let f: &&(Fn(&WebRTCDTLSTransport) + Send + Sync + 'static) = transmute(f);
    f(&from_glib_borrow(this))
}

unsafe extern "C" fn notify_client_trampoline(this: *mut ffi::GstWebRTCDTLSTransport, _param_spec: glib_ffi::gpointer, f: glib_ffi::gpointer) {
    let f: &&(Fn(&WebRTCDTLSTransport) + Send + Sync + 'static) = transmute(f);
    f(&from_glib_borrow(this))
}

unsafe extern "C" fn notify_remote_certificate_trampoline(this: *mut ffi::GstWebRTCDTLSTransport, _param_spec: glib_ffi::gpointer, f: glib_ffi::gpointer) {
    let f: &&(Fn(&WebRTCDTLSTransport) + Send + Sync + 'static) = transmute(f);
    f(&from_glib_borrow(this))
}

unsafe extern "C" fn notify_state_trampoline(this: *mut ffi::GstWebRTCDTLSTransport, _param_spec: glib_ffi::gpointer, f: glib_ffi::gpointer) {
    let f: &&(Fn(&WebRTCDTLSTransport) + Send + Sync + 'static) = transmute(f);
    f(&from_glib_borrow(this))
}

unsafe extern "C" fn notify_transport_trampoline(this: *mut ffi::GstWebRTCDTLSTransport, _param_spec: glib_ffi::gpointer, f: glib_ffi::gpointer) {
    let f: &&(Fn(&WebRTCDTLSTransport) + Send + Sync + 'static) = transmute(f);
    f(&from_glib_borrow(this))
}
