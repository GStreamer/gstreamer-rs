// This file was generated by gir (https://github.com/gtk-rs/gir)
// from gir-files (https://github.com/gtk-rs/gir-files)
// from gst-gir-files (https://gitlab.freedesktop.org/gstreamer/gir-files-rs.git)
// DO NOT EDIT

use crate::{WebRTCDTLSTransportState, WebRTCICETransport};
use glib::{
    prelude::*,
    signal::{connect_raw, SignalHandlerId},
    translate::*,
};
use std::boxed::Box as Box_;

glib::wrapper! {
    #[doc(alias = "GstWebRTCDTLSTransport")]
    pub struct WebRTCDTLSTransport(Object<ffi::GstWebRTCDTLSTransport, ffi::GstWebRTCDTLSTransportClass>);

    match fn {
        type_ => || ffi::gst_webrtc_dtls_transport_get_type(),
    }
}

impl WebRTCDTLSTransport {
    pub fn certificate(&self) -> Option<glib::GString> {
        ObjectExt::property(self, "certificate")
    }

    pub fn set_certificate(&self, certificate: Option<&str>) {
        ObjectExt::set_property(self, "certificate", certificate)
    }

    pub fn is_client(&self) -> bool {
        ObjectExt::property(self, "client")
    }

    pub fn set_client(&self, client: bool) {
        ObjectExt::set_property(self, "client", client)
    }

    #[doc(alias = "remote-certificate")]
    pub fn remote_certificate(&self) -> Option<glib::GString> {
        ObjectExt::property(self, "remote-certificate")
    }

    #[doc(alias = "session-id")]
    pub fn session_id(&self) -> u32 {
        ObjectExt::property(self, "session-id")
    }

    pub fn state(&self) -> WebRTCDTLSTransportState {
        ObjectExt::property(self, "state")
    }

    pub fn transport(&self) -> Option<WebRTCICETransport> {
        ObjectExt::property(self, "transport")
    }

    #[doc(alias = "certificate")]
    pub fn connect_certificate_notify<F: Fn(&Self) + Send + Sync + 'static>(
        &self,
        f: F,
    ) -> SignalHandlerId {
        unsafe extern "C" fn notify_certificate_trampoline<
            F: Fn(&WebRTCDTLSTransport) + Send + Sync + 'static,
        >(
            this: *mut ffi::GstWebRTCDTLSTransport,
            _param_spec: glib::ffi::gpointer,
            f: glib::ffi::gpointer,
        ) {
            let f: &F = &*(f as *const F);
            f(&from_glib_borrow(this))
        }
        unsafe {
            let f: Box_<F> = Box_::new(f);
            connect_raw(
                self.as_ptr() as *mut _,
                b"notify::certificate\0".as_ptr() as *const _,
                Some(std::mem::transmute::<_, unsafe extern "C" fn()>(
                    notify_certificate_trampoline::<F> as *const (),
                )),
                Box_::into_raw(f),
            )
        }
    }

    #[doc(alias = "client")]
    pub fn connect_client_notify<F: Fn(&Self) + Send + Sync + 'static>(
        &self,
        f: F,
    ) -> SignalHandlerId {
        unsafe extern "C" fn notify_client_trampoline<
            F: Fn(&WebRTCDTLSTransport) + Send + Sync + 'static,
        >(
            this: *mut ffi::GstWebRTCDTLSTransport,
            _param_spec: glib::ffi::gpointer,
            f: glib::ffi::gpointer,
        ) {
            let f: &F = &*(f as *const F);
            f(&from_glib_borrow(this))
        }
        unsafe {
            let f: Box_<F> = Box_::new(f);
            connect_raw(
                self.as_ptr() as *mut _,
                b"notify::client\0".as_ptr() as *const _,
                Some(std::mem::transmute::<_, unsafe extern "C" fn()>(
                    notify_client_trampoline::<F> as *const (),
                )),
                Box_::into_raw(f),
            )
        }
    }

    #[doc(alias = "remote-certificate")]
    pub fn connect_remote_certificate_notify<F: Fn(&Self) + Send + Sync + 'static>(
        &self,
        f: F,
    ) -> SignalHandlerId {
        unsafe extern "C" fn notify_remote_certificate_trampoline<
            F: Fn(&WebRTCDTLSTransport) + Send + Sync + 'static,
        >(
            this: *mut ffi::GstWebRTCDTLSTransport,
            _param_spec: glib::ffi::gpointer,
            f: glib::ffi::gpointer,
        ) {
            let f: &F = &*(f as *const F);
            f(&from_glib_borrow(this))
        }
        unsafe {
            let f: Box_<F> = Box_::new(f);
            connect_raw(
                self.as_ptr() as *mut _,
                b"notify::remote-certificate\0".as_ptr() as *const _,
                Some(std::mem::transmute::<_, unsafe extern "C" fn()>(
                    notify_remote_certificate_trampoline::<F> as *const (),
                )),
                Box_::into_raw(f),
            )
        }
    }

    #[doc(alias = "state")]
    pub fn connect_state_notify<F: Fn(&Self) + Send + Sync + 'static>(
        &self,
        f: F,
    ) -> SignalHandlerId {
        unsafe extern "C" fn notify_state_trampoline<
            F: Fn(&WebRTCDTLSTransport) + Send + Sync + 'static,
        >(
            this: *mut ffi::GstWebRTCDTLSTransport,
            _param_spec: glib::ffi::gpointer,
            f: glib::ffi::gpointer,
        ) {
            let f: &F = &*(f as *const F);
            f(&from_glib_borrow(this))
        }
        unsafe {
            let f: Box_<F> = Box_::new(f);
            connect_raw(
                self.as_ptr() as *mut _,
                b"notify::state\0".as_ptr() as *const _,
                Some(std::mem::transmute::<_, unsafe extern "C" fn()>(
                    notify_state_trampoline::<F> as *const (),
                )),
                Box_::into_raw(f),
            )
        }
    }

    #[doc(alias = "transport")]
    pub fn connect_transport_notify<F: Fn(&Self) + Send + Sync + 'static>(
        &self,
        f: F,
    ) -> SignalHandlerId {
        unsafe extern "C" fn notify_transport_trampoline<
            F: Fn(&WebRTCDTLSTransport) + Send + Sync + 'static,
        >(
            this: *mut ffi::GstWebRTCDTLSTransport,
            _param_spec: glib::ffi::gpointer,
            f: glib::ffi::gpointer,
        ) {
            let f: &F = &*(f as *const F);
            f(&from_glib_borrow(this))
        }
        unsafe {
            let f: Box_<F> = Box_::new(f);
            connect_raw(
                self.as_ptr() as *mut _,
                b"notify::transport\0".as_ptr() as *const _,
                Some(std::mem::transmute::<_, unsafe extern "C" fn()>(
                    notify_transport_trampoline::<F> as *const (),
                )),
                Box_::into_raw(f),
            )
        }
    }
}

unsafe impl Send for WebRTCDTLSTransport {}
unsafe impl Sync for WebRTCDTLSTransport {}
