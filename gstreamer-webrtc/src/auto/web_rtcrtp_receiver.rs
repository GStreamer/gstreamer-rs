// This file was generated by gir (https://github.com/gtk-rs/gir)
// from gir-files (https://github.com/gtk-rs/gir-files)
// from gst-gir-files (https://gitlab.freedesktop.org/gstreamer/gir-files-rs.git)
// DO NOT EDIT

use crate::WebRTCDTLSTransport;
use glib::translate::*;

glib::wrapper! {
    #[doc(alias = "GstWebRTCRTPReceiver")]
    pub struct WebRTCRTPReceiver(Object<ffi::GstWebRTCRTPReceiver, ffi::GstWebRTCRTPReceiverClass>);

    match fn {
        type_ => || ffi::gst_webrtc_rtp_receiver_get_type(),
    }
}

impl WebRTCRTPReceiver {
    #[doc(alias = "gst_webrtc_rtp_receiver_new")]
    pub fn new() -> WebRTCRTPReceiver {
        assert_initialized_main_thread!();
        unsafe { from_glib_none(ffi::gst_webrtc_rtp_receiver_new()) }
    }

    #[doc(alias = "gst_webrtc_rtp_receiver_set_rtcp_transport")]
    pub fn set_rtcp_transport(&self, transport: &WebRTCDTLSTransport) {
        unsafe {
            ffi::gst_webrtc_rtp_receiver_set_rtcp_transport(
                self.to_glib_none().0,
                transport.to_glib_none().0,
            );
        }
    }

    #[doc(alias = "gst_webrtc_rtp_receiver_set_transport")]
    pub fn set_transport(&self, transport: &WebRTCDTLSTransport) {
        unsafe {
            ffi::gst_webrtc_rtp_receiver_set_transport(
                self.to_glib_none().0,
                transport.to_glib_none().0,
            );
        }
    }
}

impl Default for WebRTCRTPReceiver {
    fn default() -> Self {
        Self::new()
    }
}

unsafe impl Send for WebRTCRTPReceiver {}
unsafe impl Sync for WebRTCRTPReceiver {}
