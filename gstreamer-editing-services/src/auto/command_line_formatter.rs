// This file was generated by gir (https://github.com/gtk-rs/gir)
// from gir-files (https://github.com/gtk-rs/gir-files)
// from gst-gir-files (https://gitlab.freedesktop.org/gstreamer/gir-files-rs.git)
// DO NOT EDIT

use crate::Extractable;
use crate::Formatter;
#[cfg(any(feature = "v1_10", feature = "dox"))]
#[cfg_attr(feature = "dox", doc(cfg(feature = "v1_10")))]
use crate::Timeline;
#[cfg(any(feature = "v1_10", feature = "dox"))]
#[cfg_attr(feature = "dox", doc(cfg(feature = "v1_10")))]
use glib::object::IsA;
#[cfg(any(feature = "v1_10", feature = "dox"))]
#[cfg_attr(feature = "dox", doc(cfg(feature = "v1_10")))]
use glib::translate::*;

glib::wrapper! {
    #[doc(alias = "GESCommandLineFormatter")]
    pub struct CommandLineFormatter(Object<ffi::GESCommandLineFormatter, ffi::GESCommandLineFormatterClass>) @extends Formatter, @implements Extractable;

    match fn {
        type_ => || ffi::ges_command_line_formatter_get_type(),
    }
}

impl CommandLineFormatter {
    #[cfg(any(feature = "v1_10", feature = "dox"))]
    #[cfg_attr(feature = "dox", doc(cfg(feature = "v1_10")))]
    #[doc(alias = "ges_command_line_formatter_get_help")]
    #[doc(alias = "get_help")]
    pub fn help(commands: &[&str]) -> glib::GString {
        assert_initialized_main_thread!();
        let nargs = commands.len() as i32;
        unsafe {
            from_glib_full(ffi::ges_command_line_formatter_get_help(
                nargs,
                commands.to_glib_none().0,
            ))
        }
    }

    #[cfg(any(feature = "v1_10", feature = "dox"))]
    #[cfg_attr(feature = "dox", doc(cfg(feature = "v1_10")))]
    #[doc(alias = "ges_command_line_formatter_get_timeline_uri")]
    #[doc(alias = "get_timeline_uri")]
    pub fn timeline_uri(timeline: &impl IsA<Timeline>) -> glib::GString {
        skip_assert_initialized!();
        unsafe {
            from_glib_full(ffi::ges_command_line_formatter_get_timeline_uri(
                timeline.as_ref().to_glib_none().0,
            ))
        }
    }
}

pub const NONE_COMMAND_LINE_FORMATTER: Option<&CommandLineFormatter> = None;
