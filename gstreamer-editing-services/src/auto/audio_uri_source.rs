// This file was generated by gir (https://github.com/gtk-rs/gir)
// from gir-files (https://github.com/gtk-rs/gir-files)
// from gst-gir-files (https://gitlab.freedesktop.org/gstreamer/gir-files-rs.git)
// DO NOT EDIT

use crate::AudioSource;
use crate::Extractable;
use crate::MetaContainer;
use crate::Source;
use crate::TimelineElement;
use crate::TrackElement;
use glib::object::IsA;
use glib::translate::*;
use glib::StaticType;

glib::wrapper! {
    #[doc(alias = "GESAudioUriSource")]
    pub struct AudioUriSource(Object<ffi::GESAudioUriSource, ffi::GESAudioUriSourceClass>) @extends AudioSource, Source, TrackElement, TimelineElement, @implements Extractable, MetaContainer;

    match fn {
        type_ => || ffi::ges_audio_uri_source_get_type(),
    }
}

pub const NONE_AUDIO_URI_SOURCE: Option<&AudioUriSource> = None;

pub trait AudioUriSourceExt: 'static {
    fn uri(&self) -> Option<glib::GString>;
}

impl<O: IsA<AudioUriSource>> AudioUriSourceExt for O {
    fn uri(&self) -> Option<glib::GString> {
        unsafe {
            let mut value = glib::Value::from_type(<glib::GString as StaticType>::static_type());
            glib::gobject_ffi::g_object_get_property(
                self.to_glib_none().0 as *mut glib::gobject_ffi::GObject,
                b"uri\0".as_ptr() as *const _,
                value.to_glib_none_mut().0,
            );
            value.get().expect("Return Value for property `uri` getter")
        }
    }
}
