// This file was generated by gir (https://github.com/gtk-rs/gir)
// from gir-files (https://github.com/gtk-rs/gir-files)
// from gst-gir-files (https://gitlab.freedesktop.org/gstreamer/gir-files-rs.git)
// DO NOT EDIT

use crate::Asset;
use crate::UriClipAsset;
use glib::object::IsA;
use glib::translate::*;

glib::wrapper! {
    pub struct UriSourceAsset(Object<ffi::GESUriSourceAsset, ffi::GESUriSourceAssetClass>) @extends Asset;

    match fn {
        type_ => || ffi::ges_uri_source_asset_get_type(),
    }
}

pub const NONE_URI_SOURCE_ASSET: Option<&UriSourceAsset> = None;

pub trait UriSourceAssetExt: 'static {
    #[doc(alias = "ges_uri_source_asset_get_filesource_asset")]
    #[doc(alias = "get_filesource_asset")]
    fn filesource_asset(&self) -> Option<UriClipAsset>;

    #[doc(alias = "ges_uri_source_asset_get_stream_info")]
    #[doc(alias = "get_stream_info")]
    fn stream_info(&self) -> Option<gst_pbutils::DiscovererStreamInfo>;

    #[doc(alias = "ges_uri_source_asset_get_stream_uri")]
    #[doc(alias = "get_stream_uri")]
    fn stream_uri(&self) -> Option<glib::GString>;

    #[cfg(any(feature = "v1_18", feature = "dox"))]
    #[cfg_attr(feature = "dox", doc(cfg(feature = "v1_18")))]
    #[doc(alias = "ges_uri_source_asset_is_image")]
    fn is_image(&self) -> bool;
}

impl<O: IsA<UriSourceAsset>> UriSourceAssetExt for O {
    fn filesource_asset(&self) -> Option<UriClipAsset> {
        unsafe {
            from_glib_none(ffi::ges_uri_source_asset_get_filesource_asset(
                self.as_ref().to_glib_none().0,
            ))
        }
    }

    fn stream_info(&self) -> Option<gst_pbutils::DiscovererStreamInfo> {
        unsafe {
            from_glib_none(ffi::ges_uri_source_asset_get_stream_info(
                self.as_ref().to_glib_none().0,
            ))
        }
    }

    fn stream_uri(&self) -> Option<glib::GString> {
        unsafe {
            from_glib_none(ffi::ges_uri_source_asset_get_stream_uri(
                self.as_ref().to_glib_none().0,
            ))
        }
    }

    #[cfg(any(feature = "v1_18", feature = "dox"))]
    #[cfg_attr(feature = "dox", doc(cfg(feature = "v1_18")))]
    fn is_image(&self) -> bool {
        unsafe {
            from_glib(ffi::ges_uri_source_asset_is_image(
                self.as_ref().to_glib_none().0,
            ))
        }
    }
}
