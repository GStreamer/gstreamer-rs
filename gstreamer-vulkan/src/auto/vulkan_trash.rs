// This file was generated by gir (https://github.com/gtk-rs/gir)
// from gir-files (https://github.com/gtk-rs/gir-files)
// from gst-gir-files (https://gitlab.freedesktop.org/gstreamer/gir-files-rs.git)
// DO NOT EDIT

use crate::{VulkanDevice, VulkanFence};
use glib::translate::*;
use std::boxed::Box as Box_;

glib::wrapper! {
    #[derive(Debug, PartialEq, Eq, PartialOrd, Ord, Hash)]
    pub struct VulkanTrash(Boxed<ffi::GstVulkanTrash>);

    match fn {
        copy => |ptr| glib::gobject_ffi::g_boxed_copy(ffi::gst_vulkan_trash_get_type(), ptr as *mut _) as *mut ffi::GstVulkanTrash,
        free => |ptr| glib::gobject_ffi::g_boxed_free(ffi::gst_vulkan_trash_get_type(), ptr as *mut _),
        type_ => || ffi::gst_vulkan_trash_get_type(),
    }
}

impl VulkanTrash {
    #[doc(alias = "gst_vulkan_trash_new")]
    pub fn new(
        fence: &mut VulkanFence,
        notify: Option<Box_<dyn FnOnce(&VulkanDevice) + 'static>>,
    ) -> VulkanTrash {
        assert_initialized_main_thread!();
        let notify_data: Box_<Option<Box_<dyn FnOnce(&VulkanDevice) + 'static>>> =
            Box_::new(notify);
        unsafe extern "C" fn notify_func(
            device: *mut ffi::GstVulkanDevice,
            user_data: glib::ffi::gpointer,
        ) {
            let device = from_glib_borrow(device);
            let callback =
                Box_::from_raw(user_data as *mut Option<Box_<dyn FnOnce(&VulkanDevice) + 'static>>);
            let callback = (*callback).expect("cannot get closure...");
            callback(&device)
        }
        let notify = if notify_data.is_some() {
            Some(notify_func as _)
        } else {
            None
        };
        let super_callback0: Box_<Option<Box_<dyn FnOnce(&VulkanDevice) + 'static>>> = notify_data;
        unsafe {
            from_glib_full(ffi::gst_vulkan_trash_new(
                fence.to_glib_none_mut().0,
                notify,
                Box_::into_raw(super_callback0) as *mut _,
            ))
        }
    }

    //#[doc(alias = "gst_vulkan_trash_new_free_semaphore")]
    //pub fn new_free_semaphore(fence: &mut VulkanFence, semaphore: /*Ignored*/&vulkan::Semaphore) -> VulkanTrash {
    //    unsafe { TODO: call ffi:gst_vulkan_trash_new_free_semaphore() }
    //}

    //#[doc(alias = "gst_vulkan_trash_mini_object_unref")]
    //pub fn mini_object_unref(device: &impl IsA<VulkanDevice>, user_data: /*Unimplemented*/Option<Basic: Pointer>) {
    //    unsafe { TODO: call ffi:gst_vulkan_trash_mini_object_unref() }
    //}

    //#[doc(alias = "gst_vulkan_trash_object_unref")]
    //pub fn object_unref(device: &impl IsA<VulkanDevice>, user_data: /*Unimplemented*/Option<Basic: Pointer>) {
    //    unsafe { TODO: call ffi:gst_vulkan_trash_object_unref() }
    //}
}

unsafe impl Send for VulkanTrash {}
unsafe impl Sync for VulkanTrash {}
