// This file was generated by gir (https://github.com/gtk-rs/gir)
// from gir-files (https://github.com/gtk-rs/gir-files)
// from gst-gir-files (https://gitlab.freedesktop.org/gstreamer/gir-files-rs.git)
// DO NOT EDIT

use crate::{VulkanCommandBuffer, VulkanFence, VulkanHandle, VulkanQueue};
use glib::{prelude::*, translate::*};

glib::wrapper! {
    #[doc(alias = "GstVulkanFullScreenQuad")]
    pub struct VulkanFullScreenQuad(Object<ffi::GstVulkanFullScreenQuad, ffi::GstVulkanFullScreenQuadClass>) @extends gst::Object;

    match fn {
        type_ => || ffi::gst_vulkan_full_screen_quad_get_type(),
    }
}

impl VulkanFullScreenQuad {
    pub const NONE: Option<&'static VulkanFullScreenQuad> = None;

    #[doc(alias = "gst_vulkan_full_screen_quad_new")]
    pub fn new(queue: &impl IsA<VulkanQueue>) -> VulkanFullScreenQuad {
        skip_assert_initialized!();
        unsafe {
            from_glib_full(ffi::gst_vulkan_full_screen_quad_new(
                queue.as_ref().to_glib_none().0,
            ))
        }
    }
}

mod sealed {
    pub trait Sealed {}
    impl<T: super::IsA<super::VulkanFullScreenQuad>> Sealed for T {}
}

pub trait VulkanFullScreenQuadExt: IsA<VulkanFullScreenQuad> + sealed::Sealed + 'static {
    #[doc(alias = "gst_vulkan_full_screen_quad_draw")]
    fn draw(&self) -> Result<(), glib::Error> {
        unsafe {
            let mut error = std::ptr::null_mut();
            let is_ok =
                ffi::gst_vulkan_full_screen_quad_draw(self.as_ref().to_glib_none().0, &mut error);
            debug_assert_eq!(is_ok == glib::ffi::GFALSE, !error.is_null());
            if error.is_null() {
                Ok(())
            } else {
                Err(from_glib_full(error))
            }
        }
    }

    #[cfg(feature = "v1_22")]
    #[cfg_attr(docsrs, doc(cfg(feature = "v1_22")))]
    #[doc(alias = "gst_vulkan_full_screen_quad_enable_blend")]
    fn enable_blend(&self, enable_blend: bool) {
        unsafe {
            ffi::gst_vulkan_full_screen_quad_enable_blend(
                self.as_ref().to_glib_none().0,
                enable_blend.into_glib(),
            );
        }
    }

    #[cfg(feature = "v1_22")]
    #[cfg_attr(docsrs, doc(cfg(feature = "v1_22")))]
    #[doc(alias = "gst_vulkan_full_screen_quad_enable_clear")]
    fn enable_clear(&self, enable_clear: bool) {
        unsafe {
            ffi::gst_vulkan_full_screen_quad_enable_clear(
                self.as_ref().to_glib_none().0,
                enable_clear.into_glib(),
            );
        }
    }

    #[doc(alias = "gst_vulkan_full_screen_quad_fill_command_buffer")]
    fn fill_command_buffer(
        &self,
        cmd: &mut VulkanCommandBuffer,
        fence: &mut VulkanFence,
    ) -> Result<(), glib::Error> {
        unsafe {
            let mut error = std::ptr::null_mut();
            let is_ok = ffi::gst_vulkan_full_screen_quad_fill_command_buffer(
                self.as_ref().to_glib_none().0,
                cmd.to_glib_none_mut().0,
                fence.to_glib_none_mut().0,
                &mut error,
            );
            debug_assert_eq!(is_ok == glib::ffi::GFALSE, !error.is_null());
            if error.is_null() {
                Ok(())
            } else {
                Err(from_glib_full(error))
            }
        }
    }

    #[doc(alias = "gst_vulkan_full_screen_quad_get_last_fence")]
    #[doc(alias = "get_last_fence")]
    fn last_fence(&self) -> VulkanFence {
        unsafe {
            from_glib_full(ffi::gst_vulkan_full_screen_quad_get_last_fence(
                self.as_ref().to_glib_none().0,
            ))
        }
    }

    #[cfg(feature = "v1_26")]
    #[cfg_attr(docsrs, doc(cfg(feature = "v1_26")))]
    #[doc(alias = "gst_vulkan_full_screen_quad_get_queue")]
    #[doc(alias = "get_queue")]
    fn queue(&self) -> Option<VulkanQueue> {
        unsafe {
            from_glib_full(ffi::gst_vulkan_full_screen_quad_get_queue(
                self.as_ref().to_glib_none().0,
            ))
        }
    }

    #[doc(alias = "gst_vulkan_full_screen_quad_prepare_draw")]
    fn prepare_draw(&self, fence: &mut VulkanFence) -> Result<(), glib::Error> {
        unsafe {
            let mut error = std::ptr::null_mut();
            let is_ok = ffi::gst_vulkan_full_screen_quad_prepare_draw(
                self.as_ref().to_glib_none().0,
                fence.to_glib_none_mut().0,
                &mut error,
            );
            debug_assert_eq!(is_ok == glib::ffi::GFALSE, !error.is_null());
            if error.is_null() {
                Ok(())
            } else {
                Err(from_glib_full(error))
            }
        }
    }

    //#[cfg(feature = "v1_22")]
    //#[cfg_attr(docsrs, doc(cfg(feature = "v1_22")))]
    //#[doc(alias = "gst_vulkan_full_screen_quad_set_blend_factors")]
    //fn set_blend_factors(&self, src_blend_factor: /*Ignored*/&vulkan::BlendFactor, dst_blend_factor: /*Ignored*/&vulkan::BlendFactor, src_alpha_blend_factor: /*Ignored*/&vulkan::BlendFactor, dst_alpha_blend_factor: /*Ignored*/&vulkan::BlendFactor) {
    //    unsafe { TODO: call ffi:gst_vulkan_full_screen_quad_set_blend_factors() }
    //}

    //#[cfg(feature = "v1_22")]
    //#[cfg_attr(docsrs, doc(cfg(feature = "v1_22")))]
    //#[doc(alias = "gst_vulkan_full_screen_quad_set_blend_operation")]
    //fn set_blend_operation(&self, colour_blend_op: /*Ignored*/&vulkan::BlendOp, alpha_blend_op: /*Ignored*/&vulkan::BlendOp) {
    //    unsafe { TODO: call ffi:gst_vulkan_full_screen_quad_set_blend_operation() }
    //}

    #[doc(alias = "gst_vulkan_full_screen_quad_set_index_buffer")]
    fn set_index_buffer(&self, indices: &gst::Memory, n_indices: usize) -> Result<(), glib::Error> {
        unsafe {
            let mut error = std::ptr::null_mut();
            let is_ok = ffi::gst_vulkan_full_screen_quad_set_index_buffer(
                self.as_ref().to_glib_none().0,
                indices.to_glib_none().0,
                n_indices,
                &mut error,
            );
            debug_assert_eq!(is_ok == glib::ffi::GFALSE, !error.is_null());
            if error.is_null() {
                Ok(())
            } else {
                Err(from_glib_full(error))
            }
        }
    }

    #[doc(alias = "gst_vulkan_full_screen_quad_set_info")]
    fn set_info(&self, in_info: &gst_video::VideoInfo, out_info: &gst_video::VideoInfo) -> bool {
        unsafe {
            from_glib(ffi::gst_vulkan_full_screen_quad_set_info(
                self.as_ref().to_glib_none().0,
                in_info.to_glib_none().0,
                out_info.to_glib_none().0,
            ))
        }
    }

    #[doc(alias = "gst_vulkan_full_screen_quad_set_input_buffer")]
    fn set_input_buffer(&self, buffer: Option<&gst::Buffer>) -> Result<(), glib::Error> {
        unsafe {
            let mut error = std::ptr::null_mut();
            let is_ok = ffi::gst_vulkan_full_screen_quad_set_input_buffer(
                self.as_ref().to_glib_none().0,
                buffer.to_glib_none().0,
                &mut error,
            );
            debug_assert_eq!(is_ok == glib::ffi::GFALSE, !error.is_null());
            if error.is_null() {
                Ok(())
            } else {
                Err(from_glib_full(error))
            }
        }
    }

    #[doc(alias = "gst_vulkan_full_screen_quad_set_output_buffer")]
    fn set_output_buffer(&self, buffer: Option<&gst::Buffer>) -> Result<(), glib::Error> {
        unsafe {
            let mut error = std::ptr::null_mut();
            let is_ok = ffi::gst_vulkan_full_screen_quad_set_output_buffer(
                self.as_ref().to_glib_none().0,
                buffer.to_glib_none().0,
                &mut error,
            );
            debug_assert_eq!(is_ok == glib::ffi::GFALSE, !error.is_null());
            if error.is_null() {
                Ok(())
            } else {
                Err(from_glib_full(error))
            }
        }
    }

    #[doc(alias = "gst_vulkan_full_screen_quad_set_shaders")]
    fn set_shaders(&self, vert: &VulkanHandle, frag: &VulkanHandle) -> bool {
        unsafe {
            from_glib(ffi::gst_vulkan_full_screen_quad_set_shaders(
                self.as_ref().to_glib_none().0,
                vert.to_glib_none().0,
                frag.to_glib_none().0,
            ))
        }
    }

    #[doc(alias = "gst_vulkan_full_screen_quad_set_uniform_buffer")]
    fn set_uniform_buffer(&self, uniforms: &gst::Memory) -> Result<(), glib::Error> {
        unsafe {
            let mut error = std::ptr::null_mut();
            let is_ok = ffi::gst_vulkan_full_screen_quad_set_uniform_buffer(
                self.as_ref().to_glib_none().0,
                uniforms.to_glib_none().0,
                &mut error,
            );
            debug_assert_eq!(is_ok == glib::ffi::GFALSE, !error.is_null());
            if error.is_null() {
                Ok(())
            } else {
                Err(from_glib_full(error))
            }
        }
    }

    #[doc(alias = "gst_vulkan_full_screen_quad_set_vertex_buffer")]
    fn set_vertex_buffer(&self, vertices: &gst::Memory) -> Result<(), glib::Error> {
        unsafe {
            let mut error = std::ptr::null_mut();
            let is_ok = ffi::gst_vulkan_full_screen_quad_set_vertex_buffer(
                self.as_ref().to_glib_none().0,
                vertices.to_glib_none().0,
                &mut error,
            );
            debug_assert_eq!(is_ok == glib::ffi::GFALSE, !error.is_null());
            if error.is_null() {
                Ok(())
            } else {
                Err(from_glib_full(error))
            }
        }
    }

    #[doc(alias = "gst_vulkan_full_screen_quad_submit")]
    fn submit(&self, cmd: VulkanCommandBuffer, fence: &mut VulkanFence) -> Result<(), glib::Error> {
        unsafe {
            let mut error = std::ptr::null_mut();
            let is_ok = ffi::gst_vulkan_full_screen_quad_submit(
                self.as_ref().to_glib_none().0,
                cmd.into_glib_ptr(),
                fence.to_glib_none_mut().0,
                &mut error,
            );
            debug_assert_eq!(is_ok == glib::ffi::GFALSE, !error.is_null());
            if error.is_null() {
                Ok(())
            } else {
                Err(from_glib_full(error))
            }
        }
    }
}

impl<O: IsA<VulkanFullScreenQuad>> VulkanFullScreenQuadExt for O {}
