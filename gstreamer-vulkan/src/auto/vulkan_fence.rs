// This file was generated by gir (https://github.com/gtk-rs/gir)
// from gir-files (https://github.com/gtk-rs/gir-files)
// from gst-gir-files (https://gitlab.freedesktop.org/gstreamer/gir-files-rs.git)
// DO NOT EDIT

use crate::{ffi, VulkanDevice};
use glib::{prelude::*, translate::*};

glib::wrapper! {
    #[derive(Debug, PartialEq, Eq, PartialOrd, Ord, Hash)]
    pub struct VulkanFence(Boxed<ffi::GstVulkanFence>);

    match fn {
        copy => |ptr| glib::gobject_ffi::g_boxed_copy(ffi::gst_vulkan_fence_get_type(), ptr as *mut _) as *mut ffi::GstVulkanFence,
        free => |ptr| glib::gobject_ffi::g_boxed_free(ffi::gst_vulkan_fence_get_type(), ptr as *mut _),
        type_ => || ffi::gst_vulkan_fence_get_type(),
    }
}

impl VulkanFence {
    #[doc(alias = "gst_vulkan_fence_new")]
    pub fn new(device: &impl IsA<VulkanDevice>) -> Result<VulkanFence, glib::Error> {
        skip_assert_initialized!();
        unsafe {
            let mut error = std::ptr::null_mut();
            let ret = ffi::gst_vulkan_fence_new(device.as_ref().to_glib_none().0, &mut error);
            if error.is_null() {
                Ok(from_glib_full(ret))
            } else {
                Err(from_glib_full(error))
            }
        }
    }

    #[doc(alias = "gst_vulkan_fence_new_always_signalled")]
    pub fn new_always_signalled(device: &impl IsA<VulkanDevice>) -> VulkanFence {
        skip_assert_initialized!();
        unsafe {
            from_glib_full(ffi::gst_vulkan_fence_new_always_signalled(
                device.as_ref().to_glib_none().0,
            ))
        }
    }

    #[doc(alias = "gst_vulkan_fence_is_signaled")]
    pub fn is_signaled(&mut self) -> bool {
        unsafe { from_glib(ffi::gst_vulkan_fence_is_signaled(self.to_glib_none_mut().0)) }
    }

    #[doc(alias = "gst_vulkan_fence_reset")]
    pub fn reset(&mut self) {
        unsafe {
            ffi::gst_vulkan_fence_reset(self.to_glib_none_mut().0);
        }
    }
}

unsafe impl Send for VulkanFence {}
unsafe impl Sync for VulkanFence {}
