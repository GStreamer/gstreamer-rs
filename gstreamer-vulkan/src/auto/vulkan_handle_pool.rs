// This file was generated by gir (https://github.com/gtk-rs/gir)
// from gir-files (https://github.com/gtk-rs/gir-files)
// from gst-gir-files (https://gitlab.freedesktop.org/gstreamer/gir-files-rs.git)
// DO NOT EDIT

use crate::ffi;
use glib::prelude::*;

glib::wrapper! {
    #[doc(alias = "GstVulkanHandlePool")]
    pub struct VulkanHandlePool(Object<ffi::GstVulkanHandlePool, ffi::GstVulkanHandlePoolClass>) @extends gst::Object;

    match fn {
        type_ => || ffi::gst_vulkan_handle_pool_get_type(),
    }
}

impl VulkanHandlePool {
    pub const NONE: Option<&'static VulkanHandlePool> = None;
}

unsafe impl Send for VulkanHandlePool {}
unsafe impl Sync for VulkanHandlePool {}

pub trait VulkanHandlePoolExt: IsA<VulkanHandlePool> + 'static {
    //#[doc(alias = "gst_vulkan_handle_pool_acquire")]
    //fn acquire(&self) -> Result</*Unimplemented*/Option<Basic: Pointer>, glib::Error> {
    //    unsafe { TODO: call ffi:gst_vulkan_handle_pool_acquire() }
    //}

    //#[doc(alias = "gst_vulkan_handle_pool_alloc")]
    //fn alloc(&self) -> Result</*Unimplemented*/Option<Basic: Pointer>, glib::Error> {
    //    unsafe { TODO: call ffi:gst_vulkan_handle_pool_alloc() }
    //}

    //#[doc(alias = "gst_vulkan_handle_pool_release")]
    //fn release(&self, handle: /*Unimplemented*/Option<Basic: Pointer>) {
    //    unsafe { TODO: call ffi:gst_vulkan_handle_pool_release() }
    //}
}

impl<O: IsA<VulkanHandlePool>> VulkanHandlePoolExt for O {}
