// This file was generated by gir (https://github.com/gtk-rs/gir)
// from gir-files (https://github.com/gtk-rs/gir-files)
// from gst-gir-files (https://gitlab.freedesktop.org/gstreamer/gir-files-rs.git)
// DO NOT EDIT

use crate::VulkanDevice;
use glib::{prelude::*, translate::*};

glib::wrapper! {
    #[doc(alias = "GstVulkanImageBufferPool")]
    pub struct VulkanImageBufferPool(Object<ffi::GstVulkanImageBufferPool, ffi::GstVulkanImageBufferPoolClass>) @extends gst::BufferPool, gst::Object;

    match fn {
        type_ => || ffi::gst_vulkan_image_buffer_pool_get_type(),
    }
}

impl VulkanImageBufferPool {
    pub const NONE: Option<&'static VulkanImageBufferPool> = None;

    #[doc(alias = "gst_vulkan_image_buffer_pool_new")]
    pub fn new(device: &impl IsA<VulkanDevice>) -> VulkanImageBufferPool {
        skip_assert_initialized!();
        unsafe {
            gst::BufferPool::from_glib_full(ffi::gst_vulkan_image_buffer_pool_new(
                device.as_ref().to_glib_none().0,
            ))
            .unsafe_cast()
        }
    }

    //#[cfg(feature = "v1_24")]
    //#[cfg_attr(docsrs, doc(cfg(feature = "v1_24")))]
    //#[doc(alias = "gst_vulkan_image_buffer_pool_config_set_allocation_params")]
    //pub fn config_set_allocation_params(config: &gst::Structure, usage: /*Ignored*/&vulkan::ImageUsageFlags, mem_properties: /*Ignored*/&vulkan::MemoryPropertyFlags, initial_layout: /*Ignored*/&vulkan::ImageLayout, initial_access: u64) {
    //    unsafe { TODO: call ffi:gst_vulkan_image_buffer_pool_config_set_allocation_params() }
    //}

    #[cfg(feature = "v1_24")]
    #[cfg_attr(docsrs, doc(cfg(feature = "v1_24")))]
    #[doc(alias = "gst_vulkan_image_buffer_pool_config_set_decode_caps")]
    pub fn config_set_decode_caps(config: &gst::Structure, caps: &gst::Caps) {
        assert_initialized_main_thread!();
        unsafe {
            ffi::gst_vulkan_image_buffer_pool_config_set_decode_caps(
                config.to_glib_none().0,
                caps.to_glib_none().0,
            );
        }
    }

    #[cfg(feature = "v1_26")]
    #[cfg_attr(docsrs, doc(cfg(feature = "v1_26")))]
    #[doc(alias = "gst_vulkan_image_buffer_pool_config_set_encode_caps")]
    pub fn config_set_encode_caps(config: &gst::Structure, caps: &gst::Caps) {
        assert_initialized_main_thread!();
        unsafe {
            ffi::gst_vulkan_image_buffer_pool_config_set_encode_caps(
                config.to_glib_none().0,
                caps.to_glib_none().0,
            );
        }
    }
}

unsafe impl Send for VulkanImageBufferPool {}
unsafe impl Sync for VulkanImageBufferPool {}
