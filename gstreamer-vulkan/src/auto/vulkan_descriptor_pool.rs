// This file was generated by gir (https://github.com/gtk-rs/gir)
// from gir-files (https://github.com/gtk-rs/gir-files)
// from gst-gir-files (https://gitlab.freedesktop.org/gstreamer/gir-files-rs.git)
// DO NOT EDIT

use crate::{ffi, VulkanDevice};
use glib::{prelude::*, translate::*};

glib::wrapper! {
    #[doc(alias = "GstVulkanDescriptorPool")]
    pub struct VulkanDescriptorPool(Object<ffi::GstVulkanDescriptorPool, ffi::GstVulkanDescriptorPoolClass>) @extends gst::Object;

    match fn {
        type_ => || ffi::gst_vulkan_descriptor_pool_get_type(),
    }
}

impl VulkanDescriptorPool {
    pub const NONE: Option<&'static VulkanDescriptorPool> = None;

    //#[doc(alias = "gst_vulkan_descriptor_pool_new_wrapped")]
    //pub fn new_wrapped(device: &impl IsA<VulkanDevice>, pool: /*Ignored*/vulkan::DescriptorPool, max_sets: usize) -> VulkanDescriptorPool {
    //    unsafe { TODO: call ffi:gst_vulkan_descriptor_pool_new_wrapped() }
    //}
}

unsafe impl Send for VulkanDescriptorPool {}
unsafe impl Sync for VulkanDescriptorPool {}

pub trait VulkanDescriptorPoolExt: IsA<VulkanDescriptorPool> + 'static {
    #[doc(alias = "gst_vulkan_descriptor_pool_get_device")]
    #[doc(alias = "get_device")]
    fn device(&self) -> VulkanDevice {
        unsafe {
            from_glib_full(ffi::gst_vulkan_descriptor_pool_get_device(
                self.as_ref().to_glib_none().0,
            ))
        }
    }

    #[doc(alias = "gst_vulkan_descriptor_pool_get_max_sets")]
    #[doc(alias = "get_max_sets")]
    fn max_sets(&self) -> usize {
        unsafe { ffi::gst_vulkan_descriptor_pool_get_max_sets(self.as_ref().to_glib_none().0) }
    }
}

impl<O: IsA<VulkanDescriptorPool>> VulkanDescriptorPoolExt for O {}
