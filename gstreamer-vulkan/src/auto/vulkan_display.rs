// This file was generated by gir (https://github.com/gtk-rs/gir)
// from gir-files (https://github.com/gtk-rs/gir-files)
// from gst-gir-files (https://gitlab.freedesktop.org/gstreamer/gir-files-rs.git)
// DO NOT EDIT

use crate::{VulkanDisplayType, VulkanInstance, VulkanWindow};
use glib::{prelude::*, translate::*};

glib::wrapper! {
    #[doc(alias = "GstVulkanDisplay")]
    pub struct VulkanDisplay(Object<ffi::GstVulkanDisplay, ffi::GstVulkanDisplayClass>) @extends gst::Object;

    match fn {
        type_ => || ffi::gst_vulkan_display_get_type(),
    }
}

impl VulkanDisplay {
    pub const NONE: Option<&'static VulkanDisplay> = None;

    #[doc(alias = "gst_vulkan_display_new")]
    pub fn new(instance: &impl IsA<VulkanInstance>) -> VulkanDisplay {
        skip_assert_initialized!();
        unsafe {
            from_glib_full(ffi::gst_vulkan_display_new(
                instance.as_ref().to_glib_none().0,
            ))
        }
    }

    #[doc(alias = "gst_vulkan_display_new_with_type")]
    #[doc(alias = "new_with_type")]
    pub fn with_type(
        instance: &impl IsA<VulkanInstance>,
        type_: VulkanDisplayType,
    ) -> Option<VulkanDisplay> {
        skip_assert_initialized!();
        unsafe {
            from_glib_full(ffi::gst_vulkan_display_new_with_type(
                instance.as_ref().to_glib_none().0,
                type_.into_glib(),
            ))
        }
    }

    #[doc(alias = "gst_vulkan_display_choose_type")]
    pub fn choose_type(instance: &impl IsA<VulkanInstance>) -> VulkanDisplayType {
        skip_assert_initialized!();
        unsafe {
            from_glib(ffi::gst_vulkan_display_choose_type(
                instance.as_ref().to_glib_none().0,
            ))
        }
    }

    #[doc(alias = "gst_vulkan_display_handle_context_query")]
    pub fn handle_context_query(
        element: &impl IsA<gst::Element>,
        query: &gst::Query,
        display: Option<&impl IsA<VulkanDisplay>>,
    ) -> bool {
        assert_initialized_main_thread!();
        unsafe {
            from_glib(ffi::gst_vulkan_display_handle_context_query(
                element.as_ref().to_glib_none().0,
                query.to_glib_none().0,
                display.map(|p| p.as_ref()).to_glib_none().0,
            ))
        }
    }

    //#[doc(alias = "gst_vulkan_display_run_context_query")]
    //pub fn run_context_query(element: &impl IsA<gst::Element>, display: impl IsA<VulkanDisplay>) -> bool {
    //    unsafe { TODO: call ffi:gst_vulkan_display_run_context_query() }
    //}
}

unsafe impl Send for VulkanDisplay {}
unsafe impl Sync for VulkanDisplay {}

mod sealed {
    pub trait Sealed {}
    impl<T: super::IsA<super::VulkanDisplay>> Sealed for T {}
}

pub trait VulkanDisplayExt: IsA<VulkanDisplay> + sealed::Sealed + 'static {
    #[doc(alias = "gst_vulkan_display_create_window")]
    fn create_window(&self) -> Option<VulkanWindow> {
        unsafe {
            from_glib_full(ffi::gst_vulkan_display_create_window(
                self.as_ref().to_glib_none().0,
            ))
        }
    }

    //#[doc(alias = "gst_vulkan_display_find_window")]
    //fn find_window(&self, data: /*Unimplemented*/Option<Basic: Pointer>, compare_func: /*Unimplemented*/FnMut(/*Unimplemented*/Option<Basic: Pointer>) -> i32) -> Option<VulkanWindow> {
    //    unsafe { TODO: call ffi:gst_vulkan_display_find_window() }
    //}

    //#[doc(alias = "gst_vulkan_display_get_handle")]
    //#[doc(alias = "get_handle")]
    //fn handle(&self) -> /*Unimplemented*/Option<Basic: Pointer> {
    //    unsafe { TODO: call ffi:gst_vulkan_display_get_handle() }
    //}

    #[doc(alias = "gst_vulkan_display_get_handle_type")]
    #[doc(alias = "get_handle_type")]
    fn handle_type(&self) -> VulkanDisplayType {
        unsafe {
            from_glib(ffi::gst_vulkan_display_get_handle_type(
                self.as_ref().to_glib_none().0,
            ))
        }
    }

    #[doc(alias = "gst_vulkan_display_remove_window")]
    fn remove_window(&self, window: &impl IsA<VulkanWindow>) -> bool {
        unsafe {
            from_glib(ffi::gst_vulkan_display_remove_window(
                self.as_ref().to_glib_none().0,
                window.as_ref().to_glib_none().0,
            ))
        }
    }
}

impl<O: IsA<VulkanDisplay>> VulkanDisplayExt for O {}
