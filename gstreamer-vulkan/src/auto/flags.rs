// This file was generated by gir (https://github.com/gtk-rs/gir)
// from gir-files (https://github.com/gtk-rs/gir-files)
// from gst-gir-files (https://gitlab.freedesktop.org/gstreamer/gir-files-rs.git)
// DO NOT EDIT

use crate::ffi;
use glib::{bitflags::bitflags, prelude::*, translate::*};

bitflags! {
    #[derive(Clone, Copy, Debug, PartialEq, Eq, Hash)]
    #[doc(alias = "GstVulkanDisplayType")]
    pub struct VulkanDisplayType: u32 {
        #[doc(alias = "GST_VULKAN_DISPLAY_TYPE_NONE")]
        const NONE = ffi::GST_VULKAN_DISPLAY_TYPE_NONE as _;
        #[doc(alias = "GST_VULKAN_DISPLAY_TYPE_XCB")]
        const XCB = ffi::GST_VULKAN_DISPLAY_TYPE_XCB as _;
        #[doc(alias = "GST_VULKAN_DISPLAY_TYPE_WAYLAND")]
        const WAYLAND = ffi::GST_VULKAN_DISPLAY_TYPE_WAYLAND as _;
        #[doc(alias = "GST_VULKAN_DISPLAY_TYPE_COCOA")]
        const COCOA = ffi::GST_VULKAN_DISPLAY_TYPE_COCOA as _;
        #[doc(alias = "GST_VULKAN_DISPLAY_TYPE_IOS")]
        const IOS = ffi::GST_VULKAN_DISPLAY_TYPE_IOS as _;
        #[doc(alias = "GST_VULKAN_DISPLAY_TYPE_WIN32")]
        const WIN32 = ffi::GST_VULKAN_DISPLAY_TYPE_WIN32 as _;
        #[doc(alias = "GST_VULKAN_DISPLAY_TYPE_ANDROID")]
        const ANDROID = ffi::GST_VULKAN_DISPLAY_TYPE_ANDROID as _;
        #[doc(alias = "GST_VULKAN_DISPLAY_TYPE_ANY")]
        const ANY = ffi::GST_VULKAN_DISPLAY_TYPE_ANY as _;
    }
}

impl VulkanDisplayType {
    #[doc(alias = "gst_vulkan_display_type_to_extension_string")]
    pub fn to_extension_string(self) -> Option<glib::GString> {
        assert_initialized_main_thread!();
        unsafe {
            from_glib_none(ffi::gst_vulkan_display_type_to_extension_string(
                self.into_glib(),
            ))
        }
    }
}

#[doc(hidden)]
impl IntoGlib for VulkanDisplayType {
    type GlibType = ffi::GstVulkanDisplayType;

    #[inline]
    fn into_glib(self) -> ffi::GstVulkanDisplayType {
        self.bits()
    }
}

#[doc(hidden)]
impl FromGlib<ffi::GstVulkanDisplayType> for VulkanDisplayType {
    #[inline]
    unsafe fn from_glib(value: ffi::GstVulkanDisplayType) -> Self {
        skip_assert_initialized!();
        Self::from_bits_truncate(value)
    }
}

impl StaticType for VulkanDisplayType {
    #[inline]
    #[doc(alias = "gst_vulkan_display_type_get_type")]
    fn static_type() -> glib::Type {
        unsafe { from_glib(ffi::gst_vulkan_display_type_get_type()) }
    }
}

impl glib::HasParamSpec for VulkanDisplayType {
    type ParamSpec = glib::ParamSpecFlags;
    type SetValue = Self;
    type BuilderFn = fn(&str) -> glib::ParamSpecFlagsBuilder<Self>;

    fn param_spec_builder() -> Self::BuilderFn {
        Self::ParamSpec::builder
    }
}

impl glib::value::ValueType for VulkanDisplayType {
    type Type = Self;
}

unsafe impl<'a> glib::value::FromValue<'a> for VulkanDisplayType {
    type Checker = glib::value::GenericValueTypeChecker<Self>;

    #[inline]
    unsafe fn from_value(value: &'a glib::Value) -> Self {
        skip_assert_initialized!();
        from_glib(glib::gobject_ffi::g_value_get_flags(value.to_glib_none().0))
    }
}

impl ToValue for VulkanDisplayType {
    #[inline]
    fn to_value(&self) -> glib::Value {
        let mut value = glib::Value::for_value_type::<Self>();
        unsafe {
            glib::gobject_ffi::g_value_set_flags(value.to_glib_none_mut().0, self.into_glib());
        }
        value
    }

    #[inline]
    fn value_type(&self) -> glib::Type {
        Self::static_type()
    }
}

impl From<VulkanDisplayType> for glib::Value {
    #[inline]
    fn from(v: VulkanDisplayType) -> Self {
        skip_assert_initialized!();
        ToValue::to_value(&v)
    }
}
