// This file was generated by gir (https://github.com/gtk-rs/gir)
// from gir-files (https://github.com/gtk-rs/gir-files)
// from gst-gir-files (https://gitlab.freedesktop.org/gstreamer/gir-files-rs.git)
// DO NOT EDIT

use crate::ffi;
#[cfg(feature = "v1_26")]
#[cfg_attr(docsrs, doc(cfg(feature = "v1_26")))]
use crate::{VulkanDevice, VulkanInstance, VulkanQueue};
use glib::prelude::*;
#[cfg(feature = "v1_26")]
#[cfg_attr(docsrs, doc(cfg(feature = "v1_26")))]
use glib::translate::*;

glib::wrapper! {
    #[doc(alias = "GstVulkanVideoFilter")]
    pub struct VulkanVideoFilter(Object<ffi::GstVulkanVideoFilter, ffi::GstVulkanVideoFilterClass>) @extends gst_base::BaseTransform, gst::Element, gst::Object;

    match fn {
        type_ => || ffi::gst_vulkan_video_filter_get_type(),
    }
}

impl VulkanVideoFilter {
    pub const NONE: Option<&'static VulkanVideoFilter> = None;
}

unsafe impl Send for VulkanVideoFilter {}
unsafe impl Sync for VulkanVideoFilter {}

pub trait VulkanVideoFilterExt: IsA<VulkanVideoFilter> + 'static {
    #[cfg(feature = "v1_26")]
    #[cfg_attr(docsrs, doc(cfg(feature = "v1_26")))]
    #[doc(alias = "gst_vulkan_video_filter_get_device")]
    #[doc(alias = "get_device")]
    fn device(&self) -> Option<VulkanDevice> {
        unsafe {
            from_glib_full(ffi::gst_vulkan_video_filter_get_device(
                self.as_ref().to_glib_none().0,
            ))
        }
    }

    #[cfg(feature = "v1_26")]
    #[cfg_attr(docsrs, doc(cfg(feature = "v1_26")))]
    #[doc(alias = "gst_vulkan_video_filter_get_instance")]
    #[doc(alias = "get_instance")]
    fn instance(&self) -> Option<VulkanInstance> {
        unsafe {
            from_glib_full(ffi::gst_vulkan_video_filter_get_instance(
                self.as_ref().to_glib_none().0,
            ))
        }
    }

    #[cfg(feature = "v1_26")]
    #[cfg_attr(docsrs, doc(cfg(feature = "v1_26")))]
    #[doc(alias = "gst_vulkan_video_filter_get_queue")]
    #[doc(alias = "get_queue")]
    fn queue(&self) -> Option<VulkanQueue> {
        unsafe {
            from_glib_full(ffi::gst_vulkan_video_filter_get_queue(
                self.as_ref().to_glib_none().0,
            ))
        }
    }
}

impl<O: IsA<VulkanVideoFilter>> VulkanVideoFilterExt for O {}
