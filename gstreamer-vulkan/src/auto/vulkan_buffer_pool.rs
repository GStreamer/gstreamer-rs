// This file was generated by gir (https://github.com/gtk-rs/gir)
// from gir-files (https://github.com/gtk-rs/gir-files)
// from gst-gir-files (https://gitlab.freedesktop.org/gstreamer/gir-files-rs.git)
// DO NOT EDIT

use crate::{ffi, VulkanDevice};
use glib::{prelude::*, translate::*};

glib::wrapper! {
    #[doc(alias = "GstVulkanBufferPool")]
    pub struct VulkanBufferPool(Object<ffi::GstVulkanBufferPool, ffi::GstVulkanBufferPoolClass>) @extends gst::BufferPool, gst::Object;

    match fn {
        type_ => || ffi::gst_vulkan_buffer_pool_get_type(),
    }
}

impl VulkanBufferPool {
    pub const NONE: Option<&'static VulkanBufferPool> = None;

    #[doc(alias = "gst_vulkan_buffer_pool_new")]
    pub fn new(device: &impl IsA<VulkanDevice>) -> VulkanBufferPool {
        skip_assert_initialized!();
        unsafe {
            gst::BufferPool::from_glib_full(ffi::gst_vulkan_buffer_pool_new(
                device.as_ref().to_glib_none().0,
            ))
            .unsafe_cast()
        }
    }

    //#[cfg(feature = "v1_24")]
    //#[cfg_attr(docsrs, doc(cfg(feature = "v1_24")))]
    //#[doc(alias = "gst_vulkan_buffer_pool_config_set_allocation_params")]
    //pub fn config_set_allocation_params(config: &gst::Structure, usage: /*Ignored*/&vulkan::BufferUsageFlags, mem_properties: /*Ignored*/&vulkan::MemoryPropertyFlags) {
    //    unsafe { TODO: call ffi:gst_vulkan_buffer_pool_config_set_allocation_params() }
    //}
}

unsafe impl Send for VulkanBufferPool {}
unsafe impl Sync for VulkanBufferPool {}
