// This file was generated by gir (https://github.com/gtk-rs/gir)
// from gir-files (https://github.com/gtk-rs/gir-files)
// from gst-gir-files (https://gitlab.freedesktop.org/gstreamer/gir-files-rs.git)
// DO NOT EDIT

use crate::ffi;
use glib::translate::*;

glib::wrapper! {
    #[doc(alias = "GstVulkanDisplayWayland")]
    pub struct VulkanDisplayWayland(Object<ffi::GstVulkanDisplayWayland, ffi::GstVulkanDisplayWaylandClass>) @extends gst::Object;

    match fn {
        type_ => || ffi::gst_vulkan_display_wayland_get_type(),
    }
}

impl VulkanDisplayWayland {
    pub const NONE: Option<&'static VulkanDisplayWayland> = None;

    #[doc(alias = "gst_vulkan_display_wayland_new")]
    pub fn new(name: Option<&str>) -> Result<VulkanDisplayWayland, glib::BoolError> {
        assert_initialized_main_thread!();
        unsafe {
            Option::<_>::from_glib_full(ffi::gst_vulkan_display_wayland_new(name.to_glib_none().0))
                .ok_or_else(|| glib::bool_error!("Failed to create Wayland display"))
        }
    }

    //#[doc(alias = "gst_vulkan_display_wayland_new_with_display")]
    //#[doc(alias = "new_with_display")]
    //pub fn with_display(display: /*Unimplemented*/Option<Basic: Pointer>) -> VulkanDisplayWayland {
    //    unsafe { TODO: call ffi:gst_vulkan_display_wayland_new_with_display() }
    //}
}

unsafe impl Send for VulkanDisplayWayland {}
unsafe impl Sync for VulkanDisplayWayland {}
