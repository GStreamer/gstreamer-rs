// This file was generated by gir (https://github.com/gtk-rs/gir)
// from gir-files (https://github.com/gtk-rs/gir-files)
// from gst-gir-files (https://gitlab.freedesktop.org/gstreamer/gir-files-rs.git)
// DO NOT EDIT

use crate::{ffi, RTSPMediaFactory};
use glib::{prelude::*, translate::*};

glib::wrapper! {
    #[doc(alias = "GstRTSPOnvifMediaFactory")]
    pub struct RTSPOnvifMediaFactory(Object<ffi::GstRTSPOnvifMediaFactory, ffi::GstRTSPOnvifMediaFactoryClass>) @extends RTSPMediaFactory;

    match fn {
        type_ => || ffi::gst_rtsp_onvif_media_factory_get_type(),
    }
}

impl RTSPOnvifMediaFactory {
    pub const NONE: Option<&'static RTSPOnvifMediaFactory> = None;

    #[doc(alias = "gst_rtsp_onvif_media_factory_new")]
    pub fn new() -> RTSPOnvifMediaFactory {
        assert_initialized_main_thread!();
        unsafe {
            RTSPMediaFactory::from_glib_full(ffi::gst_rtsp_onvif_media_factory_new()).unsafe_cast()
        }
    }
}

impl Default for RTSPOnvifMediaFactory {
    fn default() -> Self {
        Self::new()
    }
}

unsafe impl Send for RTSPOnvifMediaFactory {}
unsafe impl Sync for RTSPOnvifMediaFactory {}

mod sealed {
    pub trait Sealed {}
    impl<T: super::IsA<super::RTSPOnvifMediaFactory>> Sealed for T {}
}

pub trait RTSPOnvifMediaFactoryExt: IsA<RTSPOnvifMediaFactory> + sealed::Sealed + 'static {
    #[doc(alias = "gst_rtsp_onvif_media_factory_get_backchannel_bandwidth")]
    #[doc(alias = "get_backchannel_bandwidth")]
    fn backchannel_bandwidth(&self) -> u32 {
        unsafe {
            ffi::gst_rtsp_onvif_media_factory_get_backchannel_bandwidth(
                self.as_ref().to_glib_none().0,
            )
        }
    }

    #[doc(alias = "gst_rtsp_onvif_media_factory_get_backchannel_launch")]
    #[doc(alias = "get_backchannel_launch")]
    fn backchannel_launch(&self) -> Option<glib::GString> {
        unsafe {
            from_glib_full(ffi::gst_rtsp_onvif_media_factory_get_backchannel_launch(
                self.as_ref().to_glib_none().0,
            ))
        }
    }

    #[doc(alias = "gst_rtsp_onvif_media_factory_has_backchannel_support")]
    fn has_backchannel_support(&self) -> bool {
        unsafe {
            from_glib(ffi::gst_rtsp_onvif_media_factory_has_backchannel_support(
                self.as_ref().to_glib_none().0,
            ))
        }
    }

    #[cfg(feature = "v1_18")]
    #[cfg_attr(docsrs, doc(cfg(feature = "v1_18")))]
    #[doc(alias = "gst_rtsp_onvif_media_factory_has_replay_support")]
    fn has_replay_support(&self) -> bool {
        unsafe {
            from_glib(ffi::gst_rtsp_onvif_media_factory_has_replay_support(
                self.as_ref().to_glib_none().0,
            ))
        }
    }

    #[doc(alias = "gst_rtsp_onvif_media_factory_set_backchannel_bandwidth")]
    fn set_backchannel_bandwidth(&self, bandwidth: u32) {
        unsafe {
            ffi::gst_rtsp_onvif_media_factory_set_backchannel_bandwidth(
                self.as_ref().to_glib_none().0,
                bandwidth,
            );
        }
    }

    #[doc(alias = "gst_rtsp_onvif_media_factory_set_backchannel_launch")]
    fn set_backchannel_launch(&self, launch: Option<&str>) {
        unsafe {
            ffi::gst_rtsp_onvif_media_factory_set_backchannel_launch(
                self.as_ref().to_glib_none().0,
                launch.to_glib_none().0,
            );
        }
    }

    #[cfg(feature = "v1_18")]
    #[cfg_attr(docsrs, doc(cfg(feature = "v1_18")))]
    #[doc(alias = "gst_rtsp_onvif_media_factory_set_replay_support")]
    fn set_replay_support(&self, has_replay_support: bool) {
        unsafe {
            ffi::gst_rtsp_onvif_media_factory_set_replay_support(
                self.as_ref().to_glib_none().0,
                has_replay_support.into_glib(),
            );
        }
    }
}

impl<O: IsA<RTSPOnvifMediaFactory>> RTSPOnvifMediaFactoryExt for O {}
