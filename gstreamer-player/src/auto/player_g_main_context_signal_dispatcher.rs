// This file was generated by gir (6a48033) from gir-files (???)
// DO NOT EDIT

use PlayerSignalDispatcher;
use ffi;
use glib;
use glib::Value;
use glib::signal::SignalHandlerId;
use glib::signal::connect;
use glib::translate::*;
use glib_ffi;
use gobject_ffi;
use std::boxed::Box as Box_;
use std::mem;
use std::mem::transmute;
use std::ptr;

glib_wrapper! {
    pub struct PlayerGMainContextSignalDispatcher(Object<ffi::GstPlayerGMainContextSignalDispatcher>): PlayerSignalDispatcher;

    match fn {
        get_type => || ffi::gst_player_g_main_context_signal_dispatcher_get_type(),
    }
}

impl PlayerGMainContextSignalDispatcher {
    pub fn get_property_application_context(&self) -> Option<glib::MainContext> {
        let mut value = Value::from(None::<&glib::MainContext>);
        unsafe {
            gobject_ffi::g_object_get_property(self.to_glib_none().0, "application-context".to_glib_none().0, value.to_glib_none_mut().0);
        }
        value.get()
    }

    pub fn connect_property_application_context_notify<F: Fn(&PlayerGMainContextSignalDispatcher) + Send + Sync + 'static>(&self, f: F) -> SignalHandlerId {
        unsafe {
            let f: Box_<Box_<Fn(&PlayerGMainContextSignalDispatcher) + Send + Sync + 'static>> = Box_::new(Box_::new(f));
            connect(self.to_glib_none().0, "notify::application-context",
                transmute(notify_application_context_trampoline as usize), Box_::into_raw(f) as *mut _)
        }
    }
}

unsafe impl Send for PlayerGMainContextSignalDispatcher {}
unsafe impl Sync for PlayerGMainContextSignalDispatcher {}

unsafe extern "C" fn notify_application_context_trampoline(this: *mut ffi::GstPlayerGMainContextSignalDispatcher, _param_spec: glib_ffi::gpointer, f: glib_ffi::gpointer) {
    callback_guard!();
    let f: &&(Fn(&PlayerGMainContextSignalDispatcher) + Send + Sync + 'static) = transmute(f);
    f(&from_glib_borrow(this))
}
